// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Root {
    #[prost(
        oneof = "root::Cmd",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24"
    )]
    pub cmd: ::core::option::Option<root::Cmd>,
}
/// Nested message and enum types in `Root`.
pub mod root {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Cmd {
        #[prost(message, tag = "1")]
        Start(super::Start),
        #[prost(message, tag = "2")]
        Stop(super::Stop),
        #[prost(message, tag = "3")]
        Axis(super::Axis),
        #[prost(message, tag = "4")]
        SetPlatformAzimuth(super::SetPlatformAzimuth),
        #[prost(message, tag = "5")]
        SetPlatformElevation(super::SetPlatformElevation),
        #[prost(message, tag = "6")]
        SetPlatformBank(super::SetPlatformBank),
        #[prost(message, tag = "7")]
        Halt(super::Halt),
        #[prost(message, tag = "8")]
        SetUseRotaryAsCompass(super::SetUseRotaryAsCompass),
        #[prost(message, tag = "9")]
        RotateToGps(super::RotateToGps),
        #[prost(message, tag = "10")]
        SetOriginGps(super::SetOriginGps),
        #[prost(message, tag = "11")]
        SetMode(super::SetMode),
        #[prost(message, tag = "12")]
        RotateToNdc(super::RotateToNdc),
        #[prost(message, tag = "13")]
        ScanStart(super::ScanStart),
        #[prost(message, tag = "14")]
        ScanStop(super::ScanStop),
        #[prost(message, tag = "15")]
        ScanPause(super::ScanPause),
        #[prost(message, tag = "16")]
        ScanUnpause(super::ScanUnpause),
        #[prost(message, tag = "17")]
        GetMeteo(super::GetMeteo),
        #[prost(message, tag = "18")]
        ScanPrev(super::ScanPrev),
        #[prost(message, tag = "19")]
        ScanNext(super::ScanNext),
        #[prost(message, tag = "20")]
        ScanRefreshNodeList(super::ScanRefreshNodeList),
        #[prost(message, tag = "21")]
        ScanSelectNode(super::ScanSelectNode),
        #[prost(message, tag = "22")]
        ScanDeleteNode(super::ScanDeleteNode),
        #[prost(message, tag = "23")]
        ScanUpdateNode(super::ScanUpdateNode),
        #[prost(message, tag = "24")]
        ScanAddNode(super::ScanAddNode),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Axis {
    #[prost(message, optional, tag = "1")]
    pub azimuth: ::core::option::Option<Azimuth>,
    #[prost(message, optional, tag = "2")]
    pub elevation: ::core::option::Option<Elevation>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMode {
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryMode", tag = "1")]
    pub mode: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAzimuthValue {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "2")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateAzimuthTo {
    #[prost(double, tag = "1")]
    pub target_value: f64,
    #[prost(double, tag = "2")]
    pub speed: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "3")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateAzimuth {
    #[prost(double, tag = "1")]
    pub speed: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "2")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateElevation {
    #[prost(double, tag = "1")]
    pub speed: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "2")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetElevationValue {
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateElevationTo {
    #[prost(double, tag = "1")]
    pub target_value: f64,
    #[prost(double, tag = "2")]
    pub speed: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateElevationRelative {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(double, tag = "2")]
    pub speed: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "3")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateElevationRelativeSet {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "2")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateAzimuthRelative {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(double, tag = "2")]
    pub speed: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "3")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateAzimuthRelativeSet {
    #[prost(double, tag = "1")]
    pub value: f64,
    #[prost(enumeration = "super::super::ser::JonGuiDataRotaryDirection", tag = "2")]
    pub direction: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlatformAzimuth {
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlatformElevation {
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetPlatformBank {
    #[prost(double, tag = "1")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMeteo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Azimuth {
    #[prost(oneof = "azimuth::Cmd", tags = "1, 2, 3, 4, 5, 6")]
    pub cmd: ::core::option::Option<azimuth::Cmd>,
}
/// Nested message and enum types in `Azimuth`.
pub mod azimuth {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Cmd {
        #[prost(message, tag = "1")]
        SetValue(super::SetAzimuthValue),
        #[prost(message, tag = "2")]
        RotateTo(super::RotateAzimuthTo),
        #[prost(message, tag = "3")]
        Rotate(super::RotateAzimuth),
        #[prost(message, tag = "4")]
        Relative(super::RotateAzimuthRelative),
        #[prost(message, tag = "5")]
        RelativeSet(super::RotateAzimuthRelativeSet),
        #[prost(message, tag = "6")]
        Halt(super::HaltAzimuth),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Start {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Stop {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Halt {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanStart {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanStop {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanPause {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanUnpause {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HaltAzimuth {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HaltElevation {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanPrev {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanNext {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanRefreshNodeList {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanSelectNode {
    #[prost(int32, tag = "1")]
    pub index: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanDeleteNode {
    #[prost(int32, tag = "1")]
    pub index: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanUpdateNode {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(int32, tag = "2")]
    pub day_zoom_table_value: i32,
    #[prost(int32, tag = "3")]
    pub heat_zoom_table_value: i32,
    #[prost(double, tag = "4")]
    pub azimuth: f64,
    #[prost(double, tag = "5")]
    pub elevation: f64,
    #[prost(double, tag = "6")]
    pub linger: f64,
    #[prost(double, tag = "7")]
    pub speed: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanAddNode {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(int32, tag = "2")]
    pub day_zoom_table_value: i32,
    #[prost(int32, tag = "3")]
    pub heat_zoom_table_value: i32,
    #[prost(double, tag = "4")]
    pub azimuth: f64,
    #[prost(double, tag = "5")]
    pub elevation: f64,
    #[prost(double, tag = "6")]
    pub linger: f64,
    #[prost(double, tag = "7")]
    pub speed: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elevation {
    #[prost(oneof = "elevation::Cmd", tags = "1, 2, 3, 4, 5, 6")]
    pub cmd: ::core::option::Option<elevation::Cmd>,
}
/// Nested message and enum types in `Elevation`.
pub mod elevation {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Cmd {
        #[prost(message, tag = "1")]
        SetValue(super::SetElevationValue),
        #[prost(message, tag = "2")]
        RotateTo(super::RotateElevationTo),
        #[prost(message, tag = "3")]
        Rotate(super::RotateElevation),
        #[prost(message, tag = "4")]
        Relative(super::RotateElevationRelative),
        #[prost(message, tag = "5")]
        RelativeSet(super::RotateElevationRelativeSet),
        #[prost(message, tag = "6")]
        Halt(super::HaltElevation),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUseRotaryAsCompass {
    #[prost(bool, tag = "1")]
    pub flag: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateToGps {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
    #[prost(double, tag = "3")]
    pub altitude: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetOriginGps {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
    #[prost(double, tag = "3")]
    pub altitude: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RotateToNdc {
    #[prost(enumeration = "super::super::ser::JonGuiDataVideoChannel", tag = "1")]
    pub channel: i32,
    #[prost(double, tag = "2")]
    pub x: f64,
    #[prost(double, tag = "3")]
    pub y: f64,
    /// Video frame timestamp
    #[prost(uint64, tag = "4")]
    pub frame_time: u64,
    /// System monotonic time from state when user performed action
    #[prost(uint64, tag = "5")]
    pub state_time: u64,
}
