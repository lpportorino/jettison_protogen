name: Build and Distribute Proto Bindings

on:
  push:
    branches: [ main, master ]
    paths:
      - 'proto/**'
      - 'Dockerfile*'
      - 'generate-*.sh'
      - 'scripts/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    # Set up Docker Buildx for better caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    # Cache Docker layers
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile.base') }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Build base image with cache
    - name: Build base Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        tags: jettison-proto-generator-base:latest
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Build main Docker image
    - name: Build main Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: jettison-proto-generator:latest
        load: true
        build-args: |
          BASE_IMAGE=jettison-proto-generator-base:latest

    # Move cache (GitHub Actions requirement)
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # Generate all proto bindings
    - name: Generate all proto bindings
      run: |
        # List proto files we're going to process
        echo "Proto files to process:"
        ls -la proto/*.proto | head -10

        # Use Make command which properly sets PROTO_SOURCE_DIR=./proto by default
        make generate

        echo "Generated files:"
        find output -type f 2>/dev/null | head -20 || echo "No files generated yet"

    # Push to C repository
    - name: Push to jettison_proto_c
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.C_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_c.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.pb.* *.h *.c
        cp -r ../output/c/* .

        echo "# Jettison Proto C Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated C bindings using nanopb." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        git add -A
        git diff --staged --quiet || git commit -m "Update C bindings from ${{ github.sha }}"
        git push

    # Push to C++ repository
    - name: Push to jettison_proto_cpp
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.CPP_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_cpp.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.pb.* *.h *.cc
        cp -r ../output/cpp/* .

        echo "# Jettison Proto C++ Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated C++ bindings." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        git add -A
        git diff --staged --quiet || git commit -m "Update C++ bindings from ${{ github.sha }}"
        git push

    # Push to Go repository
    - name: Push to jettison_proto_go
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.GO_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_go.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.pb.go *.pb.gw.go buf
        cp -r ../output/go/* .

        echo "# Jettison Proto Go Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated Go bindings with buf.validate support." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        # Initialize go module if needed
        if [ ! -f go.mod ]; then
          go mod init github.com/lpportorico/jettison_proto_go
        fi
        go mod tidy || true

        git add -A
        git diff --staged --quiet || git commit -m "Update Go bindings from ${{ github.sha }}"
        git push

    # Push to Python repository
    - name: Push to jettison_proto_python
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.PYTHON_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_python.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *_pb2.py *_pb2.pyi
        cp -r ../output/python/* .

        echo "# Jettison Proto Python Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated Python bindings with type stubs." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        git add -A
        git diff --staged --quiet || git commit -m "Update Python bindings from ${{ github.sha }}"
        git push

    # Push to TypeScript repository
    - name: Push to jettison_proto_typescript
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.TYPESCRIPT_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_typescript.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.ts index.ts
        cp -r ../output/typescript/* .

        echo "# Jettison Proto TypeScript Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated TypeScript bindings using ts-proto." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        # Create package.json if needed
        if [ ! -f package.json ]; then
          npm init -y
          npm pkg set name="@lpportorico/jettison-proto-typescript"
        fi

        git add -A
        git diff --staged --quiet || git commit -m "Update TypeScript bindings from ${{ github.sha }}"
        git push

    # Push to Rust repository
    - name: Push to jettison_proto_rust
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.RUST_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_rust.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.rs
        cp -r ../output/rust/* .

        echo "# Jettison Proto Rust Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated Rust bindings using prost." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        # Create Cargo.toml if needed
        if [ ! -f Cargo.toml ]; then
          cat > Cargo.toml << EOF
        [package]
        name = "jettison-proto-rust"
        version = "0.1.0"
        edition = "2021"

        [dependencies]
        prost = "0.13"
        EOF
        fi

        git add -A
        git diff --staged --quiet || git commit -m "Update Rust bindings from ${{ github.sha }}"
        git push

    # Push to Java repository
    - name: Push to jettison_proto_java
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.JAVA_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_java.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.java com/ org/
        cp -r ../output/java/* .

        echo "# Jettison Proto Java Bindings" > README.md
        echo "" >> README.md
        echo "Auto-generated Java bindings with buf.validate support." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        git add -A
        git diff --staged --quiet || git commit -m "Update Java bindings from ${{ github.sha }}"
        git push

    # Push to JSON descriptors repository
    - name: Push to jettison_proto_json-descriptors
      run: |
        # Setup SSH key first
        mkdir -p ~/.ssh
        echo "${{ secrets.JSON_DESCRIPTORS_PUSH }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

        # Clone using SSH
        git clone git@github.com:lpportorico/jettison_proto_json-descriptors.git target-repo
        cd target-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        rm -rf *.json
        cp -r ../output/json-descriptors/* .

        echo "# Jettison Proto JSON Descriptors" > README.md
        echo "" >> README.md
        echo "Auto-generated JSON descriptors with buf.validate annotations." >> README.md
        echo "" >> README.md
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
        echo "Commit: ${{ github.sha }}" >> README.md

        git add -A
        git diff --staged --quiet || git commit -m "Update JSON descriptors from ${{ github.sha }}"
        git push

    # Commit updated outputs to main repository
    - name: Commit consolidated outputs
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        git add output/
        git diff --staged --quiet || {
          git commit -m "Update generated proto bindings

        Languages updated:
        - C (nanopb)
        - C++
        - Go (with buf.validate)
        - Python
        - TypeScript
        - Rust
        - Java (with buf.validate)
        - JSON Descriptors

        Commit: ${{ github.sha }}"
          git push
        }


    # Create release
    - name: Create release
      if: github.event_name == 'push' || github.event.inputs.release_tag != ''
      run: |
        # Create tarballs for release
        mkdir -p release-artifacts
        for lang in c cpp go python typescript rust java json-descriptors; do
          if [ -d "output/$lang" ] && [ "$(ls -A output/$lang)" ]; then
            tar czf "release-artifacts/proto-${lang}.tar.gz" -C output "$lang"
          fi
        done

        # Create release using GitHub CLI
        gh release create \
          "${{ github.event.inputs.release_tag || format('build-{0}', github.sha) }}" \
          --title "${{ github.event.inputs.release_tag || format('Auto Build {0}', github.sha) }}" \
          --notes "Automated build of protocol buffer bindings.

        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

        ## Available Languages
        - C (nanopb) - [jettison_proto_c](https://github.com/lpportorico/jettison_proto_c)
        - C++ - [jettison_proto_cpp](https://github.com/lpportorico/jettison_proto_cpp)
        - Go (with buf.validate) - [jettison_proto_go](https://github.com/lpportorico/jettison_proto_go)
        - Python - [jettison_proto_python](https://github.com/lpportorico/jettison_proto_python)
        - TypeScript - [jettison_proto_typescript](https://github.com/lpportorico/jettison_proto_typescript)
        - Rust - [jettison_proto_rust](https://github.com/lpportorico/jettison_proto_rust)
        - Java (with buf.validate) - [jettison_proto_java](https://github.com/lpportorico/jettison_proto_java)
        - JSON Descriptors - [jettison_proto_json-descriptors](https://github.com/lpportorico/jettison_proto_json-descriptors)" \
          ${{ github.event.inputs.release_tag == '' && '--prerelease' || '' }} \
          release-artifacts/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}