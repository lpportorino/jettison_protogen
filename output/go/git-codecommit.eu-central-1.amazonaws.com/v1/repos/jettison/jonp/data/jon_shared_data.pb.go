// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: jon_shared_data.proto

package data

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	actual_space_time "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/actual_space_time"
	camera_day "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/camera_day"
	camera_heat "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/camera_heat"
	compass "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/compass"
	compass_calibration "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/compass_calibration"
	day_cam_glass_heater "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/day_cam_glass_heater"
	gps "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/gps"
	lrf "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/lrf"
	rec_osd "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/rec_osd"
	rotary "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/rotary"
	system "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/system"
	time "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data/time"
	types "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Root message
type JonGUIState struct {
	state                 protoimpl.MessageState                            `protogen:"open.v1"`
	ProtocolVersion       uint32                                            `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	SystemMonotonicTimeUs uint64                                            `protobuf:"varint,2,opt,name=system_monotonic_time_us,json=systemMonotonicTimeUs,proto3" json:"system_monotonic_time_us,omitempty"` // System monotonic time in microseconds
	System                *system.JonGuiDataSystem                          `protobuf:"bytes,13,opt,name=system,proto3" json:"system,omitempty"`
	MeteoInternal         *types.JonGuiDataMeteo                            `protobuf:"bytes,14,opt,name=meteo_internal,json=meteoInternal,proto3" json:"meteo_internal,omitempty"`
	Lrf                   *lrf.JonGuiDataLrf                                `protobuf:"bytes,15,opt,name=lrf,proto3" json:"lrf,omitempty"`
	Time                  *time.JonGuiDataTime                              `protobuf:"bytes,16,opt,name=time,proto3" json:"time,omitempty"`
	Gps                   *gps.JonGuiDataGps                                `protobuf:"bytes,17,opt,name=gps,proto3" json:"gps,omitempty"`
	Compass               *compass.JonGuiDataCompass                        `protobuf:"bytes,18,opt,name=compass,proto3" json:"compass,omitempty"`
	Rotary                *rotary.JonGuiDataRotary                          `protobuf:"bytes,19,opt,name=rotary,proto3" json:"rotary,omitempty"`
	CameraDay             *camera_day.JonGuiDataCameraDay                   `protobuf:"bytes,20,opt,name=camera_day,json=cameraDay,proto3" json:"camera_day,omitempty"`
	CameraHeat            *camera_heat.JonGuiDataCameraHeat                 `protobuf:"bytes,21,opt,name=camera_heat,json=cameraHeat,proto3" json:"camera_heat,omitempty"`
	CompassCalibration    *compass_calibration.JonGuiDataCompassCalibration `protobuf:"bytes,22,opt,name=compass_calibration,json=compassCalibration,proto3" json:"compass_calibration,omitempty"`
	RecOsd                *rec_osd.JonGuiDataRecOsd                         `protobuf:"bytes,23,opt,name=rec_osd,json=recOsd,proto3" json:"rec_osd,omitempty"`
	DayCamGlassHeater     *day_cam_glass_heater.JonGuiDataDayCamGlassHeater `protobuf:"bytes,24,opt,name=day_cam_glass_heater,json=dayCamGlassHeater,proto3" json:"day_cam_glass_heater,omitempty"`
	ActualSpaceTime       *actual_space_time.JonGuiDataActualSpaceTime      `protobuf:"bytes,25,opt,name=actual_space_time,json=actualSpaceTime,proto3" json:"actual_space_time,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *JonGUIState) Reset() {
	*x = JonGUIState{}
	mi := &file_jon_shared_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JonGUIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JonGUIState) ProtoMessage() {}

func (x *JonGUIState) ProtoReflect() protoreflect.Message {
	mi := &file_jon_shared_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JonGUIState.ProtoReflect.Descriptor instead.
func (*JonGUIState) Descriptor() ([]byte, []int) {
	return file_jon_shared_data_proto_rawDescGZIP(), []int{0}
}

func (x *JonGUIState) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *JonGUIState) GetSystemMonotonicTimeUs() uint64 {
	if x != nil {
		return x.SystemMonotonicTimeUs
	}
	return 0
}

func (x *JonGUIState) GetSystem() *system.JonGuiDataSystem {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *JonGUIState) GetMeteoInternal() *types.JonGuiDataMeteo {
	if x != nil {
		return x.MeteoInternal
	}
	return nil
}

func (x *JonGUIState) GetLrf() *lrf.JonGuiDataLrf {
	if x != nil {
		return x.Lrf
	}
	return nil
}

func (x *JonGUIState) GetTime() *time.JonGuiDataTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *JonGUIState) GetGps() *gps.JonGuiDataGps {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *JonGUIState) GetCompass() *compass.JonGuiDataCompass {
	if x != nil {
		return x.Compass
	}
	return nil
}

func (x *JonGUIState) GetRotary() *rotary.JonGuiDataRotary {
	if x != nil {
		return x.Rotary
	}
	return nil
}

func (x *JonGUIState) GetCameraDay() *camera_day.JonGuiDataCameraDay {
	if x != nil {
		return x.CameraDay
	}
	return nil
}

func (x *JonGUIState) GetCameraHeat() *camera_heat.JonGuiDataCameraHeat {
	if x != nil {
		return x.CameraHeat
	}
	return nil
}

func (x *JonGUIState) GetCompassCalibration() *compass_calibration.JonGuiDataCompassCalibration {
	if x != nil {
		return x.CompassCalibration
	}
	return nil
}

func (x *JonGUIState) GetRecOsd() *rec_osd.JonGuiDataRecOsd {
	if x != nil {
		return x.RecOsd
	}
	return nil
}

func (x *JonGUIState) GetDayCamGlassHeater() *day_cam_glass_heater.JonGuiDataDayCamGlassHeater {
	if x != nil {
		return x.DayCamGlassHeater
	}
	return nil
}

func (x *JonGUIState) GetActualSpaceTime() *actual_space_time.JonGuiDataActualSpaceTime {
	if x != nil {
		return x.ActualSpaceTime
	}
	return nil
}

var File_jon_shared_data_proto protoreflect.FileDescriptor

const file_jon_shared_data_proto_rawDesc = "" +
	"\n" +
	"\x15jon_shared_data.proto\x12\x03ser\x1a\x1bbuf/validate/validate.proto\x1a\x1bjon_shared_data_types.proto\x1a\x1ajon_shared_data_time.proto\x1a\x1cjon_shared_data_system.proto\x1a\x19jon_shared_data_lrf.proto\x1a\x19jon_shared_data_gps.proto\x1a\x1djon_shared_data_compass.proto\x1a)jon_shared_data_compass_calibration.proto\x1a\x1cjon_shared_data_rotary.proto\x1a jon_shared_data_camera_day.proto\x1a!jon_shared_data_camera_heat.proto\x1a\x1djon_shared_data_rec_osd.proto\x1a*jon_shared_data_day_cam_glass_heater.proto\x1a'jon_shared_data_actual_space_time.proto\"\x87\b\n" +
	"\vJonGUIState\x128\n" +
	"\x10protocol_version\x18\x01 \x01(\rB\r\xbaH\n" +
	"*\b\x18\xff\xff\xff\xff\a \x00R\x0fprotocolVersion\x12@\n" +
	"\x18system_monotonic_time_us\x18\x02 \x01(\x04B\a\xbaH\x042\x02(\x00R\x15systemMonotonicTimeUs\x125\n" +
	"\x06system\x18\r \x01(\v2\x15.ser.JonGuiDataSystemB\x06\xbaH\x03\xc8\x01\x01R\x06system\x12C\n" +
	"\x0emeteo_internal\x18\x0e \x01(\v2\x14.ser.JonGuiDataMeteoB\x06\xbaH\x03\xc8\x01\x01R\rmeteoInternal\x12,\n" +
	"\x03lrf\x18\x0f \x01(\v2\x12.ser.JonGuiDataLrfB\x06\xbaH\x03\xc8\x01\x01R\x03lrf\x12/\n" +
	"\x04time\x18\x10 \x01(\v2\x13.ser.JonGuiDataTimeB\x06\xbaH\x03\xc8\x01\x01R\x04time\x12,\n" +
	"\x03gps\x18\x11 \x01(\v2\x12.ser.JonGuiDataGpsB\x06\xbaH\x03\xc8\x01\x01R\x03gps\x128\n" +
	"\acompass\x18\x12 \x01(\v2\x16.ser.JonGuiDataCompassB\x06\xbaH\x03\xc8\x01\x01R\acompass\x125\n" +
	"\x06rotary\x18\x13 \x01(\v2\x15.ser.JonGuiDataRotaryB\x06\xbaH\x03\xc8\x01\x01R\x06rotary\x12?\n" +
	"\n" +
	"camera_day\x18\x14 \x01(\v2\x18.ser.JonGuiDataCameraDayB\x06\xbaH\x03\xc8\x01\x01R\tcameraDay\x12B\n" +
	"\vcamera_heat\x18\x15 \x01(\v2\x19.ser.JonGuiDataCameraHeatB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"cameraHeat\x12Z\n" +
	"\x13compass_calibration\x18\x16 \x01(\v2!.ser.JonGuiDataCompassCalibrationB\x06\xbaH\x03\xc8\x01\x01R\x12compassCalibration\x126\n" +
	"\arec_osd\x18\x17 \x01(\v2\x15.ser.JonGuiDataRecOsdB\x06\xbaH\x03\xc8\x01\x01R\x06recOsd\x12Y\n" +
	"\x14day_cam_glass_heater\x18\x18 \x01(\v2 .ser.JonGuiDataDayCamGlassHeaterB\x06\xbaH\x03\xc8\x01\x01R\x11dayCamGlassHeater\x12R\n" +
	"\x11actual_space_time\x18\x19 \x01(\v2\x1e.ser.JonGuiDataActualSpaceTimeB\x06\xbaH\x03\xc8\x01\x01R\x0factualSpaceTimeJ\x04\b\x03\x10\x04J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\aJ\x04\b\a\x10\bJ\x04\b\b\x10\tJ\x04\b\t\x10\n" +
	"J\x04\b\n" +
	"\x10\vJ\x04\b\v\x10\fJ\x04\b\f\x10\rB\x90\x01\n" +
	"\acom.serB\x12JonSharedDataProtoP\x01ZEgit-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/data\xa2\x02\x03SXX\xaa\x02\x03Ser\xca\x02\x03Ser\xe2\x02\x0fSer\\GPBMetadata\xea\x02\x03Serb\x06proto3"

var (
	file_jon_shared_data_proto_rawDescOnce sync.Once
	file_jon_shared_data_proto_rawDescData []byte
)

func file_jon_shared_data_proto_rawDescGZIP() []byte {
	file_jon_shared_data_proto_rawDescOnce.Do(func() {
		file_jon_shared_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_jon_shared_data_proto_rawDesc), len(file_jon_shared_data_proto_rawDesc)))
	})
	return file_jon_shared_data_proto_rawDescData
}

var file_jon_shared_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_jon_shared_data_proto_goTypes = []any{
	(*JonGUIState)(nil),                                      // 0: ser.JonGUIState
	(*system.JonGuiDataSystem)(nil),                          // 1: ser.JonGuiDataSystem
	(*types.JonGuiDataMeteo)(nil),                            // 2: ser.JonGuiDataMeteo
	(*lrf.JonGuiDataLrf)(nil),                                // 3: ser.JonGuiDataLrf
	(*time.JonGuiDataTime)(nil),                              // 4: ser.JonGuiDataTime
	(*gps.JonGuiDataGps)(nil),                                // 5: ser.JonGuiDataGps
	(*compass.JonGuiDataCompass)(nil),                        // 6: ser.JonGuiDataCompass
	(*rotary.JonGuiDataRotary)(nil),                          // 7: ser.JonGuiDataRotary
	(*camera_day.JonGuiDataCameraDay)(nil),                   // 8: ser.JonGuiDataCameraDay
	(*camera_heat.JonGuiDataCameraHeat)(nil),                 // 9: ser.JonGuiDataCameraHeat
	(*compass_calibration.JonGuiDataCompassCalibration)(nil), // 10: ser.JonGuiDataCompassCalibration
	(*rec_osd.JonGuiDataRecOsd)(nil),                         // 11: ser.JonGuiDataRecOsd
	(*day_cam_glass_heater.JonGuiDataDayCamGlassHeater)(nil), // 12: ser.JonGuiDataDayCamGlassHeater
	(*actual_space_time.JonGuiDataActualSpaceTime)(nil),      // 13: ser.JonGuiDataActualSpaceTime
}
var file_jon_shared_data_proto_depIdxs = []int32{
	1,  // 0: ser.JonGUIState.system:type_name -> ser.JonGuiDataSystem
	2,  // 1: ser.JonGUIState.meteo_internal:type_name -> ser.JonGuiDataMeteo
	3,  // 2: ser.JonGUIState.lrf:type_name -> ser.JonGuiDataLrf
	4,  // 3: ser.JonGUIState.time:type_name -> ser.JonGuiDataTime
	5,  // 4: ser.JonGUIState.gps:type_name -> ser.JonGuiDataGps
	6,  // 5: ser.JonGUIState.compass:type_name -> ser.JonGuiDataCompass
	7,  // 6: ser.JonGUIState.rotary:type_name -> ser.JonGuiDataRotary
	8,  // 7: ser.JonGUIState.camera_day:type_name -> ser.JonGuiDataCameraDay
	9,  // 8: ser.JonGUIState.camera_heat:type_name -> ser.JonGuiDataCameraHeat
	10, // 9: ser.JonGUIState.compass_calibration:type_name -> ser.JonGuiDataCompassCalibration
	11, // 10: ser.JonGUIState.rec_osd:type_name -> ser.JonGuiDataRecOsd
	12, // 11: ser.JonGUIState.day_cam_glass_heater:type_name -> ser.JonGuiDataDayCamGlassHeater
	13, // 12: ser.JonGUIState.actual_space_time:type_name -> ser.JonGuiDataActualSpaceTime
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_jon_shared_data_proto_init() }
func file_jon_shared_data_proto_init() {
	if File_jon_shared_data_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_jon_shared_data_proto_rawDesc), len(file_jon_shared_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jon_shared_data_proto_goTypes,
		DependencyIndexes: file_jon_shared_data_proto_depIdxs,
		MessageInfos:      file_jon_shared_data_proto_msgTypes,
	}.Build()
	File_jon_shared_data_proto = out.File
	file_jon_shared_data_proto_goTypes = nil
	file_jon_shared_data_proto_depIdxs = nil
}
