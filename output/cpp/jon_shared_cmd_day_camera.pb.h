// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd_day_camera.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_5fday_5fcamera_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_5fday_5fcamera_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "jon_shared_data_types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_5fday_5fcamera_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
namespace cmd {
namespace DayCamera {
class Focus;
struct FocusDefaultTypeInternal;
extern FocusDefaultTypeInternal _Focus_default_instance_;
class FocusROI;
struct FocusROIDefaultTypeInternal;
extern FocusROIDefaultTypeInternal _FocusROI_default_instance_;
class GetMeteo;
struct GetMeteoDefaultTypeInternal;
extern GetMeteoDefaultTypeInternal _GetMeteo_default_instance_;
class GetPos;
struct GetPosDefaultTypeInternal;
extern GetPosDefaultTypeInternal _GetPos_default_instance_;
class Halt;
struct HaltDefaultTypeInternal;
extern HaltDefaultTypeInternal _Halt_default_instance_;
class HaltAll;
struct HaltAllDefaultTypeInternal;
extern HaltAllDefaultTypeInternal _HaltAll_default_instance_;
class Move;
struct MoveDefaultTypeInternal;
extern MoveDefaultTypeInternal _Move_default_instance_;
class NextFxMode;
struct NextFxModeDefaultTypeInternal;
extern NextFxModeDefaultTypeInternal _NextFxMode_default_instance_;
class NextZoomTablePos;
struct NextZoomTablePosDefaultTypeInternal;
extern NextZoomTablePosDefaultTypeInternal _NextZoomTablePos_default_instance_;
class Offset;
struct OffsetDefaultTypeInternal;
extern OffsetDefaultTypeInternal _Offset_default_instance_;
class Photo;
struct PhotoDefaultTypeInternal;
extern PhotoDefaultTypeInternal _Photo_default_instance_;
class PrevFxMode;
struct PrevFxModeDefaultTypeInternal;
extern PrevFxModeDefaultTypeInternal _PrevFxMode_default_instance_;
class PrevZoomTablePos;
struct PrevZoomTablePosDefaultTypeInternal;
extern PrevZoomTablePosDefaultTypeInternal _PrevZoomTablePos_default_instance_;
class RefreshFxMode;
struct RefreshFxModeDefaultTypeInternal;
extern RefreshFxModeDefaultTypeInternal _RefreshFxMode_default_instance_;
class ResetFocus;
struct ResetFocusDefaultTypeInternal;
extern ResetFocusDefaultTypeInternal _ResetFocus_default_instance_;
class ResetZoom;
struct ResetZoomDefaultTypeInternal;
extern ResetZoomDefaultTypeInternal _ResetZoom_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SaveToTable;
struct SaveToTableDefaultTypeInternal;
extern SaveToTableDefaultTypeInternal _SaveToTable_default_instance_;
class SaveToTableFocus;
struct SaveToTableFocusDefaultTypeInternal;
extern SaveToTableFocusDefaultTypeInternal _SaveToTableFocus_default_instance_;
class SetAutoIris;
struct SetAutoIrisDefaultTypeInternal;
extern SetAutoIrisDefaultTypeInternal _SetAutoIris_default_instance_;
class SetClaheLevel;
struct SetClaheLevelDefaultTypeInternal;
extern SetClaheLevelDefaultTypeInternal _SetClaheLevel_default_instance_;
class SetDigitalZoomLevel;
struct SetDigitalZoomLevelDefaultTypeInternal;
extern SetDigitalZoomLevelDefaultTypeInternal _SetDigitalZoomLevel_default_instance_;
class SetFxMode;
struct SetFxModeDefaultTypeInternal;
extern SetFxModeDefaultTypeInternal _SetFxMode_default_instance_;
class SetInfraRedFilter;
struct SetInfraRedFilterDefaultTypeInternal;
extern SetInfraRedFilterDefaultTypeInternal _SetInfraRedFilter_default_instance_;
class SetIris;
struct SetIrisDefaultTypeInternal;
extern SetIrisDefaultTypeInternal _SetIris_default_instance_;
class SetValue;
struct SetValueDefaultTypeInternal;
extern SetValueDefaultTypeInternal _SetValue_default_instance_;
class SetZoomTableValue;
struct SetZoomTableValueDefaultTypeInternal;
extern SetZoomTableValueDefaultTypeInternal _SetZoomTableValue_default_instance_;
class ShiftClaheLevel;
struct ShiftClaheLevelDefaultTypeInternal;
extern ShiftClaheLevelDefaultTypeInternal _ShiftClaheLevel_default_instance_;
class Start;
struct StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TrackROI;
struct TrackROIDefaultTypeInternal;
extern TrackROIDefaultTypeInternal _TrackROI_default_instance_;
class Zoom;
struct ZoomDefaultTypeInternal;
extern ZoomDefaultTypeInternal _Zoom_default_instance_;
class ZoomROI;
struct ZoomROIDefaultTypeInternal;
extern ZoomROIDefaultTypeInternal _ZoomROI_default_instance_;
}  // namespace DayCamera
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {
namespace DayCamera {

// ===================================================================


// -------------------------------------------------------------------

class ZoomROI final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.ZoomROI) */ {
 public:
  inline ZoomROI() : ZoomROI(nullptr) {}
  ~ZoomROI() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ZoomROI* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ZoomROI));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ZoomROI(
      ::google::protobuf::internal::ConstantInitialized);

  inline ZoomROI(const ZoomROI& from) : ZoomROI(nullptr, from) {}
  inline ZoomROI(ZoomROI&& from) noexcept
      : ZoomROI(nullptr, std::move(from)) {}
  inline ZoomROI& operator=(const ZoomROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomROI& operator=(ZoomROI&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoomROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomROI* internal_default_instance() {
    return reinterpret_cast<const ZoomROI*>(
        &_ZoomROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(ZoomROI& a, ZoomROI& b) { a.Swap(&b); }
  inline void Swap(ZoomROI* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomROI* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomROI* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ZoomROI>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ZoomROI& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ZoomROI& from) { ZoomROI::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ZoomROI* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.ZoomROI"; }

 protected:
  explicit ZoomROI(::google::protobuf::Arena* arena);
  ZoomROI(::google::protobuf::Arena* arena, const ZoomROI& from);
  ZoomROI(::google::protobuf::Arena* arena, ZoomROI&& from) noexcept
      : ZoomROI(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kFrameTimeFieldNumber = 5,
    kStateTimeFieldNumber = 6,
  };
  // double x1 = 1;
  void clear_x1() ;
  double x1() const;
  void set_x1(double value);

  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);

  public:
  // double y1 = 2;
  void clear_y1() ;
  double y1() const;
  void set_y1(double value);

  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);

  public:
  // double x2 = 3;
  void clear_x2() ;
  double x2() const;
  void set_x2(double value);

  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);

  public:
  // double y2 = 4;
  void clear_y2() ;
  double y2() const;
  void set_y2(double value);

  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);

  public:
  // uint64 frame_time = 5;
  void clear_frame_time() ;
  ::uint64_t frame_time() const;
  void set_frame_time(::uint64_t value);

  private:
  ::uint64_t _internal_frame_time() const;
  void _internal_set_frame_time(::uint64_t value);

  public:
  // uint64 state_time = 6;
  void clear_state_time() ;
  ::uint64_t state_time() const;
  void set_state_time(::uint64_t value);

  private:
  ::uint64_t _internal_state_time() const;
  void _internal_set_state_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.ZoomROI)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ZoomROI& from_msg);
    double x1_;
    double y1_;
    double x2_;
    double y2_;
    ::uint64_t frame_time_;
    ::uint64_t state_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class TrackROI final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.TrackROI) */ {
 public:
  inline TrackROI() : TrackROI(nullptr) {}
  ~TrackROI() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrackROI* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrackROI));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrackROI(
      ::google::protobuf::internal::ConstantInitialized);

  inline TrackROI(const TrackROI& from) : TrackROI(nullptr, from) {}
  inline TrackROI(TrackROI&& from) noexcept
      : TrackROI(nullptr, std::move(from)) {}
  inline TrackROI& operator=(const TrackROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackROI& operator=(TrackROI&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackROI* internal_default_instance() {
    return reinterpret_cast<const TrackROI*>(
        &_TrackROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(TrackROI& a, TrackROI& b) { a.Swap(&b); }
  inline void Swap(TrackROI* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackROI* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackROI* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrackROI>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackROI& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrackROI& from) { TrackROI::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrackROI* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.TrackROI"; }

 protected:
  explicit TrackROI(::google::protobuf::Arena* arena);
  TrackROI(::google::protobuf::Arena* arena, const TrackROI& from);
  TrackROI(::google::protobuf::Arena* arena, TrackROI&& from) noexcept
      : TrackROI(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kFrameTimeFieldNumber = 5,
    kStateTimeFieldNumber = 6,
  };
  // double x1 = 1;
  void clear_x1() ;
  double x1() const;
  void set_x1(double value);

  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);

  public:
  // double y1 = 2;
  void clear_y1() ;
  double y1() const;
  void set_y1(double value);

  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);

  public:
  // double x2 = 3;
  void clear_x2() ;
  double x2() const;
  void set_x2(double value);

  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);

  public:
  // double y2 = 4;
  void clear_y2() ;
  double y2() const;
  void set_y2(double value);

  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);

  public:
  // uint64 frame_time = 5;
  void clear_frame_time() ;
  ::uint64_t frame_time() const;
  void set_frame_time(::uint64_t value);

  private:
  ::uint64_t _internal_frame_time() const;
  void _internal_set_frame_time(::uint64_t value);

  public:
  // uint64 state_time = 6;
  void clear_state_time() ;
  ::uint64_t state_time() const;
  void set_state_time(::uint64_t value);

  private:
  ::uint64_t _internal_state_time() const;
  void _internal_set_state_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.TrackROI)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TrackROI& from_msg);
    double x1_;
    double y1_;
    double x2_;
    double y2_;
    ::uint64_t frame_time_;
    ::uint64_t state_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Stop final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Stop* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Stop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Stop(
      ::google::protobuf::internal::ConstantInitialized);

  inline Stop(const Stop& from) : Stop(nullptr, from) {}
  inline Stop(Stop&& from) noexcept
      : Stop(nullptr, std::move(from)) {}
  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
        &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Stop& a, Stop& b) { a.Swap(&b); }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Stop>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Stop"; }

 protected:
  explicit Stop(::google::protobuf::Arena* arena);
  Stop(::google::protobuf::Arena* arena, const Stop& from);
  Stop(::google::protobuf::Arena* arena, Stop&& from) noexcept
      : Stop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Stop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Stop& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Start final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Start) */ {
 public:
  inline Start() : Start(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Start* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Start));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Start(
      ::google::protobuf::internal::ConstantInitialized);

  inline Start(const Start& from) : Start(nullptr, from) {}
  inline Start(Start&& from) noexcept
      : Start(nullptr, std::move(from)) {}
  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start& operator=(Start&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(
        &_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Start& a, Start& b) { a.Swap(&b); }
  inline void Swap(Start* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Start>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Start"; }

 protected:
  explicit Start(::google::protobuf::Arena* arena);
  Start(::google::protobuf::Arena* arena, const Start& from);
  Start(::google::protobuf::Arena* arena, Start&& from) noexcept
      : Start(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Start)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Start& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class ShiftClaheLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.ShiftClaheLevel) */ {
 public:
  inline ShiftClaheLevel() : ShiftClaheLevel(nullptr) {}
  ~ShiftClaheLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShiftClaheLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShiftClaheLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShiftClaheLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShiftClaheLevel(const ShiftClaheLevel& from) : ShiftClaheLevel(nullptr, from) {}
  inline ShiftClaheLevel(ShiftClaheLevel&& from) noexcept
      : ShiftClaheLevel(nullptr, std::move(from)) {}
  inline ShiftClaheLevel& operator=(const ShiftClaheLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftClaheLevel& operator=(ShiftClaheLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShiftClaheLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShiftClaheLevel* internal_default_instance() {
    return reinterpret_cast<const ShiftClaheLevel*>(
        &_ShiftClaheLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ShiftClaheLevel& a, ShiftClaheLevel& b) { a.Swap(&b); }
  inline void Swap(ShiftClaheLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftClaheLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShiftClaheLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ShiftClaheLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShiftClaheLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShiftClaheLevel& from) { ShiftClaheLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ShiftClaheLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.ShiftClaheLevel"; }

 protected:
  explicit ShiftClaheLevel(::google::protobuf::Arena* arena);
  ShiftClaheLevel(::google::protobuf::Arena* arena, const ShiftClaheLevel& from);
  ShiftClaheLevel(::google::protobuf::Arena* arena, ShiftClaheLevel&& from) noexcept
      : ShiftClaheLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.ShiftClaheLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShiftClaheLevel& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetZoomTableValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetZoomTableValue) */ {
 public:
  inline SetZoomTableValue() : SetZoomTableValue(nullptr) {}
  ~SetZoomTableValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetZoomTableValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetZoomTableValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetZoomTableValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetZoomTableValue(const SetZoomTableValue& from) : SetZoomTableValue(nullptr, from) {}
  inline SetZoomTableValue(SetZoomTableValue&& from) noexcept
      : SetZoomTableValue(nullptr, std::move(from)) {}
  inline SetZoomTableValue& operator=(const SetZoomTableValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetZoomTableValue& operator=(SetZoomTableValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetZoomTableValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetZoomTableValue* internal_default_instance() {
    return reinterpret_cast<const SetZoomTableValue*>(
        &_SetZoomTableValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(SetZoomTableValue& a, SetZoomTableValue& b) { a.Swap(&b); }
  inline void Swap(SetZoomTableValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetZoomTableValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetZoomTableValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetZoomTableValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetZoomTableValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetZoomTableValue& from) { SetZoomTableValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetZoomTableValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetZoomTableValue"; }

 protected:
  explicit SetZoomTableValue(::google::protobuf::Arena* arena);
  SetZoomTableValue(::google::protobuf::Arena* arena, const SetZoomTableValue& from);
  SetZoomTableValue(::google::protobuf::Arena* arena, SetZoomTableValue&& from) noexcept
      : SetZoomTableValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetZoomTableValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetZoomTableValue& from_msg);
    ::int32_t value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetValue) */ {
 public:
  inline SetValue() : SetValue(nullptr) {}
  ~SetValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetValue(const SetValue& from) : SetValue(nullptr, from) {}
  inline SetValue(SetValue&& from) noexcept
      : SetValue(nullptr, std::move(from)) {}
  inline SetValue& operator=(const SetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetValue& operator=(SetValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetValue* internal_default_instance() {
    return reinterpret_cast<const SetValue*>(
        &_SetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SetValue& a, SetValue& b) { a.Swap(&b); }
  inline void Swap(SetValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetValue& from) { SetValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetValue"; }

 protected:
  explicit SetValue(::google::protobuf::Arena* arena);
  SetValue(::google::protobuf::Arena* arena, const SetValue& from);
  SetValue(::google::protobuf::Arena* arena, SetValue&& from) noexcept
      : SetValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetValue& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetIris final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetIris) */ {
 public:
  inline SetIris() : SetIris(nullptr) {}
  ~SetIris() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetIris* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetIris));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetIris(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetIris(const SetIris& from) : SetIris(nullptr, from) {}
  inline SetIris(SetIris&& from) noexcept
      : SetIris(nullptr, std::move(from)) {}
  inline SetIris& operator=(const SetIris& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIris& operator=(SetIris&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIris& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIris* internal_default_instance() {
    return reinterpret_cast<const SetIris*>(
        &_SetIris_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(SetIris& a, SetIris& b) { a.Swap(&b); }
  inline void Swap(SetIris* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIris* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIris* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetIris>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetIris& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetIris& from) { SetIris::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetIris* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetIris"; }

 protected:
  explicit SetIris(::google::protobuf::Arena* arena);
  SetIris(::google::protobuf::Arena* arena, const SetIris& from);
  SetIris(::google::protobuf::Arena* arena, SetIris&& from) noexcept
      : SetIris(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetIris)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetIris& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetInfraRedFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetInfraRedFilter) */ {
 public:
  inline SetInfraRedFilter() : SetInfraRedFilter(nullptr) {}
  ~SetInfraRedFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetInfraRedFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetInfraRedFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetInfraRedFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetInfraRedFilter(const SetInfraRedFilter& from) : SetInfraRedFilter(nullptr, from) {}
  inline SetInfraRedFilter(SetInfraRedFilter&& from) noexcept
      : SetInfraRedFilter(nullptr, std::move(from)) {}
  inline SetInfraRedFilter& operator=(const SetInfraRedFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInfraRedFilter& operator=(SetInfraRedFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInfraRedFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInfraRedFilter* internal_default_instance() {
    return reinterpret_cast<const SetInfraRedFilter*>(
        &_SetInfraRedFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SetInfraRedFilter& a, SetInfraRedFilter& b) { a.Swap(&b); }
  inline void Swap(SetInfraRedFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInfraRedFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInfraRedFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetInfraRedFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInfraRedFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetInfraRedFilter& from) { SetInfraRedFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetInfraRedFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetInfraRedFilter"; }

 protected:
  explicit SetInfraRedFilter(::google::protobuf::Arena* arena);
  SetInfraRedFilter(::google::protobuf::Arena* arena, const SetInfraRedFilter& from);
  SetInfraRedFilter(::google::protobuf::Arena* arena, SetInfraRedFilter&& from) noexcept
      : SetInfraRedFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetInfraRedFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetInfraRedFilter& from_msg);
    bool value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetFxMode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetFxMode) */ {
 public:
  inline SetFxMode() : SetFxMode(nullptr) {}
  ~SetFxMode() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetFxMode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetFxMode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetFxMode(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetFxMode(const SetFxMode& from) : SetFxMode(nullptr, from) {}
  inline SetFxMode(SetFxMode&& from) noexcept
      : SetFxMode(nullptr, std::move(from)) {}
  inline SetFxMode& operator=(const SetFxMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFxMode& operator=(SetFxMode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetFxMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetFxMode* internal_default_instance() {
    return reinterpret_cast<const SetFxMode*>(
        &_SetFxMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SetFxMode& a, SetFxMode& b) { a.Swap(&b); }
  inline void Swap(SetFxMode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetFxMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetFxMode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetFxMode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetFxMode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetFxMode& from) { SetFxMode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetFxMode* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetFxMode"; }

 protected:
  explicit SetFxMode(::google::protobuf::Arena* arena);
  SetFxMode(::google::protobuf::Arena* arena, const SetFxMode& from);
  SetFxMode(::google::protobuf::Arena* arena, SetFxMode&& from) noexcept
      : SetFxMode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeFieldNumber = 1,
  };
  // .ser.JonGuiDataFxModeDay mode = 1;
  void clear_mode() ;
  ::ser::JonGuiDataFxModeDay mode() const;
  void set_mode(::ser::JonGuiDataFxModeDay value);

  private:
  ::ser::JonGuiDataFxModeDay _internal_mode() const;
  void _internal_set_mode(::ser::JonGuiDataFxModeDay value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetFxMode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetFxMode& from_msg);
    int mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetDigitalZoomLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetDigitalZoomLevel) */ {
 public:
  inline SetDigitalZoomLevel() : SetDigitalZoomLevel(nullptr) {}
  ~SetDigitalZoomLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetDigitalZoomLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetDigitalZoomLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetDigitalZoomLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetDigitalZoomLevel(const SetDigitalZoomLevel& from) : SetDigitalZoomLevel(nullptr, from) {}
  inline SetDigitalZoomLevel(SetDigitalZoomLevel&& from) noexcept
      : SetDigitalZoomLevel(nullptr, std::move(from)) {}
  inline SetDigitalZoomLevel& operator=(const SetDigitalZoomLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDigitalZoomLevel& operator=(SetDigitalZoomLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDigitalZoomLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDigitalZoomLevel* internal_default_instance() {
    return reinterpret_cast<const SetDigitalZoomLevel*>(
        &_SetDigitalZoomLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SetDigitalZoomLevel& a, SetDigitalZoomLevel& b) { a.Swap(&b); }
  inline void Swap(SetDigitalZoomLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDigitalZoomLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDigitalZoomLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetDigitalZoomLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetDigitalZoomLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetDigitalZoomLevel& from) { SetDigitalZoomLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetDigitalZoomLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetDigitalZoomLevel"; }

 protected:
  explicit SetDigitalZoomLevel(::google::protobuf::Arena* arena);
  SetDigitalZoomLevel(::google::protobuf::Arena* arena, const SetDigitalZoomLevel& from);
  SetDigitalZoomLevel(::google::protobuf::Arena* arena, SetDigitalZoomLevel&& from) noexcept
      : SetDigitalZoomLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetDigitalZoomLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetDigitalZoomLevel& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetClaheLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetClaheLevel) */ {
 public:
  inline SetClaheLevel() : SetClaheLevel(nullptr) {}
  ~SetClaheLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetClaheLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetClaheLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetClaheLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetClaheLevel(const SetClaheLevel& from) : SetClaheLevel(nullptr, from) {}
  inline SetClaheLevel(SetClaheLevel&& from) noexcept
      : SetClaheLevel(nullptr, std::move(from)) {}
  inline SetClaheLevel& operator=(const SetClaheLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetClaheLevel& operator=(SetClaheLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetClaheLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetClaheLevel* internal_default_instance() {
    return reinterpret_cast<const SetClaheLevel*>(
        &_SetClaheLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetClaheLevel& a, SetClaheLevel& b) { a.Swap(&b); }
  inline void Swap(SetClaheLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetClaheLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetClaheLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetClaheLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetClaheLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetClaheLevel& from) { SetClaheLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetClaheLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetClaheLevel"; }

 protected:
  explicit SetClaheLevel(::google::protobuf::Arena* arena);
  SetClaheLevel(::google::protobuf::Arena* arena, const SetClaheLevel& from);
  SetClaheLevel(::google::protobuf::Arena* arena, SetClaheLevel&& from) noexcept
      : SetClaheLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetClaheLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetClaheLevel& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SetAutoIris final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SetAutoIris) */ {
 public:
  inline SetAutoIris() : SetAutoIris(nullptr) {}
  ~SetAutoIris() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetAutoIris* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetAutoIris));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetAutoIris(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetAutoIris(const SetAutoIris& from) : SetAutoIris(nullptr, from) {}
  inline SetAutoIris(SetAutoIris&& from) noexcept
      : SetAutoIris(nullptr, std::move(from)) {}
  inline SetAutoIris& operator=(const SetAutoIris& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAutoIris& operator=(SetAutoIris&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAutoIris& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAutoIris* internal_default_instance() {
    return reinterpret_cast<const SetAutoIris*>(
        &_SetAutoIris_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(SetAutoIris& a, SetAutoIris& b) { a.Swap(&b); }
  inline void Swap(SetAutoIris* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAutoIris* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAutoIris* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetAutoIris>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAutoIris& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetAutoIris& from) { SetAutoIris::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetAutoIris* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SetAutoIris"; }

 protected:
  explicit SetAutoIris(::google::protobuf::Arena* arena);
  SetAutoIris(::google::protobuf::Arena* arena, const SetAutoIris& from);
  SetAutoIris(::google::protobuf::Arena* arena, SetAutoIris&& from) noexcept
      : SetAutoIris(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SetAutoIris)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetAutoIris& from_msg);
    bool value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SaveToTableFocus final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SaveToTableFocus) */ {
 public:
  inline SaveToTableFocus() : SaveToTableFocus(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SaveToTableFocus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SaveToTableFocus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaveToTableFocus(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaveToTableFocus(const SaveToTableFocus& from) : SaveToTableFocus(nullptr, from) {}
  inline SaveToTableFocus(SaveToTableFocus&& from) noexcept
      : SaveToTableFocus(nullptr, std::move(from)) {}
  inline SaveToTableFocus& operator=(const SaveToTableFocus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveToTableFocus& operator=(SaveToTableFocus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveToTableFocus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveToTableFocus* internal_default_instance() {
    return reinterpret_cast<const SaveToTableFocus*>(
        &_SaveToTableFocus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(SaveToTableFocus& a, SaveToTableFocus& b) { a.Swap(&b); }
  inline void Swap(SaveToTableFocus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveToTableFocus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveToTableFocus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SaveToTableFocus>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SaveToTableFocus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SaveToTableFocus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SaveToTableFocus"; }

 protected:
  explicit SaveToTableFocus(::google::protobuf::Arena* arena);
  SaveToTableFocus(::google::protobuf::Arena* arena, const SaveToTableFocus& from);
  SaveToTableFocus(::google::protobuf::Arena* arena, SaveToTableFocus&& from) noexcept
      : SaveToTableFocus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SaveToTableFocus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaveToTableFocus& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class SaveToTable final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.SaveToTable) */ {
 public:
  inline SaveToTable() : SaveToTable(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SaveToTable* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SaveToTable));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaveToTable(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaveToTable(const SaveToTable& from) : SaveToTable(nullptr, from) {}
  inline SaveToTable(SaveToTable&& from) noexcept
      : SaveToTable(nullptr, std::move(from)) {}
  inline SaveToTable& operator=(const SaveToTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveToTable& operator=(SaveToTable&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveToTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveToTable* internal_default_instance() {
    return reinterpret_cast<const SaveToTable*>(
        &_SaveToTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(SaveToTable& a, SaveToTable& b) { a.Swap(&b); }
  inline void Swap(SaveToTable* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveToTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveToTable* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SaveToTable>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SaveToTable& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SaveToTable& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.SaveToTable"; }

 protected:
  explicit SaveToTable(::google::protobuf::Arena* arena);
  SaveToTable(::google::protobuf::Arena* arena, const SaveToTable& from);
  SaveToTable(::google::protobuf::Arena* arena, SaveToTable&& from) noexcept
      : SaveToTable(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.SaveToTable)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaveToTable& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class ResetZoom final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.ResetZoom) */ {
 public:
  inline ResetZoom() : ResetZoom(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResetZoom* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResetZoom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResetZoom(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResetZoom(const ResetZoom& from) : ResetZoom(nullptr, from) {}
  inline ResetZoom(ResetZoom&& from) noexcept
      : ResetZoom(nullptr, std::move(from)) {}
  inline ResetZoom& operator=(const ResetZoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetZoom& operator=(ResetZoom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetZoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetZoom* internal_default_instance() {
    return reinterpret_cast<const ResetZoom*>(
        &_ResetZoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(ResetZoom& a, ResetZoom& b) { a.Swap(&b); }
  inline void Swap(ResetZoom* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetZoom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetZoom* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ResetZoom>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetZoom& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetZoom& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.ResetZoom"; }

 protected:
  explicit ResetZoom(::google::protobuf::Arena* arena);
  ResetZoom(::google::protobuf::Arena* arena, const ResetZoom& from);
  ResetZoom(::google::protobuf::Arena* arena, ResetZoom&& from) noexcept
      : ResetZoom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.ResetZoom)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResetZoom& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class ResetFocus final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.ResetFocus) */ {
 public:
  inline ResetFocus() : ResetFocus(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResetFocus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResetFocus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResetFocus(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResetFocus(const ResetFocus& from) : ResetFocus(nullptr, from) {}
  inline ResetFocus(ResetFocus&& from) noexcept
      : ResetFocus(nullptr, std::move(from)) {}
  inline ResetFocus& operator=(const ResetFocus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetFocus& operator=(ResetFocus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetFocus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetFocus* internal_default_instance() {
    return reinterpret_cast<const ResetFocus*>(
        &_ResetFocus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(ResetFocus& a, ResetFocus& b) { a.Swap(&b); }
  inline void Swap(ResetFocus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetFocus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetFocus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ResetFocus>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetFocus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetFocus& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.ResetFocus"; }

 protected:
  explicit ResetFocus(::google::protobuf::Arena* arena);
  ResetFocus(::google::protobuf::Arena* arena, const ResetFocus& from);
  ResetFocus(::google::protobuf::Arena* arena, ResetFocus&& from) noexcept
      : ResetFocus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.ResetFocus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResetFocus& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class RefreshFxMode final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.RefreshFxMode) */ {
 public:
  inline RefreshFxMode() : RefreshFxMode(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RefreshFxMode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RefreshFxMode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RefreshFxMode(
      ::google::protobuf::internal::ConstantInitialized);

  inline RefreshFxMode(const RefreshFxMode& from) : RefreshFxMode(nullptr, from) {}
  inline RefreshFxMode(RefreshFxMode&& from) noexcept
      : RefreshFxMode(nullptr, std::move(from)) {}
  inline RefreshFxMode& operator=(const RefreshFxMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshFxMode& operator=(RefreshFxMode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshFxMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshFxMode* internal_default_instance() {
    return reinterpret_cast<const RefreshFxMode*>(
        &_RefreshFxMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RefreshFxMode& a, RefreshFxMode& b) { a.Swap(&b); }
  inline void Swap(RefreshFxMode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshFxMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefreshFxMode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RefreshFxMode>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RefreshFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RefreshFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.RefreshFxMode"; }

 protected:
  explicit RefreshFxMode(::google::protobuf::Arena* arena);
  RefreshFxMode(::google::protobuf::Arena* arena, const RefreshFxMode& from);
  RefreshFxMode(::google::protobuf::Arena* arena, RefreshFxMode&& from) noexcept
      : RefreshFxMode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.RefreshFxMode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RefreshFxMode& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class PrevZoomTablePos final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.PrevZoomTablePos) */ {
 public:
  inline PrevZoomTablePos() : PrevZoomTablePos(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PrevZoomTablePos* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PrevZoomTablePos));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrevZoomTablePos(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrevZoomTablePos(const PrevZoomTablePos& from) : PrevZoomTablePos(nullptr, from) {}
  inline PrevZoomTablePos(PrevZoomTablePos&& from) noexcept
      : PrevZoomTablePos(nullptr, std::move(from)) {}
  inline PrevZoomTablePos& operator=(const PrevZoomTablePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevZoomTablePos& operator=(PrevZoomTablePos&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrevZoomTablePos& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrevZoomTablePos* internal_default_instance() {
    return reinterpret_cast<const PrevZoomTablePos*>(
        &_PrevZoomTablePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(PrevZoomTablePos& a, PrevZoomTablePos& b) { a.Swap(&b); }
  inline void Swap(PrevZoomTablePos* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevZoomTablePos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrevZoomTablePos* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PrevZoomTablePos>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PrevZoomTablePos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PrevZoomTablePos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.PrevZoomTablePos"; }

 protected:
  explicit PrevZoomTablePos(::google::protobuf::Arena* arena);
  PrevZoomTablePos(::google::protobuf::Arena* arena, const PrevZoomTablePos& from);
  PrevZoomTablePos(::google::protobuf::Arena* arena, PrevZoomTablePos&& from) noexcept
      : PrevZoomTablePos(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.PrevZoomTablePos)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrevZoomTablePos& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class PrevFxMode final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.PrevFxMode) */ {
 public:
  inline PrevFxMode() : PrevFxMode(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PrevFxMode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PrevFxMode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrevFxMode(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrevFxMode(const PrevFxMode& from) : PrevFxMode(nullptr, from) {}
  inline PrevFxMode(PrevFxMode&& from) noexcept
      : PrevFxMode(nullptr, std::move(from)) {}
  inline PrevFxMode& operator=(const PrevFxMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevFxMode& operator=(PrevFxMode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrevFxMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrevFxMode* internal_default_instance() {
    return reinterpret_cast<const PrevFxMode*>(
        &_PrevFxMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PrevFxMode& a, PrevFxMode& b) { a.Swap(&b); }
  inline void Swap(PrevFxMode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevFxMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrevFxMode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PrevFxMode>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PrevFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PrevFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.PrevFxMode"; }

 protected:
  explicit PrevFxMode(::google::protobuf::Arena* arena);
  PrevFxMode(::google::protobuf::Arena* arena, const PrevFxMode& from);
  PrevFxMode(::google::protobuf::Arena* arena, PrevFxMode&& from) noexcept
      : PrevFxMode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.PrevFxMode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrevFxMode& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Photo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Photo) */ {
 public:
  inline Photo() : Photo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Photo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Photo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Photo(
      ::google::protobuf::internal::ConstantInitialized);

  inline Photo(const Photo& from) : Photo(nullptr, from) {}
  inline Photo(Photo&& from) noexcept
      : Photo(nullptr, std::move(from)) {}
  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Photo& operator=(Photo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Photo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Photo* internal_default_instance() {
    return reinterpret_cast<const Photo*>(
        &_Photo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Photo& a, Photo& b) { a.Swap(&b); }
  inline void Swap(Photo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Photo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Photo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Photo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Photo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Photo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Photo"; }

 protected:
  explicit Photo(::google::protobuf::Arena* arena);
  Photo(::google::protobuf::Arena* arena, const Photo& from);
  Photo(::google::protobuf::Arena* arena, Photo&& from) noexcept
      : Photo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Photo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Photo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Offset final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Offset) */ {
 public:
  inline Offset() : Offset(nullptr) {}
  ~Offset() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Offset* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Offset));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Offset(
      ::google::protobuf::internal::ConstantInitialized);

  inline Offset(const Offset& from) : Offset(nullptr, from) {}
  inline Offset(Offset&& from) noexcept
      : Offset(nullptr, std::move(from)) {}
  inline Offset& operator=(const Offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offset& operator=(Offset&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Offset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Offset* internal_default_instance() {
    return reinterpret_cast<const Offset*>(
        &_Offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Offset& a, Offset& b) { a.Swap(&b); }
  inline void Swap(Offset* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Offset* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Offset>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Offset& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Offset& from) { Offset::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Offset* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Offset"; }

 protected:
  explicit Offset(::google::protobuf::Arena* arena);
  Offset(::google::protobuf::Arena* arena, const Offset& from);
  Offset(::google::protobuf::Arena* arena, Offset&& from) noexcept
      : Offset(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOffsetValueFieldNumber = 1,
  };
  // double offset_value = 1;
  void clear_offset_value() ;
  double offset_value() const;
  void set_offset_value(double value);

  private:
  double _internal_offset_value() const;
  void _internal_set_offset_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Offset)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Offset& from_msg);
    double offset_value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class NextZoomTablePos final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.NextZoomTablePos) */ {
 public:
  inline NextZoomTablePos() : NextZoomTablePos(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NextZoomTablePos* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NextZoomTablePos));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NextZoomTablePos(
      ::google::protobuf::internal::ConstantInitialized);

  inline NextZoomTablePos(const NextZoomTablePos& from) : NextZoomTablePos(nullptr, from) {}
  inline NextZoomTablePos(NextZoomTablePos&& from) noexcept
      : NextZoomTablePos(nullptr, std::move(from)) {}
  inline NextZoomTablePos& operator=(const NextZoomTablePos& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextZoomTablePos& operator=(NextZoomTablePos&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextZoomTablePos& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextZoomTablePos* internal_default_instance() {
    return reinterpret_cast<const NextZoomTablePos*>(
        &_NextZoomTablePos_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NextZoomTablePos& a, NextZoomTablePos& b) { a.Swap(&b); }
  inline void Swap(NextZoomTablePos* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextZoomTablePos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextZoomTablePos* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<NextZoomTablePos>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NextZoomTablePos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NextZoomTablePos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.NextZoomTablePos"; }

 protected:
  explicit NextZoomTablePos(::google::protobuf::Arena* arena);
  NextZoomTablePos(::google::protobuf::Arena* arena, const NextZoomTablePos& from);
  NextZoomTablePos(::google::protobuf::Arena* arena, NextZoomTablePos&& from) noexcept
      : NextZoomTablePos(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.NextZoomTablePos)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NextZoomTablePos& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class NextFxMode final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.NextFxMode) */ {
 public:
  inline NextFxMode() : NextFxMode(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NextFxMode* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NextFxMode));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NextFxMode(
      ::google::protobuf::internal::ConstantInitialized);

  inline NextFxMode(const NextFxMode& from) : NextFxMode(nullptr, from) {}
  inline NextFxMode(NextFxMode&& from) noexcept
      : NextFxMode(nullptr, std::move(from)) {}
  inline NextFxMode& operator=(const NextFxMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextFxMode& operator=(NextFxMode&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextFxMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextFxMode* internal_default_instance() {
    return reinterpret_cast<const NextFxMode*>(
        &_NextFxMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(NextFxMode& a, NextFxMode& b) { a.Swap(&b); }
  inline void Swap(NextFxMode* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextFxMode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextFxMode* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<NextFxMode>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NextFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NextFxMode& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.NextFxMode"; }

 protected:
  explicit NextFxMode(::google::protobuf::Arena* arena);
  NextFxMode(::google::protobuf::Arena* arena, const NextFxMode& from);
  NextFxMode(::google::protobuf::Arena* arena, NextFxMode&& from) noexcept
      : NextFxMode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.NextFxMode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NextFxMode& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Move final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Move) */ {
 public:
  inline Move() : Move(nullptr) {}
  ~Move() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Move* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Move));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Move(
      ::google::protobuf::internal::ConstantInitialized);

  inline Move(const Move& from) : Move(nullptr, from) {}
  inline Move(Move&& from) noexcept
      : Move(nullptr, std::move(from)) {}
  inline Move& operator=(const Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline Move& operator=(Move&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const Move* internal_default_instance() {
    return reinterpret_cast<const Move*>(
        &_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Move& a, Move& b) { a.Swap(&b); }
  inline void Swap(Move* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Move* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Move* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Move>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Move& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Move& from) { Move::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Move* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Move"; }

 protected:
  explicit Move(::google::protobuf::Arena* arena);
  Move(::google::protobuf::Arena* arena, const Move& from);
  Move(::google::protobuf::Arena* arena, Move&& from) noexcept
      : Move(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetValueFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // double target_value = 1;
  void clear_target_value() ;
  double target_value() const;
  void set_target_value(double value);

  private:
  double _internal_target_value() const;
  void _internal_set_target_value(double value);

  public:
  // double speed = 2;
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Move)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Move& from_msg);
    double target_value_;
    double speed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class HaltAll final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.HaltAll) */ {
 public:
  inline HaltAll() : HaltAll(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HaltAll* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HaltAll));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HaltAll(
      ::google::protobuf::internal::ConstantInitialized);

  inline HaltAll(const HaltAll& from) : HaltAll(nullptr, from) {}
  inline HaltAll(HaltAll&& from) noexcept
      : HaltAll(nullptr, std::move(from)) {}
  inline HaltAll& operator=(const HaltAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline HaltAll& operator=(HaltAll&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HaltAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const HaltAll* internal_default_instance() {
    return reinterpret_cast<const HaltAll*>(
        &_HaltAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(HaltAll& a, HaltAll& b) { a.Swap(&b); }
  inline void Swap(HaltAll* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HaltAll* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HaltAll* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<HaltAll>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HaltAll& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HaltAll& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.HaltAll"; }

 protected:
  explicit HaltAll(::google::protobuf::Arena* arena);
  HaltAll(::google::protobuf::Arena* arena, const HaltAll& from);
  HaltAll(::google::protobuf::Arena* arena, HaltAll&& from) noexcept
      : HaltAll(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.HaltAll)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HaltAll& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Halt final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Halt) */ {
 public:
  inline Halt() : Halt(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Halt* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Halt));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Halt(
      ::google::protobuf::internal::ConstantInitialized);

  inline Halt(const Halt& from) : Halt(nullptr, from) {}
  inline Halt(Halt&& from) noexcept
      : Halt(nullptr, std::move(from)) {}
  inline Halt& operator=(const Halt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Halt& operator=(Halt&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Halt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Halt* internal_default_instance() {
    return reinterpret_cast<const Halt*>(
        &_Halt_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Halt& a, Halt& b) { a.Swap(&b); }
  inline void Swap(Halt* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Halt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Halt* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Halt>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Halt& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Halt& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Halt"; }

 protected:
  explicit Halt(::google::protobuf::Arena* arena);
  Halt(::google::protobuf::Arena* arena, const Halt& from);
  Halt(::google::protobuf::Arena* arena, Halt&& from) noexcept
      : Halt(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Halt)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Halt& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPos final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.GetPos) */ {
 public:
  inline GetPos() : GetPos(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetPos* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetPos));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetPos(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetPos(const GetPos& from) : GetPos(nullptr, from) {}
  inline GetPos(GetPos&& from) noexcept
      : GetPos(nullptr, std::move(from)) {}
  inline GetPos& operator=(const GetPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPos& operator=(GetPos&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPos* internal_default_instance() {
    return reinterpret_cast<const GetPos*>(
        &_GetPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetPos& a, GetPos& b) { a.Swap(&b); }
  inline void Swap(GetPos* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPos* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetPos>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetPos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetPos& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.GetPos"; }

 protected:
  explicit GetPos(::google::protobuf::Arena* arena);
  GetPos(::google::protobuf::Arena* arena, const GetPos& from);
  GetPos(::google::protobuf::Arena* arena, GetPos&& from) noexcept
      : GetPos(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.GetPos)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetPos& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetMeteo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.GetMeteo) */ {
 public:
  inline GetMeteo() : GetMeteo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetMeteo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetMeteo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetMeteo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetMeteo(const GetMeteo& from) : GetMeteo(nullptr, from) {}
  inline GetMeteo(GetMeteo&& from) noexcept
      : GetMeteo(nullptr, std::move(from)) {}
  inline GetMeteo& operator=(const GetMeteo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMeteo& operator=(GetMeteo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMeteo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMeteo* internal_default_instance() {
    return reinterpret_cast<const GetMeteo*>(
        &_GetMeteo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(GetMeteo& a, GetMeteo& b) { a.Swap(&b); }
  inline void Swap(GetMeteo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMeteo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMeteo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetMeteo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.GetMeteo"; }

 protected:
  explicit GetMeteo(::google::protobuf::Arena* arena);
  GetMeteo(::google::protobuf::Arena* arena, const GetMeteo& from);
  GetMeteo(::google::protobuf::Arena* arena, GetMeteo&& from) noexcept
      : GetMeteo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.GetMeteo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetMeteo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class FocusROI final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.FocusROI) */ {
 public:
  inline FocusROI() : FocusROI(nullptr) {}
  ~FocusROI() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FocusROI* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FocusROI));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FocusROI(
      ::google::protobuf::internal::ConstantInitialized);

  inline FocusROI(const FocusROI& from) : FocusROI(nullptr, from) {}
  inline FocusROI(FocusROI&& from) noexcept
      : FocusROI(nullptr, std::move(from)) {}
  inline FocusROI& operator=(const FocusROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusROI& operator=(FocusROI&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FocusROI& default_instance() {
    return *internal_default_instance();
  }
  static inline const FocusROI* internal_default_instance() {
    return reinterpret_cast<const FocusROI*>(
        &_FocusROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(FocusROI& a, FocusROI& b) { a.Swap(&b); }
  inline void Swap(FocusROI* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusROI* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FocusROI* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FocusROI>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FocusROI& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FocusROI& from) { FocusROI::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FocusROI* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.FocusROI"; }

 protected:
  explicit FocusROI(::google::protobuf::Arena* arena);
  FocusROI(::google::protobuf::Arena* arena, const FocusROI& from);
  FocusROI(::google::protobuf::Arena* arena, FocusROI&& from) noexcept
      : FocusROI(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kFrameTimeFieldNumber = 5,
    kStateTimeFieldNumber = 6,
  };
  // double x1 = 1;
  void clear_x1() ;
  double x1() const;
  void set_x1(double value);

  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);

  public:
  // double y1 = 2;
  void clear_y1() ;
  double y1() const;
  void set_y1(double value);

  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);

  public:
  // double x2 = 3;
  void clear_x2() ;
  double x2() const;
  void set_x2(double value);

  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);

  public:
  // double y2 = 4;
  void clear_y2() ;
  double y2() const;
  void set_y2(double value);

  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);

  public:
  // uint64 frame_time = 5;
  void clear_frame_time() ;
  ::uint64_t frame_time() const;
  void set_frame_time(::uint64_t value);

  private:
  ::uint64_t _internal_frame_time() const;
  void _internal_set_frame_time(::uint64_t value);

  public:
  // uint64 state_time = 6;
  void clear_state_time() ;
  ::uint64_t state_time() const;
  void set_state_time(::uint64_t value);

  private:
  ::uint64_t _internal_state_time() const;
  void _internal_set_state_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.FocusROI)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FocusROI& from_msg);
    double x1_;
    double y1_;
    double x2_;
    double y2_;
    ::uint64_t frame_time_;
    ::uint64_t state_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Zoom final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Zoom) */ {
 public:
  inline Zoom() : Zoom(nullptr) {}
  ~Zoom() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Zoom* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Zoom));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Zoom(
      ::google::protobuf::internal::ConstantInitialized);

  inline Zoom(const Zoom& from) : Zoom(nullptr, from) {}
  inline Zoom(Zoom&& from) noexcept
      : Zoom(nullptr, std::move(from)) {}
  inline Zoom& operator=(const Zoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zoom& operator=(Zoom&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zoom& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kSetValue = 1,
    kMove = 2,
    kHalt = 3,
    kSetZoomTableValue = 4,
    kNextZoomTablePos = 5,
    kPrevZoomTablePos = 6,
    kOffset = 7,
    kResetZoom = 8,
    kSaveToTable = 9,
    CMD_NOT_SET = 0,
  };
  static inline const Zoom* internal_default_instance() {
    return reinterpret_cast<const Zoom*>(
        &_Zoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Zoom& a, Zoom& b) { a.Swap(&b); }
  inline void Swap(Zoom* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zoom* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zoom* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Zoom>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Zoom& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Zoom& from) { Zoom::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Zoom* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Zoom"; }

 protected:
  explicit Zoom(::google::protobuf::Arena* arena);
  Zoom(::google::protobuf::Arena* arena, const Zoom& from);
  Zoom(::google::protobuf::Arena* arena, Zoom&& from) noexcept
      : Zoom(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSetValueFieldNumber = 1,
    kMoveFieldNumber = 2,
    kHaltFieldNumber = 3,
    kSetZoomTableValueFieldNumber = 4,
    kNextZoomTablePosFieldNumber = 5,
    kPrevZoomTablePosFieldNumber = 6,
    kOffsetFieldNumber = 7,
    kResetZoomFieldNumber = 8,
    kSaveToTableFieldNumber = 9,
  };
  // .cmd.DayCamera.SetValue set_value = 1;
  bool has_set_value() const;
  private:
  bool _internal_has_set_value() const;

  public:
  void clear_set_value() ;
  const ::cmd::DayCamera::SetValue& set_value() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetValue* release_set_value();
  ::cmd::DayCamera::SetValue* mutable_set_value();
  void set_allocated_set_value(::cmd::DayCamera::SetValue* value);
  void unsafe_arena_set_allocated_set_value(::cmd::DayCamera::SetValue* value);
  ::cmd::DayCamera::SetValue* unsafe_arena_release_set_value();

  private:
  const ::cmd::DayCamera::SetValue& _internal_set_value() const;
  ::cmd::DayCamera::SetValue* _internal_mutable_set_value();

  public:
  // .cmd.DayCamera.Move move = 2;
  bool has_move() const;
  private:
  bool _internal_has_move() const;

  public:
  void clear_move() ;
  const ::cmd::DayCamera::Move& move() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Move* release_move();
  ::cmd::DayCamera::Move* mutable_move();
  void set_allocated_move(::cmd::DayCamera::Move* value);
  void unsafe_arena_set_allocated_move(::cmd::DayCamera::Move* value);
  ::cmd::DayCamera::Move* unsafe_arena_release_move();

  private:
  const ::cmd::DayCamera::Move& _internal_move() const;
  ::cmd::DayCamera::Move* _internal_mutable_move();

  public:
  // .cmd.DayCamera.Halt halt = 3;
  bool has_halt() const;
  private:
  bool _internal_has_halt() const;

  public:
  void clear_halt() ;
  const ::cmd::DayCamera::Halt& halt() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Halt* release_halt();
  ::cmd::DayCamera::Halt* mutable_halt();
  void set_allocated_halt(::cmd::DayCamera::Halt* value);
  void unsafe_arena_set_allocated_halt(::cmd::DayCamera::Halt* value);
  ::cmd::DayCamera::Halt* unsafe_arena_release_halt();

  private:
  const ::cmd::DayCamera::Halt& _internal_halt() const;
  ::cmd::DayCamera::Halt* _internal_mutable_halt();

  public:
  // .cmd.DayCamera.SetZoomTableValue set_zoom_table_value = 4;
  bool has_set_zoom_table_value() const;
  private:
  bool _internal_has_set_zoom_table_value() const;

  public:
  void clear_set_zoom_table_value() ;
  const ::cmd::DayCamera::SetZoomTableValue& set_zoom_table_value() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetZoomTableValue* release_set_zoom_table_value();
  ::cmd::DayCamera::SetZoomTableValue* mutable_set_zoom_table_value();
  void set_allocated_set_zoom_table_value(::cmd::DayCamera::SetZoomTableValue* value);
  void unsafe_arena_set_allocated_set_zoom_table_value(::cmd::DayCamera::SetZoomTableValue* value);
  ::cmd::DayCamera::SetZoomTableValue* unsafe_arena_release_set_zoom_table_value();

  private:
  const ::cmd::DayCamera::SetZoomTableValue& _internal_set_zoom_table_value() const;
  ::cmd::DayCamera::SetZoomTableValue* _internal_mutable_set_zoom_table_value();

  public:
  // .cmd.DayCamera.NextZoomTablePos next_zoom_table_pos = 5;
  bool has_next_zoom_table_pos() const;
  private:
  bool _internal_has_next_zoom_table_pos() const;

  public:
  void clear_next_zoom_table_pos() ;
  const ::cmd::DayCamera::NextZoomTablePos& next_zoom_table_pos() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::NextZoomTablePos* release_next_zoom_table_pos();
  ::cmd::DayCamera::NextZoomTablePos* mutable_next_zoom_table_pos();
  void set_allocated_next_zoom_table_pos(::cmd::DayCamera::NextZoomTablePos* value);
  void unsafe_arena_set_allocated_next_zoom_table_pos(::cmd::DayCamera::NextZoomTablePos* value);
  ::cmd::DayCamera::NextZoomTablePos* unsafe_arena_release_next_zoom_table_pos();

  private:
  const ::cmd::DayCamera::NextZoomTablePos& _internal_next_zoom_table_pos() const;
  ::cmd::DayCamera::NextZoomTablePos* _internal_mutable_next_zoom_table_pos();

  public:
  // .cmd.DayCamera.PrevZoomTablePos prev_zoom_table_pos = 6;
  bool has_prev_zoom_table_pos() const;
  private:
  bool _internal_has_prev_zoom_table_pos() const;

  public:
  void clear_prev_zoom_table_pos() ;
  const ::cmd::DayCamera::PrevZoomTablePos& prev_zoom_table_pos() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::PrevZoomTablePos* release_prev_zoom_table_pos();
  ::cmd::DayCamera::PrevZoomTablePos* mutable_prev_zoom_table_pos();
  void set_allocated_prev_zoom_table_pos(::cmd::DayCamera::PrevZoomTablePos* value);
  void unsafe_arena_set_allocated_prev_zoom_table_pos(::cmd::DayCamera::PrevZoomTablePos* value);
  ::cmd::DayCamera::PrevZoomTablePos* unsafe_arena_release_prev_zoom_table_pos();

  private:
  const ::cmd::DayCamera::PrevZoomTablePos& _internal_prev_zoom_table_pos() const;
  ::cmd::DayCamera::PrevZoomTablePos* _internal_mutable_prev_zoom_table_pos();

  public:
  // .cmd.DayCamera.Offset offset = 7;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;

  public:
  void clear_offset() ;
  const ::cmd::DayCamera::Offset& offset() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Offset* release_offset();
  ::cmd::DayCamera::Offset* mutable_offset();
  void set_allocated_offset(::cmd::DayCamera::Offset* value);
  void unsafe_arena_set_allocated_offset(::cmd::DayCamera::Offset* value);
  ::cmd::DayCamera::Offset* unsafe_arena_release_offset();

  private:
  const ::cmd::DayCamera::Offset& _internal_offset() const;
  ::cmd::DayCamera::Offset* _internal_mutable_offset();

  public:
  // .cmd.DayCamera.ResetZoom reset_zoom = 8;
  bool has_reset_zoom() const;
  private:
  bool _internal_has_reset_zoom() const;

  public:
  void clear_reset_zoom() ;
  const ::cmd::DayCamera::ResetZoom& reset_zoom() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::ResetZoom* release_reset_zoom();
  ::cmd::DayCamera::ResetZoom* mutable_reset_zoom();
  void set_allocated_reset_zoom(::cmd::DayCamera::ResetZoom* value);
  void unsafe_arena_set_allocated_reset_zoom(::cmd::DayCamera::ResetZoom* value);
  ::cmd::DayCamera::ResetZoom* unsafe_arena_release_reset_zoom();

  private:
  const ::cmd::DayCamera::ResetZoom& _internal_reset_zoom() const;
  ::cmd::DayCamera::ResetZoom* _internal_mutable_reset_zoom();

  public:
  // .cmd.DayCamera.SaveToTable save_to_table = 9;
  bool has_save_to_table() const;
  private:
  bool _internal_has_save_to_table() const;

  public:
  void clear_save_to_table() ;
  const ::cmd::DayCamera::SaveToTable& save_to_table() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SaveToTable* release_save_to_table();
  ::cmd::DayCamera::SaveToTable* mutable_save_to_table();
  void set_allocated_save_to_table(::cmd::DayCamera::SaveToTable* value);
  void unsafe_arena_set_allocated_save_to_table(::cmd::DayCamera::SaveToTable* value);
  ::cmd::DayCamera::SaveToTable* unsafe_arena_release_save_to_table();

  private:
  const ::cmd::DayCamera::SaveToTable& _internal_save_to_table() const;
  ::cmd::DayCamera::SaveToTable* _internal_mutable_save_to_table();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Zoom)
 private:
  class _Internal;
  void set_has_set_value();
  void set_has_move();
  void set_has_halt();
  void set_has_set_zoom_table_value();
  void set_has_next_zoom_table_pos();
  void set_has_prev_zoom_table_pos();
  void set_has_offset();
  void set_has_reset_zoom();
  void set_has_save_to_table();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 9, 9,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Zoom& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::DayCamera::SetValue* set_value_;
      ::cmd::DayCamera::Move* move_;
      ::cmd::DayCamera::Halt* halt_;
      ::cmd::DayCamera::SetZoomTableValue* set_zoom_table_value_;
      ::cmd::DayCamera::NextZoomTablePos* next_zoom_table_pos_;
      ::cmd::DayCamera::PrevZoomTablePos* prev_zoom_table_pos_;
      ::cmd::DayCamera::Offset* offset_;
      ::cmd::DayCamera::ResetZoom* reset_zoom_;
      ::cmd::DayCamera::SaveToTable* save_to_table_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Focus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Focus) */ {
 public:
  inline Focus() : Focus(nullptr) {}
  ~Focus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Focus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Focus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Focus(
      ::google::protobuf::internal::ConstantInitialized);

  inline Focus(const Focus& from) : Focus(nullptr, from) {}
  inline Focus(Focus&& from) noexcept
      : Focus(nullptr, std::move(from)) {}
  inline Focus& operator=(const Focus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Focus& operator=(Focus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Focus& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kSetValue = 1,
    kMove = 2,
    kHalt = 3,
    kOffset = 4,
    kResetFocus = 5,
    kSaveToTableFocus = 6,
    CMD_NOT_SET = 0,
  };
  static inline const Focus* internal_default_instance() {
    return reinterpret_cast<const Focus*>(
        &_Focus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Focus& a, Focus& b) { a.Swap(&b); }
  inline void Swap(Focus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Focus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Focus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Focus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Focus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Focus& from) { Focus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Focus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Focus"; }

 protected:
  explicit Focus(::google::protobuf::Arena* arena);
  Focus(::google::protobuf::Arena* arena, const Focus& from);
  Focus(::google::protobuf::Arena* arena, Focus&& from) noexcept
      : Focus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSetValueFieldNumber = 1,
    kMoveFieldNumber = 2,
    kHaltFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kResetFocusFieldNumber = 5,
    kSaveToTableFocusFieldNumber = 6,
  };
  // .cmd.DayCamera.SetValue set_value = 1;
  bool has_set_value() const;
  private:
  bool _internal_has_set_value() const;

  public:
  void clear_set_value() ;
  const ::cmd::DayCamera::SetValue& set_value() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetValue* release_set_value();
  ::cmd::DayCamera::SetValue* mutable_set_value();
  void set_allocated_set_value(::cmd::DayCamera::SetValue* value);
  void unsafe_arena_set_allocated_set_value(::cmd::DayCamera::SetValue* value);
  ::cmd::DayCamera::SetValue* unsafe_arena_release_set_value();

  private:
  const ::cmd::DayCamera::SetValue& _internal_set_value() const;
  ::cmd::DayCamera::SetValue* _internal_mutable_set_value();

  public:
  // .cmd.DayCamera.Move move = 2;
  bool has_move() const;
  private:
  bool _internal_has_move() const;

  public:
  void clear_move() ;
  const ::cmd::DayCamera::Move& move() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Move* release_move();
  ::cmd::DayCamera::Move* mutable_move();
  void set_allocated_move(::cmd::DayCamera::Move* value);
  void unsafe_arena_set_allocated_move(::cmd::DayCamera::Move* value);
  ::cmd::DayCamera::Move* unsafe_arena_release_move();

  private:
  const ::cmd::DayCamera::Move& _internal_move() const;
  ::cmd::DayCamera::Move* _internal_mutable_move();

  public:
  // .cmd.DayCamera.Halt halt = 3;
  bool has_halt() const;
  private:
  bool _internal_has_halt() const;

  public:
  void clear_halt() ;
  const ::cmd::DayCamera::Halt& halt() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Halt* release_halt();
  ::cmd::DayCamera::Halt* mutable_halt();
  void set_allocated_halt(::cmd::DayCamera::Halt* value);
  void unsafe_arena_set_allocated_halt(::cmd::DayCamera::Halt* value);
  ::cmd::DayCamera::Halt* unsafe_arena_release_halt();

  private:
  const ::cmd::DayCamera::Halt& _internal_halt() const;
  ::cmd::DayCamera::Halt* _internal_mutable_halt();

  public:
  // .cmd.DayCamera.Offset offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;

  public:
  void clear_offset() ;
  const ::cmd::DayCamera::Offset& offset() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Offset* release_offset();
  ::cmd::DayCamera::Offset* mutable_offset();
  void set_allocated_offset(::cmd::DayCamera::Offset* value);
  void unsafe_arena_set_allocated_offset(::cmd::DayCamera::Offset* value);
  ::cmd::DayCamera::Offset* unsafe_arena_release_offset();

  private:
  const ::cmd::DayCamera::Offset& _internal_offset() const;
  ::cmd::DayCamera::Offset* _internal_mutable_offset();

  public:
  // .cmd.DayCamera.ResetFocus reset_focus = 5;
  bool has_reset_focus() const;
  private:
  bool _internal_has_reset_focus() const;

  public:
  void clear_reset_focus() ;
  const ::cmd::DayCamera::ResetFocus& reset_focus() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::ResetFocus* release_reset_focus();
  ::cmd::DayCamera::ResetFocus* mutable_reset_focus();
  void set_allocated_reset_focus(::cmd::DayCamera::ResetFocus* value);
  void unsafe_arena_set_allocated_reset_focus(::cmd::DayCamera::ResetFocus* value);
  ::cmd::DayCamera::ResetFocus* unsafe_arena_release_reset_focus();

  private:
  const ::cmd::DayCamera::ResetFocus& _internal_reset_focus() const;
  ::cmd::DayCamera::ResetFocus* _internal_mutable_reset_focus();

  public:
  // .cmd.DayCamera.SaveToTableFocus save_to_table_focus = 6;
  bool has_save_to_table_focus() const;
  private:
  bool _internal_has_save_to_table_focus() const;

  public:
  void clear_save_to_table_focus() ;
  const ::cmd::DayCamera::SaveToTableFocus& save_to_table_focus() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SaveToTableFocus* release_save_to_table_focus();
  ::cmd::DayCamera::SaveToTableFocus* mutable_save_to_table_focus();
  void set_allocated_save_to_table_focus(::cmd::DayCamera::SaveToTableFocus* value);
  void unsafe_arena_set_allocated_save_to_table_focus(::cmd::DayCamera::SaveToTableFocus* value);
  ::cmd::DayCamera::SaveToTableFocus* unsafe_arena_release_save_to_table_focus();

  private:
  const ::cmd::DayCamera::SaveToTableFocus& _internal_save_to_table_focus() const;
  ::cmd::DayCamera::SaveToTableFocus* _internal_mutable_save_to_table_focus();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Focus)
 private:
  class _Internal;
  void set_has_set_value();
  void set_has_move();
  void set_has_halt();
  void set_has_offset();
  void set_has_reset_focus();
  void set_has_save_to_table_focus();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Focus& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::DayCamera::SetValue* set_value_;
      ::cmd::DayCamera::Move* move_;
      ::cmd::DayCamera::Halt* halt_;
      ::cmd::DayCamera::Offset* offset_;
      ::cmd::DayCamera::ResetFocus* reset_focus_;
      ::cmd::DayCamera::SaveToTableFocus* save_to_table_focus_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamera.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kFocus = 1,
    kZoom = 2,
    kSetIris = 3,
    kSetInfraRedFilter = 4,
    kStart = 5,
    kStop = 6,
    kPhoto = 7,
    kSetAutoIris = 8,
    kHaltAll = 9,
    kSetFxMode = 10,
    kNextFxMode = 11,
    kPrevFxMode = 12,
    kGetMeteo = 13,
    kRefreshFxMode = 14,
    kSetDigitalZoomLevel = 15,
    kSetClaheLevel = 16,
    kShiftClaheLevel = 17,
    kFocusRoi = 18,
    kTrackRoi = 19,
    kZoomRoi = 20,
    CMD_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamera.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFocusFieldNumber = 1,
    kZoomFieldNumber = 2,
    kSetIrisFieldNumber = 3,
    kSetInfraRedFilterFieldNumber = 4,
    kStartFieldNumber = 5,
    kStopFieldNumber = 6,
    kPhotoFieldNumber = 7,
    kSetAutoIrisFieldNumber = 8,
    kHaltAllFieldNumber = 9,
    kSetFxModeFieldNumber = 10,
    kNextFxModeFieldNumber = 11,
    kPrevFxModeFieldNumber = 12,
    kGetMeteoFieldNumber = 13,
    kRefreshFxModeFieldNumber = 14,
    kSetDigitalZoomLevelFieldNumber = 15,
    kSetClaheLevelFieldNumber = 16,
    kShiftClaheLevelFieldNumber = 17,
    kFocusRoiFieldNumber = 18,
    kTrackRoiFieldNumber = 19,
    kZoomRoiFieldNumber = 20,
  };
  // .cmd.DayCamera.Focus focus = 1;
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;

  public:
  void clear_focus() ;
  const ::cmd::DayCamera::Focus& focus() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Focus* release_focus();
  ::cmd::DayCamera::Focus* mutable_focus();
  void set_allocated_focus(::cmd::DayCamera::Focus* value);
  void unsafe_arena_set_allocated_focus(::cmd::DayCamera::Focus* value);
  ::cmd::DayCamera::Focus* unsafe_arena_release_focus();

  private:
  const ::cmd::DayCamera::Focus& _internal_focus() const;
  ::cmd::DayCamera::Focus* _internal_mutable_focus();

  public:
  // .cmd.DayCamera.Zoom zoom = 2;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;

  public:
  void clear_zoom() ;
  const ::cmd::DayCamera::Zoom& zoom() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Zoom* release_zoom();
  ::cmd::DayCamera::Zoom* mutable_zoom();
  void set_allocated_zoom(::cmd::DayCamera::Zoom* value);
  void unsafe_arena_set_allocated_zoom(::cmd::DayCamera::Zoom* value);
  ::cmd::DayCamera::Zoom* unsafe_arena_release_zoom();

  private:
  const ::cmd::DayCamera::Zoom& _internal_zoom() const;
  ::cmd::DayCamera::Zoom* _internal_mutable_zoom();

  public:
  // .cmd.DayCamera.SetIris set_iris = 3;
  bool has_set_iris() const;
  private:
  bool _internal_has_set_iris() const;

  public:
  void clear_set_iris() ;
  const ::cmd::DayCamera::SetIris& set_iris() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetIris* release_set_iris();
  ::cmd::DayCamera::SetIris* mutable_set_iris();
  void set_allocated_set_iris(::cmd::DayCamera::SetIris* value);
  void unsafe_arena_set_allocated_set_iris(::cmd::DayCamera::SetIris* value);
  ::cmd::DayCamera::SetIris* unsafe_arena_release_set_iris();

  private:
  const ::cmd::DayCamera::SetIris& _internal_set_iris() const;
  ::cmd::DayCamera::SetIris* _internal_mutable_set_iris();

  public:
  // .cmd.DayCamera.SetInfraRedFilter set_infra_red_filter = 4;
  bool has_set_infra_red_filter() const;
  private:
  bool _internal_has_set_infra_red_filter() const;

  public:
  void clear_set_infra_red_filter() ;
  const ::cmd::DayCamera::SetInfraRedFilter& set_infra_red_filter() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetInfraRedFilter* release_set_infra_red_filter();
  ::cmd::DayCamera::SetInfraRedFilter* mutable_set_infra_red_filter();
  void set_allocated_set_infra_red_filter(::cmd::DayCamera::SetInfraRedFilter* value);
  void unsafe_arena_set_allocated_set_infra_red_filter(::cmd::DayCamera::SetInfraRedFilter* value);
  ::cmd::DayCamera::SetInfraRedFilter* unsafe_arena_release_set_infra_red_filter();

  private:
  const ::cmd::DayCamera::SetInfraRedFilter& _internal_set_infra_red_filter() const;
  ::cmd::DayCamera::SetInfraRedFilter* _internal_mutable_set_infra_red_filter();

  public:
  // .cmd.DayCamera.Start start = 5;
  bool has_start() const;
  private:
  bool _internal_has_start() const;

  public:
  void clear_start() ;
  const ::cmd::DayCamera::Start& start() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Start* release_start();
  ::cmd::DayCamera::Start* mutable_start();
  void set_allocated_start(::cmd::DayCamera::Start* value);
  void unsafe_arena_set_allocated_start(::cmd::DayCamera::Start* value);
  ::cmd::DayCamera::Start* unsafe_arena_release_start();

  private:
  const ::cmd::DayCamera::Start& _internal_start() const;
  ::cmd::DayCamera::Start* _internal_mutable_start();

  public:
  // .cmd.DayCamera.Stop stop = 6;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;

  public:
  void clear_stop() ;
  const ::cmd::DayCamera::Stop& stop() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Stop* release_stop();
  ::cmd::DayCamera::Stop* mutable_stop();
  void set_allocated_stop(::cmd::DayCamera::Stop* value);
  void unsafe_arena_set_allocated_stop(::cmd::DayCamera::Stop* value);
  ::cmd::DayCamera::Stop* unsafe_arena_release_stop();

  private:
  const ::cmd::DayCamera::Stop& _internal_stop() const;
  ::cmd::DayCamera::Stop* _internal_mutable_stop();

  public:
  // .cmd.DayCamera.Photo photo = 7;
  bool has_photo() const;
  private:
  bool _internal_has_photo() const;

  public:
  void clear_photo() ;
  const ::cmd::DayCamera::Photo& photo() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Photo* release_photo();
  ::cmd::DayCamera::Photo* mutable_photo();
  void set_allocated_photo(::cmd::DayCamera::Photo* value);
  void unsafe_arena_set_allocated_photo(::cmd::DayCamera::Photo* value);
  ::cmd::DayCamera::Photo* unsafe_arena_release_photo();

  private:
  const ::cmd::DayCamera::Photo& _internal_photo() const;
  ::cmd::DayCamera::Photo* _internal_mutable_photo();

  public:
  // .cmd.DayCamera.SetAutoIris set_auto_iris = 8;
  bool has_set_auto_iris() const;
  private:
  bool _internal_has_set_auto_iris() const;

  public:
  void clear_set_auto_iris() ;
  const ::cmd::DayCamera::SetAutoIris& set_auto_iris() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetAutoIris* release_set_auto_iris();
  ::cmd::DayCamera::SetAutoIris* mutable_set_auto_iris();
  void set_allocated_set_auto_iris(::cmd::DayCamera::SetAutoIris* value);
  void unsafe_arena_set_allocated_set_auto_iris(::cmd::DayCamera::SetAutoIris* value);
  ::cmd::DayCamera::SetAutoIris* unsafe_arena_release_set_auto_iris();

  private:
  const ::cmd::DayCamera::SetAutoIris& _internal_set_auto_iris() const;
  ::cmd::DayCamera::SetAutoIris* _internal_mutable_set_auto_iris();

  public:
  // .cmd.DayCamera.HaltAll halt_all = 9;
  bool has_halt_all() const;
  private:
  bool _internal_has_halt_all() const;

  public:
  void clear_halt_all() ;
  const ::cmd::DayCamera::HaltAll& halt_all() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::HaltAll* release_halt_all();
  ::cmd::DayCamera::HaltAll* mutable_halt_all();
  void set_allocated_halt_all(::cmd::DayCamera::HaltAll* value);
  void unsafe_arena_set_allocated_halt_all(::cmd::DayCamera::HaltAll* value);
  ::cmd::DayCamera::HaltAll* unsafe_arena_release_halt_all();

  private:
  const ::cmd::DayCamera::HaltAll& _internal_halt_all() const;
  ::cmd::DayCamera::HaltAll* _internal_mutable_halt_all();

  public:
  // .cmd.DayCamera.SetFxMode set_fx_mode = 10;
  bool has_set_fx_mode() const;
  private:
  bool _internal_has_set_fx_mode() const;

  public:
  void clear_set_fx_mode() ;
  const ::cmd::DayCamera::SetFxMode& set_fx_mode() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetFxMode* release_set_fx_mode();
  ::cmd::DayCamera::SetFxMode* mutable_set_fx_mode();
  void set_allocated_set_fx_mode(::cmd::DayCamera::SetFxMode* value);
  void unsafe_arena_set_allocated_set_fx_mode(::cmd::DayCamera::SetFxMode* value);
  ::cmd::DayCamera::SetFxMode* unsafe_arena_release_set_fx_mode();

  private:
  const ::cmd::DayCamera::SetFxMode& _internal_set_fx_mode() const;
  ::cmd::DayCamera::SetFxMode* _internal_mutable_set_fx_mode();

  public:
  // .cmd.DayCamera.NextFxMode next_fx_mode = 11;
  bool has_next_fx_mode() const;
  private:
  bool _internal_has_next_fx_mode() const;

  public:
  void clear_next_fx_mode() ;
  const ::cmd::DayCamera::NextFxMode& next_fx_mode() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::NextFxMode* release_next_fx_mode();
  ::cmd::DayCamera::NextFxMode* mutable_next_fx_mode();
  void set_allocated_next_fx_mode(::cmd::DayCamera::NextFxMode* value);
  void unsafe_arena_set_allocated_next_fx_mode(::cmd::DayCamera::NextFxMode* value);
  ::cmd::DayCamera::NextFxMode* unsafe_arena_release_next_fx_mode();

  private:
  const ::cmd::DayCamera::NextFxMode& _internal_next_fx_mode() const;
  ::cmd::DayCamera::NextFxMode* _internal_mutable_next_fx_mode();

  public:
  // .cmd.DayCamera.PrevFxMode prev_fx_mode = 12;
  bool has_prev_fx_mode() const;
  private:
  bool _internal_has_prev_fx_mode() const;

  public:
  void clear_prev_fx_mode() ;
  const ::cmd::DayCamera::PrevFxMode& prev_fx_mode() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::PrevFxMode* release_prev_fx_mode();
  ::cmd::DayCamera::PrevFxMode* mutable_prev_fx_mode();
  void set_allocated_prev_fx_mode(::cmd::DayCamera::PrevFxMode* value);
  void unsafe_arena_set_allocated_prev_fx_mode(::cmd::DayCamera::PrevFxMode* value);
  ::cmd::DayCamera::PrevFxMode* unsafe_arena_release_prev_fx_mode();

  private:
  const ::cmd::DayCamera::PrevFxMode& _internal_prev_fx_mode() const;
  ::cmd::DayCamera::PrevFxMode* _internal_mutable_prev_fx_mode();

  public:
  // .cmd.DayCamera.GetMeteo get_meteo = 13;
  bool has_get_meteo() const;
  private:
  bool _internal_has_get_meteo() const;

  public:
  void clear_get_meteo() ;
  const ::cmd::DayCamera::GetMeteo& get_meteo() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::GetMeteo* release_get_meteo();
  ::cmd::DayCamera::GetMeteo* mutable_get_meteo();
  void set_allocated_get_meteo(::cmd::DayCamera::GetMeteo* value);
  void unsafe_arena_set_allocated_get_meteo(::cmd::DayCamera::GetMeteo* value);
  ::cmd::DayCamera::GetMeteo* unsafe_arena_release_get_meteo();

  private:
  const ::cmd::DayCamera::GetMeteo& _internal_get_meteo() const;
  ::cmd::DayCamera::GetMeteo* _internal_mutable_get_meteo();

  public:
  // .cmd.DayCamera.RefreshFxMode refresh_fx_mode = 14;
  bool has_refresh_fx_mode() const;
  private:
  bool _internal_has_refresh_fx_mode() const;

  public:
  void clear_refresh_fx_mode() ;
  const ::cmd::DayCamera::RefreshFxMode& refresh_fx_mode() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::RefreshFxMode* release_refresh_fx_mode();
  ::cmd::DayCamera::RefreshFxMode* mutable_refresh_fx_mode();
  void set_allocated_refresh_fx_mode(::cmd::DayCamera::RefreshFxMode* value);
  void unsafe_arena_set_allocated_refresh_fx_mode(::cmd::DayCamera::RefreshFxMode* value);
  ::cmd::DayCamera::RefreshFxMode* unsafe_arena_release_refresh_fx_mode();

  private:
  const ::cmd::DayCamera::RefreshFxMode& _internal_refresh_fx_mode() const;
  ::cmd::DayCamera::RefreshFxMode* _internal_mutable_refresh_fx_mode();

  public:
  // .cmd.DayCamera.SetDigitalZoomLevel set_digital_zoom_level = 15;
  bool has_set_digital_zoom_level() const;
  private:
  bool _internal_has_set_digital_zoom_level() const;

  public:
  void clear_set_digital_zoom_level() ;
  const ::cmd::DayCamera::SetDigitalZoomLevel& set_digital_zoom_level() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetDigitalZoomLevel* release_set_digital_zoom_level();
  ::cmd::DayCamera::SetDigitalZoomLevel* mutable_set_digital_zoom_level();
  void set_allocated_set_digital_zoom_level(::cmd::DayCamera::SetDigitalZoomLevel* value);
  void unsafe_arena_set_allocated_set_digital_zoom_level(::cmd::DayCamera::SetDigitalZoomLevel* value);
  ::cmd::DayCamera::SetDigitalZoomLevel* unsafe_arena_release_set_digital_zoom_level();

  private:
  const ::cmd::DayCamera::SetDigitalZoomLevel& _internal_set_digital_zoom_level() const;
  ::cmd::DayCamera::SetDigitalZoomLevel* _internal_mutable_set_digital_zoom_level();

  public:
  // .cmd.DayCamera.SetClaheLevel set_clahe_level = 16;
  bool has_set_clahe_level() const;
  private:
  bool _internal_has_set_clahe_level() const;

  public:
  void clear_set_clahe_level() ;
  const ::cmd::DayCamera::SetClaheLevel& set_clahe_level() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::SetClaheLevel* release_set_clahe_level();
  ::cmd::DayCamera::SetClaheLevel* mutable_set_clahe_level();
  void set_allocated_set_clahe_level(::cmd::DayCamera::SetClaheLevel* value);
  void unsafe_arena_set_allocated_set_clahe_level(::cmd::DayCamera::SetClaheLevel* value);
  ::cmd::DayCamera::SetClaheLevel* unsafe_arena_release_set_clahe_level();

  private:
  const ::cmd::DayCamera::SetClaheLevel& _internal_set_clahe_level() const;
  ::cmd::DayCamera::SetClaheLevel* _internal_mutable_set_clahe_level();

  public:
  // .cmd.DayCamera.ShiftClaheLevel shift_clahe_level = 17;
  bool has_shift_clahe_level() const;
  private:
  bool _internal_has_shift_clahe_level() const;

  public:
  void clear_shift_clahe_level() ;
  const ::cmd::DayCamera::ShiftClaheLevel& shift_clahe_level() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::ShiftClaheLevel* release_shift_clahe_level();
  ::cmd::DayCamera::ShiftClaheLevel* mutable_shift_clahe_level();
  void set_allocated_shift_clahe_level(::cmd::DayCamera::ShiftClaheLevel* value);
  void unsafe_arena_set_allocated_shift_clahe_level(::cmd::DayCamera::ShiftClaheLevel* value);
  ::cmd::DayCamera::ShiftClaheLevel* unsafe_arena_release_shift_clahe_level();

  private:
  const ::cmd::DayCamera::ShiftClaheLevel& _internal_shift_clahe_level() const;
  ::cmd::DayCamera::ShiftClaheLevel* _internal_mutable_shift_clahe_level();

  public:
  // .cmd.DayCamera.FocusROI focus_roi = 18;
  bool has_focus_roi() const;
  private:
  bool _internal_has_focus_roi() const;

  public:
  void clear_focus_roi() ;
  const ::cmd::DayCamera::FocusROI& focus_roi() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::FocusROI* release_focus_roi();
  ::cmd::DayCamera::FocusROI* mutable_focus_roi();
  void set_allocated_focus_roi(::cmd::DayCamera::FocusROI* value);
  void unsafe_arena_set_allocated_focus_roi(::cmd::DayCamera::FocusROI* value);
  ::cmd::DayCamera::FocusROI* unsafe_arena_release_focus_roi();

  private:
  const ::cmd::DayCamera::FocusROI& _internal_focus_roi() const;
  ::cmd::DayCamera::FocusROI* _internal_mutable_focus_roi();

  public:
  // .cmd.DayCamera.TrackROI track_roi = 19;
  bool has_track_roi() const;
  private:
  bool _internal_has_track_roi() const;

  public:
  void clear_track_roi() ;
  const ::cmd::DayCamera::TrackROI& track_roi() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::TrackROI* release_track_roi();
  ::cmd::DayCamera::TrackROI* mutable_track_roi();
  void set_allocated_track_roi(::cmd::DayCamera::TrackROI* value);
  void unsafe_arena_set_allocated_track_roi(::cmd::DayCamera::TrackROI* value);
  ::cmd::DayCamera::TrackROI* unsafe_arena_release_track_roi();

  private:
  const ::cmd::DayCamera::TrackROI& _internal_track_roi() const;
  ::cmd::DayCamera::TrackROI* _internal_mutable_track_roi();

  public:
  // .cmd.DayCamera.ZoomROI zoom_roi = 20;
  bool has_zoom_roi() const;
  private:
  bool _internal_has_zoom_roi() const;

  public:
  void clear_zoom_roi() ;
  const ::cmd::DayCamera::ZoomROI& zoom_roi() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::ZoomROI* release_zoom_roi();
  ::cmd::DayCamera::ZoomROI* mutable_zoom_roi();
  void set_allocated_zoom_roi(::cmd::DayCamera::ZoomROI* value);
  void unsafe_arena_set_allocated_zoom_roi(::cmd::DayCamera::ZoomROI* value);
  ::cmd::DayCamera::ZoomROI* unsafe_arena_release_zoom_roi();

  private:
  const ::cmd::DayCamera::ZoomROI& _internal_zoom_roi() const;
  ::cmd::DayCamera::ZoomROI* _internal_mutable_zoom_roi();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.DayCamera.Root)
 private:
  class _Internal;
  void set_has_focus();
  void set_has_zoom();
  void set_has_set_iris();
  void set_has_set_infra_red_filter();
  void set_has_start();
  void set_has_stop();
  void set_has_photo();
  void set_has_set_auto_iris();
  void set_has_halt_all();
  void set_has_set_fx_mode();
  void set_has_next_fx_mode();
  void set_has_prev_fx_mode();
  void set_has_get_meteo();
  void set_has_refresh_fx_mode();
  void set_has_set_digital_zoom_level();
  void set_has_set_clahe_level();
  void set_has_shift_clahe_level();
  void set_has_focus_roi();
  void set_has_track_roi();
  void set_has_zoom_roi();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 20, 20,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::DayCamera::Focus* focus_;
      ::cmd::DayCamera::Zoom* zoom_;
      ::cmd::DayCamera::SetIris* set_iris_;
      ::cmd::DayCamera::SetInfraRedFilter* set_infra_red_filter_;
      ::cmd::DayCamera::Start* start_;
      ::cmd::DayCamera::Stop* stop_;
      ::cmd::DayCamera::Photo* photo_;
      ::cmd::DayCamera::SetAutoIris* set_auto_iris_;
      ::cmd::DayCamera::HaltAll* halt_all_;
      ::cmd::DayCamera::SetFxMode* set_fx_mode_;
      ::cmd::DayCamera::NextFxMode* next_fx_mode_;
      ::cmd::DayCamera::PrevFxMode* prev_fx_mode_;
      ::cmd::DayCamera::GetMeteo* get_meteo_;
      ::cmd::DayCamera::RefreshFxMode* refresh_fx_mode_;
      ::cmd::DayCamera::SetDigitalZoomLevel* set_digital_zoom_level_;
      ::cmd::DayCamera::SetClaheLevel* set_clahe_level_;
      ::cmd::DayCamera::ShiftClaheLevel* shift_clahe_level_;
      ::cmd::DayCamera::FocusROI* focus_roi_;
      ::cmd::DayCamera::TrackROI* track_roi_;
      ::cmd::DayCamera::ZoomROI* zoom_roi_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcamera_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetValue

// double value = 1;
inline void SetValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetValue::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetValue.value)
  return _internal_value();
}
inline void SetValue::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetValue.value)
}
inline double SetValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetValue::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Move

// double target_value = 1;
inline void Move::clear_target_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_value_ = 0;
}
inline double Move::target_value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Move.target_value)
  return _internal_target_value();
}
inline void Move::set_target_value(double value) {
  _internal_set_target_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.Move.target_value)
}
inline double Move::_internal_target_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_value_;
}
inline void Move::_internal_set_target_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_value_ = value;
}

// double speed = 2;
inline void Move::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0;
}
inline double Move::speed() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Move.speed)
  return _internal_speed();
}
inline void Move::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.Move.speed)
}
inline double Move::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void Move::_internal_set_speed(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// -------------------------------------------------------------------

// Offset

// double offset_value = 1;
inline void Offset::clear_offset_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_value_ = 0;
}
inline double Offset::offset_value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Offset.offset_value)
  return _internal_offset_value();
}
inline void Offset::set_offset_value(double value) {
  _internal_set_offset_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.Offset.offset_value)
}
inline double Offset::_internal_offset_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_value_;
}
inline void Offset::_internal_set_offset_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_value_ = value;
}

// -------------------------------------------------------------------

// SetClaheLevel

// double value = 1;
inline void SetClaheLevel::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetClaheLevel::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetClaheLevel.value)
  return _internal_value();
}
inline void SetClaheLevel::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetClaheLevel.value)
}
inline double SetClaheLevel::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetClaheLevel::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// ShiftClaheLevel

// double value = 1;
inline void ShiftClaheLevel::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double ShiftClaheLevel::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ShiftClaheLevel.value)
  return _internal_value();
}
inline void ShiftClaheLevel::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ShiftClaheLevel.value)
}
inline double ShiftClaheLevel::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void ShiftClaheLevel::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Root

// .cmd.DayCamera.Focus focus = 1;
inline bool Root::has_focus() const {
  return cmd_case() == kFocus;
}
inline bool Root::_internal_has_focus() const {
  return cmd_case() == kFocus;
}
inline void Root::set_has_focus() {
  _impl_._oneof_case_[0] = kFocus;
}
inline void Root::clear_focus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kFocus) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.focus_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.focus_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Focus* Root::release_focus() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.focus)
  if (cmd_case() == kFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.focus_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Focus& Root::_internal_focus() const {
  return cmd_case() == kFocus ? *_impl_.cmd_.focus_ : reinterpret_cast<::cmd::DayCamera::Focus&>(::cmd::DayCamera::_Focus_default_instance_);
}
inline const ::cmd::DayCamera::Focus& Root::focus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.focus)
  return _internal_focus();
}
inline ::cmd::DayCamera::Focus* Root::unsafe_arena_release_focus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.focus)
  if (cmd_case() == kFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.focus_;
    _impl_.cmd_.focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_focus(::cmd::DayCamera::Focus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_focus();
    _impl_.cmd_.focus_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.focus)
}
inline ::cmd::DayCamera::Focus* Root::_internal_mutable_focus() {
  if (cmd_case() != kFocus) {
    clear_cmd();
    set_has_focus();
    _impl_.cmd_.focus_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Focus>(GetArena());
  }
  return _impl_.cmd_.focus_;
}
inline ::cmd::DayCamera::Focus* Root::mutable_focus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Focus* _msg = _internal_mutable_focus();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.focus)
  return _msg;
}

// .cmd.DayCamera.Zoom zoom = 2;
inline bool Root::has_zoom() const {
  return cmd_case() == kZoom;
}
inline bool Root::_internal_has_zoom() const {
  return cmd_case() == kZoom;
}
inline void Root::set_has_zoom() {
  _impl_._oneof_case_[0] = kZoom;
}
inline void Root::clear_zoom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kZoom) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.zoom_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.zoom_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Zoom* Root::release_zoom() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.zoom)
  if (cmd_case() == kZoom) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.zoom_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Zoom& Root::_internal_zoom() const {
  return cmd_case() == kZoom ? *_impl_.cmd_.zoom_ : reinterpret_cast<::cmd::DayCamera::Zoom&>(::cmd::DayCamera::_Zoom_default_instance_);
}
inline const ::cmd::DayCamera::Zoom& Root::zoom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.zoom)
  return _internal_zoom();
}
inline ::cmd::DayCamera::Zoom* Root::unsafe_arena_release_zoom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.zoom)
  if (cmd_case() == kZoom) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.zoom_;
    _impl_.cmd_.zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_zoom(::cmd::DayCamera::Zoom* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_zoom();
    _impl_.cmd_.zoom_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.zoom)
}
inline ::cmd::DayCamera::Zoom* Root::_internal_mutable_zoom() {
  if (cmd_case() != kZoom) {
    clear_cmd();
    set_has_zoom();
    _impl_.cmd_.zoom_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Zoom>(GetArena());
  }
  return _impl_.cmd_.zoom_;
}
inline ::cmd::DayCamera::Zoom* Root::mutable_zoom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Zoom* _msg = _internal_mutable_zoom();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.zoom)
  return _msg;
}

// .cmd.DayCamera.SetIris set_iris = 3;
inline bool Root::has_set_iris() const {
  return cmd_case() == kSetIris;
}
inline bool Root::_internal_has_set_iris() const {
  return cmd_case() == kSetIris;
}
inline void Root::set_has_set_iris() {
  _impl_._oneof_case_[0] = kSetIris;
}
inline void Root::clear_set_iris() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetIris) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_iris_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_iris_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetIris* Root::release_set_iris() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_iris)
  if (cmd_case() == kSetIris) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_iris_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_iris_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetIris& Root::_internal_set_iris() const {
  return cmd_case() == kSetIris ? *_impl_.cmd_.set_iris_ : reinterpret_cast<::cmd::DayCamera::SetIris&>(::cmd::DayCamera::_SetIris_default_instance_);
}
inline const ::cmd::DayCamera::SetIris& Root::set_iris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_iris)
  return _internal_set_iris();
}
inline ::cmd::DayCamera::SetIris* Root::unsafe_arena_release_set_iris() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_iris)
  if (cmd_case() == kSetIris) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_iris_;
    _impl_.cmd_.set_iris_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_iris(::cmd::DayCamera::SetIris* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_iris();
    _impl_.cmd_.set_iris_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_iris)
}
inline ::cmd::DayCamera::SetIris* Root::_internal_mutable_set_iris() {
  if (cmd_case() != kSetIris) {
    clear_cmd();
    set_has_set_iris();
    _impl_.cmd_.set_iris_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetIris>(GetArena());
  }
  return _impl_.cmd_.set_iris_;
}
inline ::cmd::DayCamera::SetIris* Root::mutable_set_iris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetIris* _msg = _internal_mutable_set_iris();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_iris)
  return _msg;
}

// .cmd.DayCamera.SetInfraRedFilter set_infra_red_filter = 4;
inline bool Root::has_set_infra_red_filter() const {
  return cmd_case() == kSetInfraRedFilter;
}
inline bool Root::_internal_has_set_infra_red_filter() const {
  return cmd_case() == kSetInfraRedFilter;
}
inline void Root::set_has_set_infra_red_filter() {
  _impl_._oneof_case_[0] = kSetInfraRedFilter;
}
inline void Root::clear_set_infra_red_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetInfraRedFilter) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_infra_red_filter_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_infra_red_filter_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetInfraRedFilter* Root::release_set_infra_red_filter() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_infra_red_filter)
  if (cmd_case() == kSetInfraRedFilter) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_infra_red_filter_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_infra_red_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetInfraRedFilter& Root::_internal_set_infra_red_filter() const {
  return cmd_case() == kSetInfraRedFilter ? *_impl_.cmd_.set_infra_red_filter_ : reinterpret_cast<::cmd::DayCamera::SetInfraRedFilter&>(::cmd::DayCamera::_SetInfraRedFilter_default_instance_);
}
inline const ::cmd::DayCamera::SetInfraRedFilter& Root::set_infra_red_filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_infra_red_filter)
  return _internal_set_infra_red_filter();
}
inline ::cmd::DayCamera::SetInfraRedFilter* Root::unsafe_arena_release_set_infra_red_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_infra_red_filter)
  if (cmd_case() == kSetInfraRedFilter) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_infra_red_filter_;
    _impl_.cmd_.set_infra_red_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_infra_red_filter(::cmd::DayCamera::SetInfraRedFilter* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_infra_red_filter();
    _impl_.cmd_.set_infra_red_filter_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_infra_red_filter)
}
inline ::cmd::DayCamera::SetInfraRedFilter* Root::_internal_mutable_set_infra_red_filter() {
  if (cmd_case() != kSetInfraRedFilter) {
    clear_cmd();
    set_has_set_infra_red_filter();
    _impl_.cmd_.set_infra_red_filter_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetInfraRedFilter>(GetArena());
  }
  return _impl_.cmd_.set_infra_red_filter_;
}
inline ::cmd::DayCamera::SetInfraRedFilter* Root::mutable_set_infra_red_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetInfraRedFilter* _msg = _internal_mutable_set_infra_red_filter();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_infra_red_filter)
  return _msg;
}

// .cmd.DayCamera.Start start = 5;
inline bool Root::has_start() const {
  return cmd_case() == kStart;
}
inline bool Root::_internal_has_start() const {
  return cmd_case() == kStart;
}
inline void Root::set_has_start() {
  _impl_._oneof_case_[0] = kStart;
}
inline void Root::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStart) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.start_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.start_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Start* Root::release_start() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Start& Root::_internal_start() const {
  return cmd_case() == kStart ? *_impl_.cmd_.start_ : reinterpret_cast<::cmd::DayCamera::Start&>(::cmd::DayCamera::_Start_default_instance_);
}
inline const ::cmd::DayCamera::Start& Root::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.start)
  return _internal_start();
}
inline ::cmd::DayCamera::Start* Root::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_start(::cmd::DayCamera::Start* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_start();
    _impl_.cmd_.start_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.start)
}
inline ::cmd::DayCamera::Start* Root::_internal_mutable_start() {
  if (cmd_case() != kStart) {
    clear_cmd();
    set_has_start();
    _impl_.cmd_.start_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Start>(GetArena());
  }
  return _impl_.cmd_.start_;
}
inline ::cmd::DayCamera::Start* Root::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Start* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.start)
  return _msg;
}

// .cmd.DayCamera.Stop stop = 6;
inline bool Root::has_stop() const {
  return cmd_case() == kStop;
}
inline bool Root::_internal_has_stop() const {
  return cmd_case() == kStop;
}
inline void Root::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void Root::clear_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStop) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.stop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.stop_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Stop* Root::release_stop() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Stop& Root::_internal_stop() const {
  return cmd_case() == kStop ? *_impl_.cmd_.stop_ : reinterpret_cast<::cmd::DayCamera::Stop&>(::cmd::DayCamera::_Stop_default_instance_);
}
inline const ::cmd::DayCamera::Stop& Root::stop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.stop)
  return _internal_stop();
}
inline ::cmd::DayCamera::Stop* Root::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_stop(::cmd::DayCamera::Stop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_stop();
    _impl_.cmd_.stop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.stop)
}
inline ::cmd::DayCamera::Stop* Root::_internal_mutable_stop() {
  if (cmd_case() != kStop) {
    clear_cmd();
    set_has_stop();
    _impl_.cmd_.stop_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Stop>(GetArena());
  }
  return _impl_.cmd_.stop_;
}
inline ::cmd::DayCamera::Stop* Root::mutable_stop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Stop* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.stop)
  return _msg;
}

// .cmd.DayCamera.Photo photo = 7;
inline bool Root::has_photo() const {
  return cmd_case() == kPhoto;
}
inline bool Root::_internal_has_photo() const {
  return cmd_case() == kPhoto;
}
inline void Root::set_has_photo() {
  _impl_._oneof_case_[0] = kPhoto;
}
inline void Root::clear_photo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kPhoto) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.photo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.photo_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Photo* Root::release_photo() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.photo)
  if (cmd_case() == kPhoto) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.photo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.photo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Photo& Root::_internal_photo() const {
  return cmd_case() == kPhoto ? *_impl_.cmd_.photo_ : reinterpret_cast<::cmd::DayCamera::Photo&>(::cmd::DayCamera::_Photo_default_instance_);
}
inline const ::cmd::DayCamera::Photo& Root::photo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.photo)
  return _internal_photo();
}
inline ::cmd::DayCamera::Photo* Root::unsafe_arena_release_photo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.photo)
  if (cmd_case() == kPhoto) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.photo_;
    _impl_.cmd_.photo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_photo(::cmd::DayCamera::Photo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_photo();
    _impl_.cmd_.photo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.photo)
}
inline ::cmd::DayCamera::Photo* Root::_internal_mutable_photo() {
  if (cmd_case() != kPhoto) {
    clear_cmd();
    set_has_photo();
    _impl_.cmd_.photo_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Photo>(GetArena());
  }
  return _impl_.cmd_.photo_;
}
inline ::cmd::DayCamera::Photo* Root::mutable_photo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Photo* _msg = _internal_mutable_photo();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.photo)
  return _msg;
}

// .cmd.DayCamera.SetAutoIris set_auto_iris = 8;
inline bool Root::has_set_auto_iris() const {
  return cmd_case() == kSetAutoIris;
}
inline bool Root::_internal_has_set_auto_iris() const {
  return cmd_case() == kSetAutoIris;
}
inline void Root::set_has_set_auto_iris() {
  _impl_._oneof_case_[0] = kSetAutoIris;
}
inline void Root::clear_set_auto_iris() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetAutoIris) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_auto_iris_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_auto_iris_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetAutoIris* Root::release_set_auto_iris() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_auto_iris)
  if (cmd_case() == kSetAutoIris) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_auto_iris_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_auto_iris_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetAutoIris& Root::_internal_set_auto_iris() const {
  return cmd_case() == kSetAutoIris ? *_impl_.cmd_.set_auto_iris_ : reinterpret_cast<::cmd::DayCamera::SetAutoIris&>(::cmd::DayCamera::_SetAutoIris_default_instance_);
}
inline const ::cmd::DayCamera::SetAutoIris& Root::set_auto_iris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_auto_iris)
  return _internal_set_auto_iris();
}
inline ::cmd::DayCamera::SetAutoIris* Root::unsafe_arena_release_set_auto_iris() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_auto_iris)
  if (cmd_case() == kSetAutoIris) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_auto_iris_;
    _impl_.cmd_.set_auto_iris_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_auto_iris(::cmd::DayCamera::SetAutoIris* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_auto_iris();
    _impl_.cmd_.set_auto_iris_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_auto_iris)
}
inline ::cmd::DayCamera::SetAutoIris* Root::_internal_mutable_set_auto_iris() {
  if (cmd_case() != kSetAutoIris) {
    clear_cmd();
    set_has_set_auto_iris();
    _impl_.cmd_.set_auto_iris_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetAutoIris>(GetArena());
  }
  return _impl_.cmd_.set_auto_iris_;
}
inline ::cmd::DayCamera::SetAutoIris* Root::mutable_set_auto_iris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetAutoIris* _msg = _internal_mutable_set_auto_iris();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_auto_iris)
  return _msg;
}

// .cmd.DayCamera.HaltAll halt_all = 9;
inline bool Root::has_halt_all() const {
  return cmd_case() == kHaltAll;
}
inline bool Root::_internal_has_halt_all() const {
  return cmd_case() == kHaltAll;
}
inline void Root::set_has_halt_all() {
  _impl_._oneof_case_[0] = kHaltAll;
}
inline void Root::clear_halt_all() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kHaltAll) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.halt_all_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.halt_all_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::HaltAll* Root::release_halt_all() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.halt_all)
  if (cmd_case() == kHaltAll) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_all_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.halt_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::HaltAll& Root::_internal_halt_all() const {
  return cmd_case() == kHaltAll ? *_impl_.cmd_.halt_all_ : reinterpret_cast<::cmd::DayCamera::HaltAll&>(::cmd::DayCamera::_HaltAll_default_instance_);
}
inline const ::cmd::DayCamera::HaltAll& Root::halt_all() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.halt_all)
  return _internal_halt_all();
}
inline ::cmd::DayCamera::HaltAll* Root::unsafe_arena_release_halt_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.halt_all)
  if (cmd_case() == kHaltAll) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_all_;
    _impl_.cmd_.halt_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_halt_all(::cmd::DayCamera::HaltAll* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_halt_all();
    _impl_.cmd_.halt_all_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.halt_all)
}
inline ::cmd::DayCamera::HaltAll* Root::_internal_mutable_halt_all() {
  if (cmd_case() != kHaltAll) {
    clear_cmd();
    set_has_halt_all();
    _impl_.cmd_.halt_all_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::HaltAll>(GetArena());
  }
  return _impl_.cmd_.halt_all_;
}
inline ::cmd::DayCamera::HaltAll* Root::mutable_halt_all() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::HaltAll* _msg = _internal_mutable_halt_all();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.halt_all)
  return _msg;
}

// .cmd.DayCamera.SetFxMode set_fx_mode = 10;
inline bool Root::has_set_fx_mode() const {
  return cmd_case() == kSetFxMode;
}
inline bool Root::_internal_has_set_fx_mode() const {
  return cmd_case() == kSetFxMode;
}
inline void Root::set_has_set_fx_mode() {
  _impl_._oneof_case_[0] = kSetFxMode;
}
inline void Root::clear_set_fx_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetFxMode) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_fx_mode_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_fx_mode_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetFxMode* Root::release_set_fx_mode() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_fx_mode)
  if (cmd_case() == kSetFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_fx_mode_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetFxMode& Root::_internal_set_fx_mode() const {
  return cmd_case() == kSetFxMode ? *_impl_.cmd_.set_fx_mode_ : reinterpret_cast<::cmd::DayCamera::SetFxMode&>(::cmd::DayCamera::_SetFxMode_default_instance_);
}
inline const ::cmd::DayCamera::SetFxMode& Root::set_fx_mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_fx_mode)
  return _internal_set_fx_mode();
}
inline ::cmd::DayCamera::SetFxMode* Root::unsafe_arena_release_set_fx_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_fx_mode)
  if (cmd_case() == kSetFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_fx_mode_;
    _impl_.cmd_.set_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_fx_mode(::cmd::DayCamera::SetFxMode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_fx_mode();
    _impl_.cmd_.set_fx_mode_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_fx_mode)
}
inline ::cmd::DayCamera::SetFxMode* Root::_internal_mutable_set_fx_mode() {
  if (cmd_case() != kSetFxMode) {
    clear_cmd();
    set_has_set_fx_mode();
    _impl_.cmd_.set_fx_mode_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetFxMode>(GetArena());
  }
  return _impl_.cmd_.set_fx_mode_;
}
inline ::cmd::DayCamera::SetFxMode* Root::mutable_set_fx_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetFxMode* _msg = _internal_mutable_set_fx_mode();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_fx_mode)
  return _msg;
}

// .cmd.DayCamera.NextFxMode next_fx_mode = 11;
inline bool Root::has_next_fx_mode() const {
  return cmd_case() == kNextFxMode;
}
inline bool Root::_internal_has_next_fx_mode() const {
  return cmd_case() == kNextFxMode;
}
inline void Root::set_has_next_fx_mode() {
  _impl_._oneof_case_[0] = kNextFxMode;
}
inline void Root::clear_next_fx_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kNextFxMode) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.next_fx_mode_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.next_fx_mode_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::NextFxMode* Root::release_next_fx_mode() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.next_fx_mode)
  if (cmd_case() == kNextFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.next_fx_mode_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.next_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::NextFxMode& Root::_internal_next_fx_mode() const {
  return cmd_case() == kNextFxMode ? *_impl_.cmd_.next_fx_mode_ : reinterpret_cast<::cmd::DayCamera::NextFxMode&>(::cmd::DayCamera::_NextFxMode_default_instance_);
}
inline const ::cmd::DayCamera::NextFxMode& Root::next_fx_mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.next_fx_mode)
  return _internal_next_fx_mode();
}
inline ::cmd::DayCamera::NextFxMode* Root::unsafe_arena_release_next_fx_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.next_fx_mode)
  if (cmd_case() == kNextFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.next_fx_mode_;
    _impl_.cmd_.next_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_next_fx_mode(::cmd::DayCamera::NextFxMode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_next_fx_mode();
    _impl_.cmd_.next_fx_mode_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.next_fx_mode)
}
inline ::cmd::DayCamera::NextFxMode* Root::_internal_mutable_next_fx_mode() {
  if (cmd_case() != kNextFxMode) {
    clear_cmd();
    set_has_next_fx_mode();
    _impl_.cmd_.next_fx_mode_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::NextFxMode>(GetArena());
  }
  return _impl_.cmd_.next_fx_mode_;
}
inline ::cmd::DayCamera::NextFxMode* Root::mutable_next_fx_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::NextFxMode* _msg = _internal_mutable_next_fx_mode();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.next_fx_mode)
  return _msg;
}

// .cmd.DayCamera.PrevFxMode prev_fx_mode = 12;
inline bool Root::has_prev_fx_mode() const {
  return cmd_case() == kPrevFxMode;
}
inline bool Root::_internal_has_prev_fx_mode() const {
  return cmd_case() == kPrevFxMode;
}
inline void Root::set_has_prev_fx_mode() {
  _impl_._oneof_case_[0] = kPrevFxMode;
}
inline void Root::clear_prev_fx_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kPrevFxMode) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.prev_fx_mode_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.prev_fx_mode_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::PrevFxMode* Root::release_prev_fx_mode() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.prev_fx_mode)
  if (cmd_case() == kPrevFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.prev_fx_mode_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.prev_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::PrevFxMode& Root::_internal_prev_fx_mode() const {
  return cmd_case() == kPrevFxMode ? *_impl_.cmd_.prev_fx_mode_ : reinterpret_cast<::cmd::DayCamera::PrevFxMode&>(::cmd::DayCamera::_PrevFxMode_default_instance_);
}
inline const ::cmd::DayCamera::PrevFxMode& Root::prev_fx_mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.prev_fx_mode)
  return _internal_prev_fx_mode();
}
inline ::cmd::DayCamera::PrevFxMode* Root::unsafe_arena_release_prev_fx_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.prev_fx_mode)
  if (cmd_case() == kPrevFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.prev_fx_mode_;
    _impl_.cmd_.prev_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_prev_fx_mode(::cmd::DayCamera::PrevFxMode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_prev_fx_mode();
    _impl_.cmd_.prev_fx_mode_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.prev_fx_mode)
}
inline ::cmd::DayCamera::PrevFxMode* Root::_internal_mutable_prev_fx_mode() {
  if (cmd_case() != kPrevFxMode) {
    clear_cmd();
    set_has_prev_fx_mode();
    _impl_.cmd_.prev_fx_mode_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::PrevFxMode>(GetArena());
  }
  return _impl_.cmd_.prev_fx_mode_;
}
inline ::cmd::DayCamera::PrevFxMode* Root::mutable_prev_fx_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::PrevFxMode* _msg = _internal_mutable_prev_fx_mode();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.prev_fx_mode)
  return _msg;
}

// .cmd.DayCamera.GetMeteo get_meteo = 13;
inline bool Root::has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline bool Root::_internal_has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline void Root::set_has_get_meteo() {
  _impl_._oneof_case_[0] = kGetMeteo;
}
inline void Root::clear_get_meteo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kGetMeteo) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.get_meteo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.get_meteo_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::GetMeteo* Root::release_get_meteo() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::GetMeteo& Root::_internal_get_meteo() const {
  return cmd_case() == kGetMeteo ? *_impl_.cmd_.get_meteo_ : reinterpret_cast<::cmd::DayCamera::GetMeteo&>(::cmd::DayCamera::_GetMeteo_default_instance_);
}
inline const ::cmd::DayCamera::GetMeteo& Root::get_meteo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.get_meteo)
  return _internal_get_meteo();
}
inline ::cmd::DayCamera::GetMeteo* Root::unsafe_arena_release_get_meteo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_get_meteo(::cmd::DayCamera::GetMeteo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.get_meteo)
}
inline ::cmd::DayCamera::GetMeteo* Root::_internal_mutable_get_meteo() {
  if (cmd_case() != kGetMeteo) {
    clear_cmd();
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::GetMeteo>(GetArena());
  }
  return _impl_.cmd_.get_meteo_;
}
inline ::cmd::DayCamera::GetMeteo* Root::mutable_get_meteo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::GetMeteo* _msg = _internal_mutable_get_meteo();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.get_meteo)
  return _msg;
}

// .cmd.DayCamera.RefreshFxMode refresh_fx_mode = 14;
inline bool Root::has_refresh_fx_mode() const {
  return cmd_case() == kRefreshFxMode;
}
inline bool Root::_internal_has_refresh_fx_mode() const {
  return cmd_case() == kRefreshFxMode;
}
inline void Root::set_has_refresh_fx_mode() {
  _impl_._oneof_case_[0] = kRefreshFxMode;
}
inline void Root::clear_refresh_fx_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kRefreshFxMode) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.refresh_fx_mode_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.refresh_fx_mode_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::RefreshFxMode* Root::release_refresh_fx_mode() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.refresh_fx_mode)
  if (cmd_case() == kRefreshFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.refresh_fx_mode_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.refresh_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::RefreshFxMode& Root::_internal_refresh_fx_mode() const {
  return cmd_case() == kRefreshFxMode ? *_impl_.cmd_.refresh_fx_mode_ : reinterpret_cast<::cmd::DayCamera::RefreshFxMode&>(::cmd::DayCamera::_RefreshFxMode_default_instance_);
}
inline const ::cmd::DayCamera::RefreshFxMode& Root::refresh_fx_mode() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.refresh_fx_mode)
  return _internal_refresh_fx_mode();
}
inline ::cmd::DayCamera::RefreshFxMode* Root::unsafe_arena_release_refresh_fx_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.refresh_fx_mode)
  if (cmd_case() == kRefreshFxMode) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.refresh_fx_mode_;
    _impl_.cmd_.refresh_fx_mode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_refresh_fx_mode(::cmd::DayCamera::RefreshFxMode* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_refresh_fx_mode();
    _impl_.cmd_.refresh_fx_mode_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.refresh_fx_mode)
}
inline ::cmd::DayCamera::RefreshFxMode* Root::_internal_mutable_refresh_fx_mode() {
  if (cmd_case() != kRefreshFxMode) {
    clear_cmd();
    set_has_refresh_fx_mode();
    _impl_.cmd_.refresh_fx_mode_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::RefreshFxMode>(GetArena());
  }
  return _impl_.cmd_.refresh_fx_mode_;
}
inline ::cmd::DayCamera::RefreshFxMode* Root::mutable_refresh_fx_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::RefreshFxMode* _msg = _internal_mutable_refresh_fx_mode();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.refresh_fx_mode)
  return _msg;
}

// .cmd.DayCamera.SetDigitalZoomLevel set_digital_zoom_level = 15;
inline bool Root::has_set_digital_zoom_level() const {
  return cmd_case() == kSetDigitalZoomLevel;
}
inline bool Root::_internal_has_set_digital_zoom_level() const {
  return cmd_case() == kSetDigitalZoomLevel;
}
inline void Root::set_has_set_digital_zoom_level() {
  _impl_._oneof_case_[0] = kSetDigitalZoomLevel;
}
inline void Root::clear_set_digital_zoom_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetDigitalZoomLevel) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_digital_zoom_level_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_digital_zoom_level_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetDigitalZoomLevel* Root::release_set_digital_zoom_level() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_digital_zoom_level)
  if (cmd_case() == kSetDigitalZoomLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_digital_zoom_level_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_digital_zoom_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetDigitalZoomLevel& Root::_internal_set_digital_zoom_level() const {
  return cmd_case() == kSetDigitalZoomLevel ? *_impl_.cmd_.set_digital_zoom_level_ : reinterpret_cast<::cmd::DayCamera::SetDigitalZoomLevel&>(::cmd::DayCamera::_SetDigitalZoomLevel_default_instance_);
}
inline const ::cmd::DayCamera::SetDigitalZoomLevel& Root::set_digital_zoom_level() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_digital_zoom_level)
  return _internal_set_digital_zoom_level();
}
inline ::cmd::DayCamera::SetDigitalZoomLevel* Root::unsafe_arena_release_set_digital_zoom_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_digital_zoom_level)
  if (cmd_case() == kSetDigitalZoomLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_digital_zoom_level_;
    _impl_.cmd_.set_digital_zoom_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_digital_zoom_level(::cmd::DayCamera::SetDigitalZoomLevel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_digital_zoom_level();
    _impl_.cmd_.set_digital_zoom_level_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_digital_zoom_level)
}
inline ::cmd::DayCamera::SetDigitalZoomLevel* Root::_internal_mutable_set_digital_zoom_level() {
  if (cmd_case() != kSetDigitalZoomLevel) {
    clear_cmd();
    set_has_set_digital_zoom_level();
    _impl_.cmd_.set_digital_zoom_level_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetDigitalZoomLevel>(GetArena());
  }
  return _impl_.cmd_.set_digital_zoom_level_;
}
inline ::cmd::DayCamera::SetDigitalZoomLevel* Root::mutable_set_digital_zoom_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetDigitalZoomLevel* _msg = _internal_mutable_set_digital_zoom_level();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_digital_zoom_level)
  return _msg;
}

// .cmd.DayCamera.SetClaheLevel set_clahe_level = 16;
inline bool Root::has_set_clahe_level() const {
  return cmd_case() == kSetClaheLevel;
}
inline bool Root::_internal_has_set_clahe_level() const {
  return cmd_case() == kSetClaheLevel;
}
inline void Root::set_has_set_clahe_level() {
  _impl_._oneof_case_[0] = kSetClaheLevel;
}
inline void Root::clear_set_clahe_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetClaheLevel) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_clahe_level_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_clahe_level_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetClaheLevel* Root::release_set_clahe_level() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.set_clahe_level)
  if (cmd_case() == kSetClaheLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_clahe_level_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_clahe_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetClaheLevel& Root::_internal_set_clahe_level() const {
  return cmd_case() == kSetClaheLevel ? *_impl_.cmd_.set_clahe_level_ : reinterpret_cast<::cmd::DayCamera::SetClaheLevel&>(::cmd::DayCamera::_SetClaheLevel_default_instance_);
}
inline const ::cmd::DayCamera::SetClaheLevel& Root::set_clahe_level() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.set_clahe_level)
  return _internal_set_clahe_level();
}
inline ::cmd::DayCamera::SetClaheLevel* Root::unsafe_arena_release_set_clahe_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.set_clahe_level)
  if (cmd_case() == kSetClaheLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_clahe_level_;
    _impl_.cmd_.set_clahe_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_clahe_level(::cmd::DayCamera::SetClaheLevel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_clahe_level();
    _impl_.cmd_.set_clahe_level_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.set_clahe_level)
}
inline ::cmd::DayCamera::SetClaheLevel* Root::_internal_mutable_set_clahe_level() {
  if (cmd_case() != kSetClaheLevel) {
    clear_cmd();
    set_has_set_clahe_level();
    _impl_.cmd_.set_clahe_level_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetClaheLevel>(GetArena());
  }
  return _impl_.cmd_.set_clahe_level_;
}
inline ::cmd::DayCamera::SetClaheLevel* Root::mutable_set_clahe_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetClaheLevel* _msg = _internal_mutable_set_clahe_level();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.set_clahe_level)
  return _msg;
}

// .cmd.DayCamera.ShiftClaheLevel shift_clahe_level = 17;
inline bool Root::has_shift_clahe_level() const {
  return cmd_case() == kShiftClaheLevel;
}
inline bool Root::_internal_has_shift_clahe_level() const {
  return cmd_case() == kShiftClaheLevel;
}
inline void Root::set_has_shift_clahe_level() {
  _impl_._oneof_case_[0] = kShiftClaheLevel;
}
inline void Root::clear_shift_clahe_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShiftClaheLevel) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.shift_clahe_level_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.shift_clahe_level_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::ShiftClaheLevel* Root::release_shift_clahe_level() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.shift_clahe_level)
  if (cmd_case() == kShiftClaheLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.shift_clahe_level_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.shift_clahe_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::ShiftClaheLevel& Root::_internal_shift_clahe_level() const {
  return cmd_case() == kShiftClaheLevel ? *_impl_.cmd_.shift_clahe_level_ : reinterpret_cast<::cmd::DayCamera::ShiftClaheLevel&>(::cmd::DayCamera::_ShiftClaheLevel_default_instance_);
}
inline const ::cmd::DayCamera::ShiftClaheLevel& Root::shift_clahe_level() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.shift_clahe_level)
  return _internal_shift_clahe_level();
}
inline ::cmd::DayCamera::ShiftClaheLevel* Root::unsafe_arena_release_shift_clahe_level() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.shift_clahe_level)
  if (cmd_case() == kShiftClaheLevel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.shift_clahe_level_;
    _impl_.cmd_.shift_clahe_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_shift_clahe_level(::cmd::DayCamera::ShiftClaheLevel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_shift_clahe_level();
    _impl_.cmd_.shift_clahe_level_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.shift_clahe_level)
}
inline ::cmd::DayCamera::ShiftClaheLevel* Root::_internal_mutable_shift_clahe_level() {
  if (cmd_case() != kShiftClaheLevel) {
    clear_cmd();
    set_has_shift_clahe_level();
    _impl_.cmd_.shift_clahe_level_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::ShiftClaheLevel>(GetArena());
  }
  return _impl_.cmd_.shift_clahe_level_;
}
inline ::cmd::DayCamera::ShiftClaheLevel* Root::mutable_shift_clahe_level() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::ShiftClaheLevel* _msg = _internal_mutable_shift_clahe_level();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.shift_clahe_level)
  return _msg;
}

// .cmd.DayCamera.FocusROI focus_roi = 18;
inline bool Root::has_focus_roi() const {
  return cmd_case() == kFocusRoi;
}
inline bool Root::_internal_has_focus_roi() const {
  return cmd_case() == kFocusRoi;
}
inline void Root::set_has_focus_roi() {
  _impl_._oneof_case_[0] = kFocusRoi;
}
inline void Root::clear_focus_roi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kFocusRoi) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.focus_roi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.focus_roi_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::FocusROI* Root::release_focus_roi() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.focus_roi)
  if (cmd_case() == kFocusRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.focus_roi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.focus_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::FocusROI& Root::_internal_focus_roi() const {
  return cmd_case() == kFocusRoi ? *_impl_.cmd_.focus_roi_ : reinterpret_cast<::cmd::DayCamera::FocusROI&>(::cmd::DayCamera::_FocusROI_default_instance_);
}
inline const ::cmd::DayCamera::FocusROI& Root::focus_roi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.focus_roi)
  return _internal_focus_roi();
}
inline ::cmd::DayCamera::FocusROI* Root::unsafe_arena_release_focus_roi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.focus_roi)
  if (cmd_case() == kFocusRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.focus_roi_;
    _impl_.cmd_.focus_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_focus_roi(::cmd::DayCamera::FocusROI* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_focus_roi();
    _impl_.cmd_.focus_roi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.focus_roi)
}
inline ::cmd::DayCamera::FocusROI* Root::_internal_mutable_focus_roi() {
  if (cmd_case() != kFocusRoi) {
    clear_cmd();
    set_has_focus_roi();
    _impl_.cmd_.focus_roi_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::FocusROI>(GetArena());
  }
  return _impl_.cmd_.focus_roi_;
}
inline ::cmd::DayCamera::FocusROI* Root::mutable_focus_roi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::FocusROI* _msg = _internal_mutable_focus_roi();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.focus_roi)
  return _msg;
}

// .cmd.DayCamera.TrackROI track_roi = 19;
inline bool Root::has_track_roi() const {
  return cmd_case() == kTrackRoi;
}
inline bool Root::_internal_has_track_roi() const {
  return cmd_case() == kTrackRoi;
}
inline void Root::set_has_track_roi() {
  _impl_._oneof_case_[0] = kTrackRoi;
}
inline void Root::clear_track_roi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kTrackRoi) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.track_roi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.track_roi_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::TrackROI* Root::release_track_roi() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.track_roi)
  if (cmd_case() == kTrackRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.track_roi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.track_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::TrackROI& Root::_internal_track_roi() const {
  return cmd_case() == kTrackRoi ? *_impl_.cmd_.track_roi_ : reinterpret_cast<::cmd::DayCamera::TrackROI&>(::cmd::DayCamera::_TrackROI_default_instance_);
}
inline const ::cmd::DayCamera::TrackROI& Root::track_roi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.track_roi)
  return _internal_track_roi();
}
inline ::cmd::DayCamera::TrackROI* Root::unsafe_arena_release_track_roi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.track_roi)
  if (cmd_case() == kTrackRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.track_roi_;
    _impl_.cmd_.track_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_track_roi(::cmd::DayCamera::TrackROI* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_track_roi();
    _impl_.cmd_.track_roi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.track_roi)
}
inline ::cmd::DayCamera::TrackROI* Root::_internal_mutable_track_roi() {
  if (cmd_case() != kTrackRoi) {
    clear_cmd();
    set_has_track_roi();
    _impl_.cmd_.track_roi_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::TrackROI>(GetArena());
  }
  return _impl_.cmd_.track_roi_;
}
inline ::cmd::DayCamera::TrackROI* Root::mutable_track_roi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::TrackROI* _msg = _internal_mutable_track_roi();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.track_roi)
  return _msg;
}

// .cmd.DayCamera.ZoomROI zoom_roi = 20;
inline bool Root::has_zoom_roi() const {
  return cmd_case() == kZoomRoi;
}
inline bool Root::_internal_has_zoom_roi() const {
  return cmd_case() == kZoomRoi;
}
inline void Root::set_has_zoom_roi() {
  _impl_._oneof_case_[0] = kZoomRoi;
}
inline void Root::clear_zoom_roi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kZoomRoi) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.zoom_roi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.zoom_roi_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::ZoomROI* Root::release_zoom_roi() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Root.zoom_roi)
  if (cmd_case() == kZoomRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.zoom_roi_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.zoom_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::ZoomROI& Root::_internal_zoom_roi() const {
  return cmd_case() == kZoomRoi ? *_impl_.cmd_.zoom_roi_ : reinterpret_cast<::cmd::DayCamera::ZoomROI&>(::cmd::DayCamera::_ZoomROI_default_instance_);
}
inline const ::cmd::DayCamera::ZoomROI& Root::zoom_roi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Root.zoom_roi)
  return _internal_zoom_roi();
}
inline ::cmd::DayCamera::ZoomROI* Root::unsafe_arena_release_zoom_roi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Root.zoom_roi)
  if (cmd_case() == kZoomRoi) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.zoom_roi_;
    _impl_.cmd_.zoom_roi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_zoom_roi(::cmd::DayCamera::ZoomROI* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_zoom_roi();
    _impl_.cmd_.zoom_roi_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Root.zoom_roi)
}
inline ::cmd::DayCamera::ZoomROI* Root::_internal_mutable_zoom_roi() {
  if (cmd_case() != kZoomRoi) {
    clear_cmd();
    set_has_zoom_roi();
    _impl_.cmd_.zoom_roi_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::ZoomROI>(GetArena());
  }
  return _impl_.cmd_.zoom_roi_;
}
inline ::cmd::DayCamera::ZoomROI* Root::mutable_zoom_roi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::ZoomROI* _msg = _internal_mutable_zoom_roi();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Root.zoom_roi)
  return _msg;
}

inline bool Root::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Root::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Root::CmdCase Root::cmd_case() const {
  return Root::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetPos

// -------------------------------------------------------------------

// NextFxMode

// -------------------------------------------------------------------

// PrevFxMode

// -------------------------------------------------------------------

// RefreshFxMode

// -------------------------------------------------------------------

// HaltAll

// -------------------------------------------------------------------

// SetFxMode

// .ser.JonGuiDataFxModeDay mode = 1;
inline void SetFxMode::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = 0;
}
inline ::ser::JonGuiDataFxModeDay SetFxMode::mode() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetFxMode.mode)
  return _internal_mode();
}
inline void SetFxMode::set_mode(::ser::JonGuiDataFxModeDay value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetFxMode.mode)
}
inline ::ser::JonGuiDataFxModeDay SetFxMode::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ser::JonGuiDataFxModeDay>(_impl_.mode_);
}
inline void SetFxMode::_internal_set_mode(::ser::JonGuiDataFxModeDay value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// SetDigitalZoomLevel

// double value = 1;
inline void SetDigitalZoomLevel::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetDigitalZoomLevel::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetDigitalZoomLevel.value)
  return _internal_value();
}
inline void SetDigitalZoomLevel::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetDigitalZoomLevel.value)
}
inline double SetDigitalZoomLevel::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetDigitalZoomLevel::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Focus

// .cmd.DayCamera.SetValue set_value = 1;
inline bool Focus::has_set_value() const {
  return cmd_case() == kSetValue;
}
inline bool Focus::_internal_has_set_value() const {
  return cmd_case() == kSetValue;
}
inline void Focus::set_has_set_value() {
  _impl_._oneof_case_[0] = kSetValue;
}
inline void Focus::clear_set_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetValue) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_value_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_value_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetValue* Focus::release_set_value() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.set_value)
  if (cmd_case() == kSetValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetValue& Focus::_internal_set_value() const {
  return cmd_case() == kSetValue ? *_impl_.cmd_.set_value_ : reinterpret_cast<::cmd::DayCamera::SetValue&>(::cmd::DayCamera::_SetValue_default_instance_);
}
inline const ::cmd::DayCamera::SetValue& Focus::set_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.set_value)
  return _internal_set_value();
}
inline ::cmd::DayCamera::SetValue* Focus::unsafe_arena_release_set_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.set_value)
  if (cmd_case() == kSetValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_value_;
    _impl_.cmd_.set_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_set_value(::cmd::DayCamera::SetValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_value();
    _impl_.cmd_.set_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.set_value)
}
inline ::cmd::DayCamera::SetValue* Focus::_internal_mutable_set_value() {
  if (cmd_case() != kSetValue) {
    clear_cmd();
    set_has_set_value();
    _impl_.cmd_.set_value_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetValue>(GetArena());
  }
  return _impl_.cmd_.set_value_;
}
inline ::cmd::DayCamera::SetValue* Focus::mutable_set_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetValue* _msg = _internal_mutable_set_value();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.set_value)
  return _msg;
}

// .cmd.DayCamera.Move move = 2;
inline bool Focus::has_move() const {
  return cmd_case() == kMove;
}
inline bool Focus::_internal_has_move() const {
  return cmd_case() == kMove;
}
inline void Focus::set_has_move() {
  _impl_._oneof_case_[0] = kMove;
}
inline void Focus::clear_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kMove) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.move_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.move_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Move* Focus::release_move() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.move)
  if (cmd_case() == kMove) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.move_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Move& Focus::_internal_move() const {
  return cmd_case() == kMove ? *_impl_.cmd_.move_ : reinterpret_cast<::cmd::DayCamera::Move&>(::cmd::DayCamera::_Move_default_instance_);
}
inline const ::cmd::DayCamera::Move& Focus::move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.move)
  return _internal_move();
}
inline ::cmd::DayCamera::Move* Focus::unsafe_arena_release_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.move)
  if (cmd_case() == kMove) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.move_;
    _impl_.cmd_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_move(::cmd::DayCamera::Move* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_move();
    _impl_.cmd_.move_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.move)
}
inline ::cmd::DayCamera::Move* Focus::_internal_mutable_move() {
  if (cmd_case() != kMove) {
    clear_cmd();
    set_has_move();
    _impl_.cmd_.move_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Move>(GetArena());
  }
  return _impl_.cmd_.move_;
}
inline ::cmd::DayCamera::Move* Focus::mutable_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Move* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.move)
  return _msg;
}

// .cmd.DayCamera.Halt halt = 3;
inline bool Focus::has_halt() const {
  return cmd_case() == kHalt;
}
inline bool Focus::_internal_has_halt() const {
  return cmd_case() == kHalt;
}
inline void Focus::set_has_halt() {
  _impl_._oneof_case_[0] = kHalt;
}
inline void Focus::clear_halt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kHalt) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.halt_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.halt_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Halt* Focus::release_halt() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.halt)
  if (cmd_case() == kHalt) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.halt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Halt& Focus::_internal_halt() const {
  return cmd_case() == kHalt ? *_impl_.cmd_.halt_ : reinterpret_cast<::cmd::DayCamera::Halt&>(::cmd::DayCamera::_Halt_default_instance_);
}
inline const ::cmd::DayCamera::Halt& Focus::halt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.halt)
  return _internal_halt();
}
inline ::cmd::DayCamera::Halt* Focus::unsafe_arena_release_halt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.halt)
  if (cmd_case() == kHalt) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_;
    _impl_.cmd_.halt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_halt(::cmd::DayCamera::Halt* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_halt();
    _impl_.cmd_.halt_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.halt)
}
inline ::cmd::DayCamera::Halt* Focus::_internal_mutable_halt() {
  if (cmd_case() != kHalt) {
    clear_cmd();
    set_has_halt();
    _impl_.cmd_.halt_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Halt>(GetArena());
  }
  return _impl_.cmd_.halt_;
}
inline ::cmd::DayCamera::Halt* Focus::mutable_halt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Halt* _msg = _internal_mutable_halt();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.halt)
  return _msg;
}

// .cmd.DayCamera.Offset offset = 4;
inline bool Focus::has_offset() const {
  return cmd_case() == kOffset;
}
inline bool Focus::_internal_has_offset() const {
  return cmd_case() == kOffset;
}
inline void Focus::set_has_offset() {
  _impl_._oneof_case_[0] = kOffset;
}
inline void Focus::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kOffset) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.offset_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.offset_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Offset* Focus::release_offset() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.offset)
  if (cmd_case() == kOffset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.offset_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Offset& Focus::_internal_offset() const {
  return cmd_case() == kOffset ? *_impl_.cmd_.offset_ : reinterpret_cast<::cmd::DayCamera::Offset&>(::cmd::DayCamera::_Offset_default_instance_);
}
inline const ::cmd::DayCamera::Offset& Focus::offset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.offset)
  return _internal_offset();
}
inline ::cmd::DayCamera::Offset* Focus::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.offset)
  if (cmd_case() == kOffset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.offset_;
    _impl_.cmd_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_offset(::cmd::DayCamera::Offset* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_offset();
    _impl_.cmd_.offset_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.offset)
}
inline ::cmd::DayCamera::Offset* Focus::_internal_mutable_offset() {
  if (cmd_case() != kOffset) {
    clear_cmd();
    set_has_offset();
    _impl_.cmd_.offset_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Offset>(GetArena());
  }
  return _impl_.cmd_.offset_;
}
inline ::cmd::DayCamera::Offset* Focus::mutable_offset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Offset* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.offset)
  return _msg;
}

// .cmd.DayCamera.ResetFocus reset_focus = 5;
inline bool Focus::has_reset_focus() const {
  return cmd_case() == kResetFocus;
}
inline bool Focus::_internal_has_reset_focus() const {
  return cmd_case() == kResetFocus;
}
inline void Focus::set_has_reset_focus() {
  _impl_._oneof_case_[0] = kResetFocus;
}
inline void Focus::clear_reset_focus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kResetFocus) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.reset_focus_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.reset_focus_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::ResetFocus* Focus::release_reset_focus() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.reset_focus)
  if (cmd_case() == kResetFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_focus_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.reset_focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::ResetFocus& Focus::_internal_reset_focus() const {
  return cmd_case() == kResetFocus ? *_impl_.cmd_.reset_focus_ : reinterpret_cast<::cmd::DayCamera::ResetFocus&>(::cmd::DayCamera::_ResetFocus_default_instance_);
}
inline const ::cmd::DayCamera::ResetFocus& Focus::reset_focus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.reset_focus)
  return _internal_reset_focus();
}
inline ::cmd::DayCamera::ResetFocus* Focus::unsafe_arena_release_reset_focus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.reset_focus)
  if (cmd_case() == kResetFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_focus_;
    _impl_.cmd_.reset_focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_reset_focus(::cmd::DayCamera::ResetFocus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_reset_focus();
    _impl_.cmd_.reset_focus_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.reset_focus)
}
inline ::cmd::DayCamera::ResetFocus* Focus::_internal_mutable_reset_focus() {
  if (cmd_case() != kResetFocus) {
    clear_cmd();
    set_has_reset_focus();
    _impl_.cmd_.reset_focus_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::ResetFocus>(GetArena());
  }
  return _impl_.cmd_.reset_focus_;
}
inline ::cmd::DayCamera::ResetFocus* Focus::mutable_reset_focus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::ResetFocus* _msg = _internal_mutable_reset_focus();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.reset_focus)
  return _msg;
}

// .cmd.DayCamera.SaveToTableFocus save_to_table_focus = 6;
inline bool Focus::has_save_to_table_focus() const {
  return cmd_case() == kSaveToTableFocus;
}
inline bool Focus::_internal_has_save_to_table_focus() const {
  return cmd_case() == kSaveToTableFocus;
}
inline void Focus::set_has_save_to_table_focus() {
  _impl_._oneof_case_[0] = kSaveToTableFocus;
}
inline void Focus::clear_save_to_table_focus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSaveToTableFocus) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.save_to_table_focus_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.save_to_table_focus_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SaveToTableFocus* Focus::release_save_to_table_focus() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Focus.save_to_table_focus)
  if (cmd_case() == kSaveToTableFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_to_table_focus_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.save_to_table_focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SaveToTableFocus& Focus::_internal_save_to_table_focus() const {
  return cmd_case() == kSaveToTableFocus ? *_impl_.cmd_.save_to_table_focus_ : reinterpret_cast<::cmd::DayCamera::SaveToTableFocus&>(::cmd::DayCamera::_SaveToTableFocus_default_instance_);
}
inline const ::cmd::DayCamera::SaveToTableFocus& Focus::save_to_table_focus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Focus.save_to_table_focus)
  return _internal_save_to_table_focus();
}
inline ::cmd::DayCamera::SaveToTableFocus* Focus::unsafe_arena_release_save_to_table_focus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Focus.save_to_table_focus)
  if (cmd_case() == kSaveToTableFocus) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_to_table_focus_;
    _impl_.cmd_.save_to_table_focus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Focus::unsafe_arena_set_allocated_save_to_table_focus(::cmd::DayCamera::SaveToTableFocus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_save_to_table_focus();
    _impl_.cmd_.save_to_table_focus_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Focus.save_to_table_focus)
}
inline ::cmd::DayCamera::SaveToTableFocus* Focus::_internal_mutable_save_to_table_focus() {
  if (cmd_case() != kSaveToTableFocus) {
    clear_cmd();
    set_has_save_to_table_focus();
    _impl_.cmd_.save_to_table_focus_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SaveToTableFocus>(GetArena());
  }
  return _impl_.cmd_.save_to_table_focus_;
}
inline ::cmd::DayCamera::SaveToTableFocus* Focus::mutable_save_to_table_focus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SaveToTableFocus* _msg = _internal_mutable_save_to_table_focus();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Focus.save_to_table_focus)
  return _msg;
}

inline bool Focus::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Focus::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Focus::CmdCase Focus::cmd_case() const {
  return Focus::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Zoom

// .cmd.DayCamera.SetValue set_value = 1;
inline bool Zoom::has_set_value() const {
  return cmd_case() == kSetValue;
}
inline bool Zoom::_internal_has_set_value() const {
  return cmd_case() == kSetValue;
}
inline void Zoom::set_has_set_value() {
  _impl_._oneof_case_[0] = kSetValue;
}
inline void Zoom::clear_set_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetValue) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_value_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_value_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetValue* Zoom::release_set_value() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.set_value)
  if (cmd_case() == kSetValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetValue& Zoom::_internal_set_value() const {
  return cmd_case() == kSetValue ? *_impl_.cmd_.set_value_ : reinterpret_cast<::cmd::DayCamera::SetValue&>(::cmd::DayCamera::_SetValue_default_instance_);
}
inline const ::cmd::DayCamera::SetValue& Zoom::set_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.set_value)
  return _internal_set_value();
}
inline ::cmd::DayCamera::SetValue* Zoom::unsafe_arena_release_set_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.set_value)
  if (cmd_case() == kSetValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_value_;
    _impl_.cmd_.set_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_set_value(::cmd::DayCamera::SetValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_value();
    _impl_.cmd_.set_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.set_value)
}
inline ::cmd::DayCamera::SetValue* Zoom::_internal_mutable_set_value() {
  if (cmd_case() != kSetValue) {
    clear_cmd();
    set_has_set_value();
    _impl_.cmd_.set_value_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetValue>(GetArena());
  }
  return _impl_.cmd_.set_value_;
}
inline ::cmd::DayCamera::SetValue* Zoom::mutable_set_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetValue* _msg = _internal_mutable_set_value();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.set_value)
  return _msg;
}

// .cmd.DayCamera.Move move = 2;
inline bool Zoom::has_move() const {
  return cmd_case() == kMove;
}
inline bool Zoom::_internal_has_move() const {
  return cmd_case() == kMove;
}
inline void Zoom::set_has_move() {
  _impl_._oneof_case_[0] = kMove;
}
inline void Zoom::clear_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kMove) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.move_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.move_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Move* Zoom::release_move() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.move)
  if (cmd_case() == kMove) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.move_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Move& Zoom::_internal_move() const {
  return cmd_case() == kMove ? *_impl_.cmd_.move_ : reinterpret_cast<::cmd::DayCamera::Move&>(::cmd::DayCamera::_Move_default_instance_);
}
inline const ::cmd::DayCamera::Move& Zoom::move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.move)
  return _internal_move();
}
inline ::cmd::DayCamera::Move* Zoom::unsafe_arena_release_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.move)
  if (cmd_case() == kMove) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.move_;
    _impl_.cmd_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_move(::cmd::DayCamera::Move* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_move();
    _impl_.cmd_.move_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.move)
}
inline ::cmd::DayCamera::Move* Zoom::_internal_mutable_move() {
  if (cmd_case() != kMove) {
    clear_cmd();
    set_has_move();
    _impl_.cmd_.move_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Move>(GetArena());
  }
  return _impl_.cmd_.move_;
}
inline ::cmd::DayCamera::Move* Zoom::mutable_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Move* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.move)
  return _msg;
}

// .cmd.DayCamera.Halt halt = 3;
inline bool Zoom::has_halt() const {
  return cmd_case() == kHalt;
}
inline bool Zoom::_internal_has_halt() const {
  return cmd_case() == kHalt;
}
inline void Zoom::set_has_halt() {
  _impl_._oneof_case_[0] = kHalt;
}
inline void Zoom::clear_halt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kHalt) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.halt_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.halt_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Halt* Zoom::release_halt() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.halt)
  if (cmd_case() == kHalt) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.halt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Halt& Zoom::_internal_halt() const {
  return cmd_case() == kHalt ? *_impl_.cmd_.halt_ : reinterpret_cast<::cmd::DayCamera::Halt&>(::cmd::DayCamera::_Halt_default_instance_);
}
inline const ::cmd::DayCamera::Halt& Zoom::halt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.halt)
  return _internal_halt();
}
inline ::cmd::DayCamera::Halt* Zoom::unsafe_arena_release_halt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.halt)
  if (cmd_case() == kHalt) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.halt_;
    _impl_.cmd_.halt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_halt(::cmd::DayCamera::Halt* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_halt();
    _impl_.cmd_.halt_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.halt)
}
inline ::cmd::DayCamera::Halt* Zoom::_internal_mutable_halt() {
  if (cmd_case() != kHalt) {
    clear_cmd();
    set_has_halt();
    _impl_.cmd_.halt_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Halt>(GetArena());
  }
  return _impl_.cmd_.halt_;
}
inline ::cmd::DayCamera::Halt* Zoom::mutable_halt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Halt* _msg = _internal_mutable_halt();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.halt)
  return _msg;
}

// .cmd.DayCamera.SetZoomTableValue set_zoom_table_value = 4;
inline bool Zoom::has_set_zoom_table_value() const {
  return cmd_case() == kSetZoomTableValue;
}
inline bool Zoom::_internal_has_set_zoom_table_value() const {
  return cmd_case() == kSetZoomTableValue;
}
inline void Zoom::set_has_set_zoom_table_value() {
  _impl_._oneof_case_[0] = kSetZoomTableValue;
}
inline void Zoom::clear_set_zoom_table_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetZoomTableValue) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_zoom_table_value_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_zoom_table_value_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SetZoomTableValue* Zoom::release_set_zoom_table_value() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.set_zoom_table_value)
  if (cmd_case() == kSetZoomTableValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_zoom_table_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_zoom_table_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SetZoomTableValue& Zoom::_internal_set_zoom_table_value() const {
  return cmd_case() == kSetZoomTableValue ? *_impl_.cmd_.set_zoom_table_value_ : reinterpret_cast<::cmd::DayCamera::SetZoomTableValue&>(::cmd::DayCamera::_SetZoomTableValue_default_instance_);
}
inline const ::cmd::DayCamera::SetZoomTableValue& Zoom::set_zoom_table_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.set_zoom_table_value)
  return _internal_set_zoom_table_value();
}
inline ::cmd::DayCamera::SetZoomTableValue* Zoom::unsafe_arena_release_set_zoom_table_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.set_zoom_table_value)
  if (cmd_case() == kSetZoomTableValue) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_zoom_table_value_;
    _impl_.cmd_.set_zoom_table_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_set_zoom_table_value(::cmd::DayCamera::SetZoomTableValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_zoom_table_value();
    _impl_.cmd_.set_zoom_table_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.set_zoom_table_value)
}
inline ::cmd::DayCamera::SetZoomTableValue* Zoom::_internal_mutable_set_zoom_table_value() {
  if (cmd_case() != kSetZoomTableValue) {
    clear_cmd();
    set_has_set_zoom_table_value();
    _impl_.cmd_.set_zoom_table_value_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SetZoomTableValue>(GetArena());
  }
  return _impl_.cmd_.set_zoom_table_value_;
}
inline ::cmd::DayCamera::SetZoomTableValue* Zoom::mutable_set_zoom_table_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SetZoomTableValue* _msg = _internal_mutable_set_zoom_table_value();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.set_zoom_table_value)
  return _msg;
}

// .cmd.DayCamera.NextZoomTablePos next_zoom_table_pos = 5;
inline bool Zoom::has_next_zoom_table_pos() const {
  return cmd_case() == kNextZoomTablePos;
}
inline bool Zoom::_internal_has_next_zoom_table_pos() const {
  return cmd_case() == kNextZoomTablePos;
}
inline void Zoom::set_has_next_zoom_table_pos() {
  _impl_._oneof_case_[0] = kNextZoomTablePos;
}
inline void Zoom::clear_next_zoom_table_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kNextZoomTablePos) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.next_zoom_table_pos_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.next_zoom_table_pos_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::NextZoomTablePos* Zoom::release_next_zoom_table_pos() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.next_zoom_table_pos)
  if (cmd_case() == kNextZoomTablePos) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.next_zoom_table_pos_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.next_zoom_table_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::NextZoomTablePos& Zoom::_internal_next_zoom_table_pos() const {
  return cmd_case() == kNextZoomTablePos ? *_impl_.cmd_.next_zoom_table_pos_ : reinterpret_cast<::cmd::DayCamera::NextZoomTablePos&>(::cmd::DayCamera::_NextZoomTablePos_default_instance_);
}
inline const ::cmd::DayCamera::NextZoomTablePos& Zoom::next_zoom_table_pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.next_zoom_table_pos)
  return _internal_next_zoom_table_pos();
}
inline ::cmd::DayCamera::NextZoomTablePos* Zoom::unsafe_arena_release_next_zoom_table_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.next_zoom_table_pos)
  if (cmd_case() == kNextZoomTablePos) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.next_zoom_table_pos_;
    _impl_.cmd_.next_zoom_table_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_next_zoom_table_pos(::cmd::DayCamera::NextZoomTablePos* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_next_zoom_table_pos();
    _impl_.cmd_.next_zoom_table_pos_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.next_zoom_table_pos)
}
inline ::cmd::DayCamera::NextZoomTablePos* Zoom::_internal_mutable_next_zoom_table_pos() {
  if (cmd_case() != kNextZoomTablePos) {
    clear_cmd();
    set_has_next_zoom_table_pos();
    _impl_.cmd_.next_zoom_table_pos_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::NextZoomTablePos>(GetArena());
  }
  return _impl_.cmd_.next_zoom_table_pos_;
}
inline ::cmd::DayCamera::NextZoomTablePos* Zoom::mutable_next_zoom_table_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::NextZoomTablePos* _msg = _internal_mutable_next_zoom_table_pos();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.next_zoom_table_pos)
  return _msg;
}

// .cmd.DayCamera.PrevZoomTablePos prev_zoom_table_pos = 6;
inline bool Zoom::has_prev_zoom_table_pos() const {
  return cmd_case() == kPrevZoomTablePos;
}
inline bool Zoom::_internal_has_prev_zoom_table_pos() const {
  return cmd_case() == kPrevZoomTablePos;
}
inline void Zoom::set_has_prev_zoom_table_pos() {
  _impl_._oneof_case_[0] = kPrevZoomTablePos;
}
inline void Zoom::clear_prev_zoom_table_pos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kPrevZoomTablePos) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.prev_zoom_table_pos_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.prev_zoom_table_pos_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::PrevZoomTablePos* Zoom::release_prev_zoom_table_pos() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.prev_zoom_table_pos)
  if (cmd_case() == kPrevZoomTablePos) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.prev_zoom_table_pos_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.prev_zoom_table_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::PrevZoomTablePos& Zoom::_internal_prev_zoom_table_pos() const {
  return cmd_case() == kPrevZoomTablePos ? *_impl_.cmd_.prev_zoom_table_pos_ : reinterpret_cast<::cmd::DayCamera::PrevZoomTablePos&>(::cmd::DayCamera::_PrevZoomTablePos_default_instance_);
}
inline const ::cmd::DayCamera::PrevZoomTablePos& Zoom::prev_zoom_table_pos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.prev_zoom_table_pos)
  return _internal_prev_zoom_table_pos();
}
inline ::cmd::DayCamera::PrevZoomTablePos* Zoom::unsafe_arena_release_prev_zoom_table_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.prev_zoom_table_pos)
  if (cmd_case() == kPrevZoomTablePos) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.prev_zoom_table_pos_;
    _impl_.cmd_.prev_zoom_table_pos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_prev_zoom_table_pos(::cmd::DayCamera::PrevZoomTablePos* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_prev_zoom_table_pos();
    _impl_.cmd_.prev_zoom_table_pos_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.prev_zoom_table_pos)
}
inline ::cmd::DayCamera::PrevZoomTablePos* Zoom::_internal_mutable_prev_zoom_table_pos() {
  if (cmd_case() != kPrevZoomTablePos) {
    clear_cmd();
    set_has_prev_zoom_table_pos();
    _impl_.cmd_.prev_zoom_table_pos_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::PrevZoomTablePos>(GetArena());
  }
  return _impl_.cmd_.prev_zoom_table_pos_;
}
inline ::cmd::DayCamera::PrevZoomTablePos* Zoom::mutable_prev_zoom_table_pos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::PrevZoomTablePos* _msg = _internal_mutable_prev_zoom_table_pos();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.prev_zoom_table_pos)
  return _msg;
}

// .cmd.DayCamera.Offset offset = 7;
inline bool Zoom::has_offset() const {
  return cmd_case() == kOffset;
}
inline bool Zoom::_internal_has_offset() const {
  return cmd_case() == kOffset;
}
inline void Zoom::set_has_offset() {
  _impl_._oneof_case_[0] = kOffset;
}
inline void Zoom::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kOffset) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.offset_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.offset_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::Offset* Zoom::release_offset() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.offset)
  if (cmd_case() == kOffset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.offset_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Offset& Zoom::_internal_offset() const {
  return cmd_case() == kOffset ? *_impl_.cmd_.offset_ : reinterpret_cast<::cmd::DayCamera::Offset&>(::cmd::DayCamera::_Offset_default_instance_);
}
inline const ::cmd::DayCamera::Offset& Zoom::offset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.offset)
  return _internal_offset();
}
inline ::cmd::DayCamera::Offset* Zoom::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.offset)
  if (cmd_case() == kOffset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.offset_;
    _impl_.cmd_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_offset(::cmd::DayCamera::Offset* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_offset();
    _impl_.cmd_.offset_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.offset)
}
inline ::cmd::DayCamera::Offset* Zoom::_internal_mutable_offset() {
  if (cmd_case() != kOffset) {
    clear_cmd();
    set_has_offset();
    _impl_.cmd_.offset_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Offset>(GetArena());
  }
  return _impl_.cmd_.offset_;
}
inline ::cmd::DayCamera::Offset* Zoom::mutable_offset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Offset* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.offset)
  return _msg;
}

// .cmd.DayCamera.ResetZoom reset_zoom = 8;
inline bool Zoom::has_reset_zoom() const {
  return cmd_case() == kResetZoom;
}
inline bool Zoom::_internal_has_reset_zoom() const {
  return cmd_case() == kResetZoom;
}
inline void Zoom::set_has_reset_zoom() {
  _impl_._oneof_case_[0] = kResetZoom;
}
inline void Zoom::clear_reset_zoom() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kResetZoom) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.reset_zoom_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.reset_zoom_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::ResetZoom* Zoom::release_reset_zoom() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.reset_zoom)
  if (cmd_case() == kResetZoom) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_zoom_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.reset_zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::ResetZoom& Zoom::_internal_reset_zoom() const {
  return cmd_case() == kResetZoom ? *_impl_.cmd_.reset_zoom_ : reinterpret_cast<::cmd::DayCamera::ResetZoom&>(::cmd::DayCamera::_ResetZoom_default_instance_);
}
inline const ::cmd::DayCamera::ResetZoom& Zoom::reset_zoom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.reset_zoom)
  return _internal_reset_zoom();
}
inline ::cmd::DayCamera::ResetZoom* Zoom::unsafe_arena_release_reset_zoom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.reset_zoom)
  if (cmd_case() == kResetZoom) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_zoom_;
    _impl_.cmd_.reset_zoom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_reset_zoom(::cmd::DayCamera::ResetZoom* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_reset_zoom();
    _impl_.cmd_.reset_zoom_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.reset_zoom)
}
inline ::cmd::DayCamera::ResetZoom* Zoom::_internal_mutable_reset_zoom() {
  if (cmd_case() != kResetZoom) {
    clear_cmd();
    set_has_reset_zoom();
    _impl_.cmd_.reset_zoom_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::ResetZoom>(GetArena());
  }
  return _impl_.cmd_.reset_zoom_;
}
inline ::cmd::DayCamera::ResetZoom* Zoom::mutable_reset_zoom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::ResetZoom* _msg = _internal_mutable_reset_zoom();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.reset_zoom)
  return _msg;
}

// .cmd.DayCamera.SaveToTable save_to_table = 9;
inline bool Zoom::has_save_to_table() const {
  return cmd_case() == kSaveToTable;
}
inline bool Zoom::_internal_has_save_to_table() const {
  return cmd_case() == kSaveToTable;
}
inline void Zoom::set_has_save_to_table() {
  _impl_._oneof_case_[0] = kSaveToTable;
}
inline void Zoom::clear_save_to_table() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSaveToTable) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.save_to_table_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.save_to_table_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamera::SaveToTable* Zoom::release_save_to_table() {
  // @@protoc_insertion_point(field_release:cmd.DayCamera.Zoom.save_to_table)
  if (cmd_case() == kSaveToTable) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_to_table_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.save_to_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::SaveToTable& Zoom::_internal_save_to_table() const {
  return cmd_case() == kSaveToTable ? *_impl_.cmd_.save_to_table_ : reinterpret_cast<::cmd::DayCamera::SaveToTable&>(::cmd::DayCamera::_SaveToTable_default_instance_);
}
inline const ::cmd::DayCamera::SaveToTable& Zoom::save_to_table() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.Zoom.save_to_table)
  return _internal_save_to_table();
}
inline ::cmd::DayCamera::SaveToTable* Zoom::unsafe_arena_release_save_to_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamera.Zoom.save_to_table)
  if (cmd_case() == kSaveToTable) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_to_table_;
    _impl_.cmd_.save_to_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Zoom::unsafe_arena_set_allocated_save_to_table(::cmd::DayCamera::SaveToTable* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_save_to_table();
    _impl_.cmd_.save_to_table_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamera.Zoom.save_to_table)
}
inline ::cmd::DayCamera::SaveToTable* Zoom::_internal_mutable_save_to_table() {
  if (cmd_case() != kSaveToTable) {
    clear_cmd();
    set_has_save_to_table();
    _impl_.cmd_.save_to_table_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::SaveToTable>(GetArena());
  }
  return _impl_.cmd_.save_to_table_;
}
inline ::cmd::DayCamera::SaveToTable* Zoom::mutable_save_to_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::SaveToTable* _msg = _internal_mutable_save_to_table();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamera.Zoom.save_to_table)
  return _msg;
}

inline bool Zoom::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Zoom::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Zoom::CmdCase Zoom::cmd_case() const {
  return Zoom::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NextZoomTablePos

// -------------------------------------------------------------------

// PrevZoomTablePos

// -------------------------------------------------------------------

// SetIris

// double value = 1;
inline void SetIris::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetIris::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetIris.value)
  return _internal_value();
}
inline void SetIris::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetIris.value)
}
inline double SetIris::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetIris::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetInfraRedFilter

// bool value = 1;
inline void SetInfraRedFilter::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = false;
}
inline bool SetInfraRedFilter::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetInfraRedFilter.value)
  return _internal_value();
}
inline void SetInfraRedFilter::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetInfraRedFilter.value)
}
inline bool SetInfraRedFilter::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetInfraRedFilter::_internal_set_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetAutoIris

// bool value = 1;
inline void SetAutoIris::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = false;
}
inline bool SetAutoIris::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetAutoIris.value)
  return _internal_value();
}
inline void SetAutoIris::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetAutoIris.value)
}
inline bool SetAutoIris::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetAutoIris::_internal_set_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetZoomTableValue

// int32 value = 1;
inline void SetZoomTableValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::int32_t SetZoomTableValue::value() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.SetZoomTableValue.value)
  return _internal_value();
}
inline void SetZoomTableValue::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.SetZoomTableValue.value)
}
inline ::int32_t SetZoomTableValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetZoomTableValue::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Stop

// -------------------------------------------------------------------

// Start

// -------------------------------------------------------------------

// Photo

// -------------------------------------------------------------------

// Halt

// -------------------------------------------------------------------

// GetMeteo

// -------------------------------------------------------------------

// ResetZoom

// -------------------------------------------------------------------

// ResetFocus

// -------------------------------------------------------------------

// SaveToTable

// -------------------------------------------------------------------

// SaveToTableFocus

// -------------------------------------------------------------------

// FocusROI

// double x1 = 1;
inline void FocusROI::clear_x1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = 0;
}
inline double FocusROI::x1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.x1)
  return _internal_x1();
}
inline void FocusROI::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.x1)
}
inline double FocusROI::_internal_x1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x1_;
}
inline void FocusROI::_internal_set_x1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = value;
}

// double y1 = 2;
inline void FocusROI::clear_y1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = 0;
}
inline double FocusROI::y1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.y1)
  return _internal_y1();
}
inline void FocusROI::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.y1)
}
inline double FocusROI::_internal_y1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y1_;
}
inline void FocusROI::_internal_set_y1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = value;
}

// double x2 = 3;
inline void FocusROI::clear_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = 0;
}
inline double FocusROI::x2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.x2)
  return _internal_x2();
}
inline void FocusROI::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.x2)
}
inline double FocusROI::_internal_x2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x2_;
}
inline void FocusROI::_internal_set_x2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = value;
}

// double y2 = 4;
inline void FocusROI::clear_y2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = 0;
}
inline double FocusROI::y2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.y2)
  return _internal_y2();
}
inline void FocusROI::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.y2)
}
inline double FocusROI::_internal_y2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y2_;
}
inline void FocusROI::_internal_set_y2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = value;
}

// uint64 frame_time = 5;
inline void FocusROI::clear_frame_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = ::uint64_t{0u};
}
inline ::uint64_t FocusROI::frame_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.frame_time)
  return _internal_frame_time();
}
inline void FocusROI::set_frame_time(::uint64_t value) {
  _internal_set_frame_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.frame_time)
}
inline ::uint64_t FocusROI::_internal_frame_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_time_;
}
inline void FocusROI::_internal_set_frame_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = value;
}

// uint64 state_time = 6;
inline void FocusROI::clear_state_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = ::uint64_t{0u};
}
inline ::uint64_t FocusROI::state_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.FocusROI.state_time)
  return _internal_state_time();
}
inline void FocusROI::set_state_time(::uint64_t value) {
  _internal_set_state_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.FocusROI.state_time)
}
inline ::uint64_t FocusROI::_internal_state_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_time_;
}
inline void FocusROI::_internal_set_state_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = value;
}

// -------------------------------------------------------------------

// TrackROI

// double x1 = 1;
inline void TrackROI::clear_x1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = 0;
}
inline double TrackROI::x1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.x1)
  return _internal_x1();
}
inline void TrackROI::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.x1)
}
inline double TrackROI::_internal_x1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x1_;
}
inline void TrackROI::_internal_set_x1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = value;
}

// double y1 = 2;
inline void TrackROI::clear_y1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = 0;
}
inline double TrackROI::y1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.y1)
  return _internal_y1();
}
inline void TrackROI::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.y1)
}
inline double TrackROI::_internal_y1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y1_;
}
inline void TrackROI::_internal_set_y1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = value;
}

// double x2 = 3;
inline void TrackROI::clear_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = 0;
}
inline double TrackROI::x2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.x2)
  return _internal_x2();
}
inline void TrackROI::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.x2)
}
inline double TrackROI::_internal_x2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x2_;
}
inline void TrackROI::_internal_set_x2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = value;
}

// double y2 = 4;
inline void TrackROI::clear_y2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = 0;
}
inline double TrackROI::y2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.y2)
  return _internal_y2();
}
inline void TrackROI::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.y2)
}
inline double TrackROI::_internal_y2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y2_;
}
inline void TrackROI::_internal_set_y2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = value;
}

// uint64 frame_time = 5;
inline void TrackROI::clear_frame_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = ::uint64_t{0u};
}
inline ::uint64_t TrackROI::frame_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.frame_time)
  return _internal_frame_time();
}
inline void TrackROI::set_frame_time(::uint64_t value) {
  _internal_set_frame_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.frame_time)
}
inline ::uint64_t TrackROI::_internal_frame_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_time_;
}
inline void TrackROI::_internal_set_frame_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = value;
}

// uint64 state_time = 6;
inline void TrackROI::clear_state_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = ::uint64_t{0u};
}
inline ::uint64_t TrackROI::state_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.TrackROI.state_time)
  return _internal_state_time();
}
inline void TrackROI::set_state_time(::uint64_t value) {
  _internal_set_state_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.TrackROI.state_time)
}
inline ::uint64_t TrackROI::_internal_state_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_time_;
}
inline void TrackROI::_internal_set_state_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = value;
}

// -------------------------------------------------------------------

// ZoomROI

// double x1 = 1;
inline void ZoomROI::clear_x1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = 0;
}
inline double ZoomROI::x1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.x1)
  return _internal_x1();
}
inline void ZoomROI::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.x1)
}
inline double ZoomROI::_internal_x1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x1_;
}
inline void ZoomROI::_internal_set_x1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x1_ = value;
}

// double y1 = 2;
inline void ZoomROI::clear_y1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = 0;
}
inline double ZoomROI::y1() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.y1)
  return _internal_y1();
}
inline void ZoomROI::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.y1)
}
inline double ZoomROI::_internal_y1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y1_;
}
inline void ZoomROI::_internal_set_y1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y1_ = value;
}

// double x2 = 3;
inline void ZoomROI::clear_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = 0;
}
inline double ZoomROI::x2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.x2)
  return _internal_x2();
}
inline void ZoomROI::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.x2)
}
inline double ZoomROI::_internal_x2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x2_;
}
inline void ZoomROI::_internal_set_x2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x2_ = value;
}

// double y2 = 4;
inline void ZoomROI::clear_y2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = 0;
}
inline double ZoomROI::y2() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.y2)
  return _internal_y2();
}
inline void ZoomROI::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.y2)
}
inline double ZoomROI::_internal_y2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y2_;
}
inline void ZoomROI::_internal_set_y2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y2_ = value;
}

// uint64 frame_time = 5;
inline void ZoomROI::clear_frame_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = ::uint64_t{0u};
}
inline ::uint64_t ZoomROI::frame_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.frame_time)
  return _internal_frame_time();
}
inline void ZoomROI::set_frame_time(::uint64_t value) {
  _internal_set_frame_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.frame_time)
}
inline ::uint64_t ZoomROI::_internal_frame_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_time_;
}
inline void ZoomROI::_internal_set_frame_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_time_ = value;
}

// uint64 state_time = 6;
inline void ZoomROI::clear_state_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = ::uint64_t{0u};
}
inline ::uint64_t ZoomROI::state_time() const {
  // @@protoc_insertion_point(field_get:cmd.DayCamera.ZoomROI.state_time)
  return _internal_state_time();
}
inline void ZoomROI::set_state_time(::uint64_t value) {
  _internal_set_state_time(value);
  // @@protoc_insertion_point(field_set:cmd.DayCamera.ZoomROI.state_time)
}
inline ::uint64_t ZoomROI::_internal_state_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_time_;
}
inline void ZoomROI::_internal_set_state_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_time_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DayCamera
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_5fday_5fcamera_2eproto_2epb_2eh
