// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_data.proto
// Protobuf C++ Version: 5.29.2

#include "jon_shared_data.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGUIState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        system_{nullptr},
        meteo_internal_{nullptr},
        lrf_{nullptr},
        time_{nullptr},
        gps_{nullptr},
        compass_{nullptr},
        rotary_{nullptr},
        camera_day_{nullptr},
        camera_heat_{nullptr},
        compass_calibration_{nullptr},
        rec_osd_{nullptr},
        day_cam_glass_heater_{nullptr},
        actual_space_time_{nullptr},
        system_monotonic_time_us_{::uint64_t{0u}},
        protocol_version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR JonGUIState::JonGUIState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JonGUIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGUIStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGUIStateDefaultTypeInternal() {}
  union {
    JonGUIState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGUIStateDefaultTypeInternal _JonGUIState_default_instance_;
}  // namespace ser
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_jon_5fshared_5fdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.system_monotonic_time_us_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.system_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.meteo_internal_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.lrf_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.gps_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.compass_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.rotary_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.camera_day_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.camera_heat_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.compass_calibration_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.rec_osd_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.day_cam_glass_heater_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGUIState, _impl_.actual_space_time_),
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 23, -1, sizeof(::ser::JonGUIState)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGUIState_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025jon_shared_data.proto\022\003ser\032\033jon_shared"
    "_data_types.proto\032\032jon_shared_data_time."
    "proto\032\034jon_shared_data_system.proto\032\031jon"
    "_shared_data_lrf.proto\032\031jon_shared_data_"
    "gps.proto\032\035jon_shared_data_compass.proto"
    "\032)jon_shared_data_compass_calibration.pr"
    "oto\032\034jon_shared_data_rotary.proto\032 jon_s"
    "hared_data_camera_day.proto\032!jon_shared_"
    "data_camera_heat.proto\032\035jon_shared_data_"
    "rec_osd.proto\032*jon_shared_data_day_cam_g"
    "lass_heater.proto\032\'jon_shared_data_actua"
    "l_space_time.proto\"\320\005\n\013JonGUIState\022\030\n\020pr"
    "otocol_version\030\001 \001(\r\022 \n\030system_monotonic"
    "_time_us\030\002 \001(\004\022%\n\006system\030\r \001(\0132\025.ser.Jon"
    "GuiDataSystem\022,\n\016meteo_internal\030\016 \001(\0132\024."
    "ser.JonGuiDataMeteo\022\037\n\003lrf\030\017 \001(\0132\022.ser.J"
    "onGuiDataLrf\022!\n\004time\030\020 \001(\0132\023.ser.JonGuiD"
    "ataTime\022\037\n\003gps\030\021 \001(\0132\022.ser.JonGuiDataGps"
    "\022\'\n\007compass\030\022 \001(\0132\026.ser.JonGuiDataCompas"
    "s\022%\n\006rotary\030\023 \001(\0132\025.ser.JonGuiDataRotary"
    "\022,\n\ncamera_day\030\024 \001(\0132\030.ser.JonGuiDataCam"
    "eraDay\022.\n\013camera_heat\030\025 \001(\0132\031.ser.JonGui"
    "DataCameraHeat\022>\n\023compass_calibration\030\026 "
    "\001(\0132!.ser.JonGuiDataCompassCalibration\022&"
    "\n\007rec_osd\030\027 \001(\0132\025.ser.JonGuiDataRecOsd\022>"
    "\n\024day_cam_glass_heater\030\030 \001(\0132 .ser.JonGu"
    "iDataDayCamGlassHeater\0229\n\021actual_space_t"
    "ime\030\031 \001(\0132\036.ser.JonGuiDataActualSpaceTim"
    "eJ\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\tJ\004\010"
    "\t\020\nJ\004\010\n\020\013J\004\010\013\020\014J\004\010\014\020\rBGZEgit-codecommit."
    "eu-central-1.amazonaws.com/v1/repos/jett"
    "ison/jonp/datab\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_2eproto_deps[13] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5factual_5fspace_5ftime_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcamera_5fday_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcamera_5fheat_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcompass_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fcompass_5fcalibration_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fday_5fcam_5fglass_5fheater_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fgps_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5flrf_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5frec_5fosd_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5frotary_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5ftime_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_2eproto = {
    false,
    false,
    1262,
    descriptor_table_protodef_jon_5fshared_5fdata_2eproto,
    "jon_shared_data.proto",
    &descriptor_table_jon_5fshared_5fdata_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_2eproto_deps,
    13,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_2eproto::offsets,
    file_level_enum_descriptors_jon_5fshared_5fdata_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_2eproto,
};
namespace ser {
// ===================================================================

class JonGUIState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<JonGUIState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_._has_bits_);
};

void JonGUIState::clear_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.system_ != nullptr) _impl_.system_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void JonGUIState::clear_meteo_internal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.meteo_internal_ != nullptr) _impl_.meteo_internal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void JonGUIState::clear_lrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lrf_ != nullptr) _impl_.lrf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void JonGUIState::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void JonGUIState::clear_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gps_ != nullptr) _impl_.gps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void JonGUIState::clear_compass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.compass_ != nullptr) _impl_.compass_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void JonGUIState::clear_rotary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rotary_ != nullptr) _impl_.rotary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void JonGUIState::clear_camera_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.camera_day_ != nullptr) _impl_.camera_day_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void JonGUIState::clear_camera_heat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.camera_heat_ != nullptr) _impl_.camera_heat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void JonGUIState::clear_compass_calibration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.compass_calibration_ != nullptr) _impl_.compass_calibration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void JonGUIState::clear_rec_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rec_osd_ != nullptr) _impl_.rec_osd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void JonGUIState::clear_day_cam_glass_heater() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.day_cam_glass_heater_ != nullptr) _impl_.day_cam_glass_heater_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void JonGUIState::clear_actual_space_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.actual_space_time_ != nullptr) _impl_.actual_space_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
JonGUIState::JonGUIState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGUIState)
}
inline PROTOBUF_NDEBUG_INLINE JonGUIState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ser::JonGUIState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JonGUIState::JonGUIState(
    ::google::protobuf::Arena* arena,
    const JonGUIState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JonGUIState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.system_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataSystem>(
                              arena, *from._impl_.system_)
                        : nullptr;
  _impl_.meteo_internal_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataMeteo>(
                              arena, *from._impl_.meteo_internal_)
                        : nullptr;
  _impl_.lrf_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataLrf>(
                              arena, *from._impl_.lrf_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataTime>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.gps_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataGps>(
                              arena, *from._impl_.gps_)
                        : nullptr;
  _impl_.compass_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCompass>(
                              arena, *from._impl_.compass_)
                        : nullptr;
  _impl_.rotary_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataRotary>(
                              arena, *from._impl_.rotary_)
                        : nullptr;
  _impl_.camera_day_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCameraDay>(
                              arena, *from._impl_.camera_day_)
                        : nullptr;
  _impl_.camera_heat_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCameraHeat>(
                              arena, *from._impl_.camera_heat_)
                        : nullptr;
  _impl_.compass_calibration_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCompassCalibration>(
                              arena, *from._impl_.compass_calibration_)
                        : nullptr;
  _impl_.rec_osd_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataRecOsd>(
                              arena, *from._impl_.rec_osd_)
                        : nullptr;
  _impl_.day_cam_glass_heater_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataDayCamGlassHeater>(
                              arena, *from._impl_.day_cam_glass_heater_)
                        : nullptr;
  _impl_.actual_space_time_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataActualSpaceTime>(
                              arena, *from._impl_.actual_space_time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_monotonic_time_us_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, system_monotonic_time_us_),
           offsetof(Impl_, protocol_version_) -
               offsetof(Impl_, system_monotonic_time_us_) +
               sizeof(Impl_::protocol_version_));

  // @@protoc_insertion_point(copy_constructor:ser.JonGUIState)
}
inline PROTOBUF_NDEBUG_INLINE JonGUIState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGUIState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_),
           0,
           offsetof(Impl_, protocol_version_) -
               offsetof(Impl_, system_) +
               sizeof(Impl_::protocol_version_));
}
JonGUIState::~JonGUIState() {
  // @@protoc_insertion_point(destructor:ser.JonGUIState)
  SharedDtor(*this);
}
inline void JonGUIState::SharedDtor(MessageLite& self) {
  JonGUIState& this_ = static_cast<JonGUIState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.system_;
  delete this_._impl_.meteo_internal_;
  delete this_._impl_.lrf_;
  delete this_._impl_.time_;
  delete this_._impl_.gps_;
  delete this_._impl_.compass_;
  delete this_._impl_.rotary_;
  delete this_._impl_.camera_day_;
  delete this_._impl_.camera_heat_;
  delete this_._impl_.compass_calibration_;
  delete this_._impl_.rec_osd_;
  delete this_._impl_.day_cam_glass_heater_;
  delete this_._impl_.actual_space_time_;
  this_._impl_.~Impl_();
}

inline void* JonGUIState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JonGUIState(arena);
}
constexpr auto JonGUIState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(JonGUIState),
                                            alignof(JonGUIState));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JonGUIState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JonGUIState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JonGUIState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JonGUIState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JonGUIState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JonGUIState>(), &JonGUIState::ByteSizeLong,
            &JonGUIState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_._cached_size_),
        false,
    },
    &JonGUIState::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JonGUIState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 13, 0, 2> JonGUIState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_._has_bits_),
    0, // no _extensions_
    25, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4261416956,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::JonGUIState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .ser.JonGuiDataTime time = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 3, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.time_)}},
    // uint32 protocol_version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGUIState, _impl_.protocol_version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_)}},
    // uint64 system_monotonic_time_us = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(JonGUIState, _impl_.system_monotonic_time_us_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_monotonic_time_us_)}},
    // .ser.JonGuiDataRotary rotary = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 6, 6, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rotary_)}},
    // .ser.JonGuiDataCameraDay camera_day = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 7, 7, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_day_)}},
    // .ser.JonGuiDataCameraHeat camera_heat = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 8, 8, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_heat_)}},
    // .ser.JonGuiDataCompassCalibration compass_calibration = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 9, 9, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_calibration_)}},
    // .ser.JonGuiDataRecOsd rec_osd = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 10, 10, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rec_osd_)}},
    // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 11, 11, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.day_cam_glass_heater_)}},
    // .ser.JonGuiDataActualSpaceTime actual_space_time = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 12, 12, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.actual_space_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .ser.JonGuiDataSystem system = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 0, 0, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_)}},
    // .ser.JonGuiDataMeteo meteo_internal = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 1, 1, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.meteo_internal_)}},
    // .ser.JonGuiDataLrf lrf = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 2, 2, PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.lrf_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 protocol_version = 1;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 system_monotonic_time_us = 2;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_monotonic_time_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .ser.JonGuiDataSystem system = 13;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataMeteo meteo_internal = 14;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.meteo_internal_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataLrf lrf = 15;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.lrf_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataTime time = 16;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataGps gps = 17;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.gps_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCompass compass = 18;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataRotary rotary = 19;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rotary_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCameraDay camera_day = 20;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_day_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCameraHeat camera_heat = 21;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.camera_heat_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataCompassCalibration compass_calibration = 22;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.compass_calibration_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataRecOsd rec_osd = 23;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.rec_osd_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 24;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.day_cam_glass_heater_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDataActualSpaceTime actual_space_time = 25;
    {PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.actual_space_time_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataSystem>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataMeteo>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataLrf>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataTime>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataGps>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCompass>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataRotary>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCameraDay>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCameraHeat>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataCompassCalibration>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataRecOsd>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataDayCamGlassHeater>()},
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataActualSpaceTime>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void JonGUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGUIState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.system_ != nullptr);
      _impl_.system_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.meteo_internal_ != nullptr);
      _impl_.meteo_internal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.lrf_ != nullptr);
      _impl_.lrf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.gps_ != nullptr);
      _impl_.gps_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.compass_ != nullptr);
      _impl_.compass_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.rotary_ != nullptr);
      _impl_.rotary_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.camera_day_ != nullptr);
      _impl_.camera_day_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.camera_heat_ != nullptr);
      _impl_.camera_heat_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.compass_calibration_ != nullptr);
      _impl_.compass_calibration_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.rec_osd_ != nullptr);
      _impl_.rec_osd_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.day_cam_glass_heater_ != nullptr);
      _impl_.day_cam_glass_heater_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.actual_space_time_ != nullptr);
      _impl_.actual_space_time_->Clear();
    }
  }
  ::memset(&_impl_.system_monotonic_time_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.protocol_version_) -
      reinterpret_cast<char*>(&_impl_.system_monotonic_time_us_)) + sizeof(_impl_.protocol_version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JonGUIState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JonGUIState& this_ = static_cast<const JonGUIState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JonGUIState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JonGUIState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.JonGUIState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 protocol_version = 1;
          if (this_._internal_protocol_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_protocol_version(), target);
          }

          // uint64 system_monotonic_time_us = 2;
          if (this_._internal_system_monotonic_time_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_system_monotonic_time_us(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .ser.JonGuiDataSystem system = 13;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13, *this_._impl_.system_, this_._impl_.system_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataMeteo meteo_internal = 14;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.meteo_internal_, this_._impl_.meteo_internal_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataLrf lrf = 15;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.lrf_, this_._impl_.lrf_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataTime time = 16;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataGps gps = 17;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.gps_, this_._impl_.gps_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataCompass compass = 18;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18, *this_._impl_.compass_, this_._impl_.compass_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataRotary rotary = 19;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.rotary_, this_._impl_.rotary_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataCameraDay camera_day = 20;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.camera_day_, this_._impl_.camera_day_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataCameraHeat camera_heat = 21;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                21, *this_._impl_.camera_heat_, this_._impl_.camera_heat_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataCompassCalibration compass_calibration = 22;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                22, *this_._impl_.compass_calibration_, this_._impl_.compass_calibration_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataRecOsd rec_osd = 23;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                23, *this_._impl_.rec_osd_, this_._impl_.rec_osd_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 24;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.day_cam_glass_heater_, this_._impl_.day_cam_glass_heater_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDataActualSpaceTime actual_space_time = 25;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                25, *this_._impl_.actual_space_time_, this_._impl_.actual_space_time_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.JonGUIState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JonGUIState::ByteSizeLong(const MessageLite& base) {
          const JonGUIState& this_ = static_cast<const JonGUIState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JonGUIState::ByteSizeLong() const {
          const JonGUIState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.JonGUIState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .ser.JonGuiDataSystem system = 13;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.system_);
            }
            // .ser.JonGuiDataMeteo meteo_internal = 14;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.meteo_internal_);
            }
            // .ser.JonGuiDataLrf lrf = 15;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lrf_);
            }
            // .ser.JonGuiDataTime time = 16;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .ser.JonGuiDataGps gps = 17;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gps_);
            }
            // .ser.JonGuiDataCompass compass = 18;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.compass_);
            }
            // .ser.JonGuiDataRotary rotary = 19;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rotary_);
            }
            // .ser.JonGuiDataCameraDay camera_day = 20;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.camera_day_);
            }
          }
          if (cached_has_bits & 0x00001f00u) {
            // .ser.JonGuiDataCameraHeat camera_heat = 21;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.camera_heat_);
            }
            // .ser.JonGuiDataCompassCalibration compass_calibration = 22;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.compass_calibration_);
            }
            // .ser.JonGuiDataRecOsd rec_osd = 23;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rec_osd_);
            }
            // .ser.JonGuiDataDayCamGlassHeater day_cam_glass_heater = 24;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.day_cam_glass_heater_);
            }
            // .ser.JonGuiDataActualSpaceTime actual_space_time = 25;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.actual_space_time_);
            }
          }
           {
            // uint64 system_monotonic_time_us = 2;
            if (this_._internal_system_monotonic_time_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_system_monotonic_time_us());
            }
            // uint32 protocol_version = 1;
            if (this_._internal_protocol_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_protocol_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JonGUIState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JonGUIState*>(&to_msg);
  auto& from = static_cast<const JonGUIState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGUIState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.system_ != nullptr);
      if (_this->_impl_.system_ == nullptr) {
        _this->_impl_.system_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataSystem>(arena, *from._impl_.system_);
      } else {
        _this->_impl_.system_->MergeFrom(*from._impl_.system_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.meteo_internal_ != nullptr);
      if (_this->_impl_.meteo_internal_ == nullptr) {
        _this->_impl_.meteo_internal_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataMeteo>(arena, *from._impl_.meteo_internal_);
      } else {
        _this->_impl_.meteo_internal_->MergeFrom(*from._impl_.meteo_internal_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.lrf_ != nullptr);
      if (_this->_impl_.lrf_ == nullptr) {
        _this->_impl_.lrf_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataLrf>(arena, *from._impl_.lrf_);
      } else {
        _this->_impl_.lrf_->MergeFrom(*from._impl_.lrf_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataTime>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.gps_ != nullptr);
      if (_this->_impl_.gps_ == nullptr) {
        _this->_impl_.gps_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataGps>(arena, *from._impl_.gps_);
      } else {
        _this->_impl_.gps_->MergeFrom(*from._impl_.gps_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.compass_ != nullptr);
      if (_this->_impl_.compass_ == nullptr) {
        _this->_impl_.compass_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCompass>(arena, *from._impl_.compass_);
      } else {
        _this->_impl_.compass_->MergeFrom(*from._impl_.compass_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.rotary_ != nullptr);
      if (_this->_impl_.rotary_ == nullptr) {
        _this->_impl_.rotary_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataRotary>(arena, *from._impl_.rotary_);
      } else {
        _this->_impl_.rotary_->MergeFrom(*from._impl_.rotary_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.camera_day_ != nullptr);
      if (_this->_impl_.camera_day_ == nullptr) {
        _this->_impl_.camera_day_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCameraDay>(arena, *from._impl_.camera_day_);
      } else {
        _this->_impl_.camera_day_->MergeFrom(*from._impl_.camera_day_);
      }
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.camera_heat_ != nullptr);
      if (_this->_impl_.camera_heat_ == nullptr) {
        _this->_impl_.camera_heat_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCameraHeat>(arena, *from._impl_.camera_heat_);
      } else {
        _this->_impl_.camera_heat_->MergeFrom(*from._impl_.camera_heat_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.compass_calibration_ != nullptr);
      if (_this->_impl_.compass_calibration_ == nullptr) {
        _this->_impl_.compass_calibration_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataCompassCalibration>(arena, *from._impl_.compass_calibration_);
      } else {
        _this->_impl_.compass_calibration_->MergeFrom(*from._impl_.compass_calibration_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.rec_osd_ != nullptr);
      if (_this->_impl_.rec_osd_ == nullptr) {
        _this->_impl_.rec_osd_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataRecOsd>(arena, *from._impl_.rec_osd_);
      } else {
        _this->_impl_.rec_osd_->MergeFrom(*from._impl_.rec_osd_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.day_cam_glass_heater_ != nullptr);
      if (_this->_impl_.day_cam_glass_heater_ == nullptr) {
        _this->_impl_.day_cam_glass_heater_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataDayCamGlassHeater>(arena, *from._impl_.day_cam_glass_heater_);
      } else {
        _this->_impl_.day_cam_glass_heater_->MergeFrom(*from._impl_.day_cam_glass_heater_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.actual_space_time_ != nullptr);
      if (_this->_impl_.actual_space_time_ == nullptr) {
        _this->_impl_.actual_space_time_ =
            ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataActualSpaceTime>(arena, *from._impl_.actual_space_time_);
      } else {
        _this->_impl_.actual_space_time_->MergeFrom(*from._impl_.actual_space_time_);
      }
    }
  }
  if (from._internal_system_monotonic_time_us() != 0) {
    _this->_impl_.system_monotonic_time_us_ = from._impl_.system_monotonic_time_us_;
  }
  if (from._internal_protocol_version() != 0) {
    _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGUIState::CopyFrom(const JonGUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JonGUIState::InternalSwap(JonGUIState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.protocol_version_)
      + sizeof(JonGUIState::_impl_.protocol_version_)
      - PROTOBUF_FIELD_OFFSET(JonGUIState, _impl_.system_)>(
          reinterpret_cast<char*>(&_impl_.system_),
          reinterpret_cast<char*>(&other->_impl_.system_));
}

::google::protobuf::Metadata JonGUIState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jon_5fshared_5fdata_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
