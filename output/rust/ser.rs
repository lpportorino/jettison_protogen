// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataMeteo {
    #[prost(double, tag = "1")]
    pub temperature: f64,
    #[prost(double, tag = "2")]
    pub humidity: f64,
    #[prost(double, tag = "3")]
    pub pressure: f64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataVideoChannelHeatFilters {
    JonGuiDataVideoChannelHeatFilterUnspecified = 0,
    JonGuiDataVideoChannelHeatFilterHotWhite = 1,
    JonGuiDataVideoChannelHeatFilterHotBlack = 2,
    JonGuiDataVideoChannelHeatFilterSepia = 3,
    JonGuiDataVideoChannelHeatFilterSepiaInverse = 4,
}
impl JonGuiDataVideoChannelHeatFilters {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataVideoChannelHeatFilterUnspecified => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_UNSPECIFIED"
            }
            Self::JonGuiDataVideoChannelHeatFilterHotWhite => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_WHITE"
            }
            Self::JonGuiDataVideoChannelHeatFilterHotBlack => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_BLACK"
            }
            Self::JonGuiDataVideoChannelHeatFilterSepia => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA"
            }
            Self::JonGuiDataVideoChannelHeatFilterSepiaInverse => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA_INVERSE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_UNSPECIFIED" => {
                Some(Self::JonGuiDataVideoChannelHeatFilterUnspecified)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_WHITE" => {
                Some(Self::JonGuiDataVideoChannelHeatFilterHotWhite)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_BLACK" => {
                Some(Self::JonGuiDataVideoChannelHeatFilterHotBlack)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA" => {
                Some(Self::JonGuiDataVideoChannelHeatFilterSepia)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA_INVERSE" => {
                Some(Self::JonGuiDataVideoChannelHeatFilterSepiaInverse)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataVideoChannelHeatAgcModes {
    JonGuiDataVideoChannelHeatAgcModeUnspecified = 0,
    JonGuiDataVideoChannelHeatAgcMode1 = 1,
    JonGuiDataVideoChannelHeatAgcMode2 = 2,
    JonGuiDataVideoChannelHeatAgcMode3 = 3,
}
impl JonGuiDataVideoChannelHeatAgcModes {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataVideoChannelHeatAgcModeUnspecified => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_UNSPECIFIED"
            }
            Self::JonGuiDataVideoChannelHeatAgcMode1 => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_1"
            }
            Self::JonGuiDataVideoChannelHeatAgcMode2 => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_2"
            }
            Self::JonGuiDataVideoChannelHeatAgcMode3 => {
                "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_3"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_UNSPECIFIED" => {
                Some(Self::JonGuiDataVideoChannelHeatAgcModeUnspecified)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_1" => {
                Some(Self::JonGuiDataVideoChannelHeatAgcMode1)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_2" => {
                Some(Self::JonGuiDataVideoChannelHeatAgcMode2)
            }
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_3" => {
                Some(Self::JonGuiDataVideoChannelHeatAgcMode3)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataGpsUnits {
    Unspecified = 0,
    DecimalDegrees = 1,
    DegreesMinutesSeconds = 2,
    DegreesDecimalMinutes = 3,
}
impl JonGuiDataGpsUnits {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_GPS_UNITS_UNSPECIFIED",
            Self::DecimalDegrees => "JON_GUI_DATA_GPS_UNITS_DECIMAL_DEGREES",
            Self::DegreesMinutesSeconds => {
                "JON_GUI_DATA_GPS_UNITS_DEGREES_MINUTES_SECONDS"
            }
            Self::DegreesDecimalMinutes => {
                "JON_GUI_DATA_GPS_UNITS_DEGREES_DECIMAL_MINUTES"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_GPS_UNITS_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_GPS_UNITS_DECIMAL_DEGREES" => Some(Self::DecimalDegrees),
            "JON_GUI_DATA_GPS_UNITS_DEGREES_MINUTES_SECONDS" => {
                Some(Self::DegreesMinutesSeconds)
            }
            "JON_GUI_DATA_GPS_UNITS_DEGREES_DECIMAL_MINUTES" => {
                Some(Self::DegreesDecimalMinutes)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataGpsFixType {
    Unspecified = 0,
    None = 1,
    JonGuiDataGpsFixType1d = 2,
    JonGuiDataGpsFixType2d = 3,
    JonGuiDataGpsFixType3d = 4,
    Manual = 5,
}
impl JonGuiDataGpsFixType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_GPS_FIX_TYPE_UNSPECIFIED",
            Self::None => "JON_GUI_DATA_GPS_FIX_TYPE_NONE",
            Self::JonGuiDataGpsFixType1d => "JON_GUI_DATA_GPS_FIX_TYPE_1D",
            Self::JonGuiDataGpsFixType2d => "JON_GUI_DATA_GPS_FIX_TYPE_2D",
            Self::JonGuiDataGpsFixType3d => "JON_GUI_DATA_GPS_FIX_TYPE_3D",
            Self::Manual => "JON_GUI_DATA_GPS_FIX_TYPE_MANUAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_GPS_FIX_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_GPS_FIX_TYPE_NONE" => Some(Self::None),
            "JON_GUI_DATA_GPS_FIX_TYPE_1D" => Some(Self::JonGuiDataGpsFixType1d),
            "JON_GUI_DATA_GPS_FIX_TYPE_2D" => Some(Self::JonGuiDataGpsFixType2d),
            "JON_GUI_DATA_GPS_FIX_TYPE_3D" => Some(Self::JonGuiDataGpsFixType3d),
            "JON_GUI_DATA_GPS_FIX_TYPE_MANUAL" => Some(Self::Manual),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataCompassUnits {
    Unspecified = 0,
    Degrees = 1,
    Mils = 2,
    Grad = 3,
    Mrad = 4,
}
impl JonGuiDataCompassUnits {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_COMPASS_UNITS_UNSPECIFIED",
            Self::Degrees => "JON_GUI_DATA_COMPASS_UNITS_DEGREES",
            Self::Mils => "JON_GUI_DATA_COMPASS_UNITS_MILS",
            Self::Grad => "JON_GUI_DATA_COMPASS_UNITS_GRAD",
            Self::Mrad => "JON_GUI_DATA_COMPASS_UNITS_MRAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_COMPASS_UNITS_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_COMPASS_UNITS_DEGREES" => Some(Self::Degrees),
            "JON_GUI_DATA_COMPASS_UNITS_MILS" => Some(Self::Mils),
            "JON_GUI_DATA_COMPASS_UNITS_GRAD" => Some(Self::Grad),
            "JON_GUI_DATA_COMPASS_UNITS_MRAD" => Some(Self::Mrad),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataAccumulatorStateIdx {
    JonGuiDataAccumulatorStateUnspecified = 0,
    JonGuiDataAccumulatorStateUnknown = 1,
    JonGuiDataAccumulatorStateEmpty = 2,
    JonGuiDataAccumulatorState1 = 3,
    JonGuiDataAccumulatorState2 = 4,
    JonGuiDataAccumulatorState3 = 5,
    JonGuiDataAccumulatorState4 = 6,
    JonGuiDataAccumulatorState5 = 7,
    JonGuiDataAccumulatorState6 = 8,
    JonGuiDataAccumulatorStateFull = 9,
    JonGuiDataAccumulatorStateCharging = 10,
}
impl JonGuiDataAccumulatorStateIdx {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataAccumulatorStateUnspecified => {
                "JON_GUI_DATA_ACCUMULATOR_STATE_UNSPECIFIED"
            }
            Self::JonGuiDataAccumulatorStateUnknown => {
                "JON_GUI_DATA_ACCUMULATOR_STATE_UNKNOWN"
            }
            Self::JonGuiDataAccumulatorStateEmpty => {
                "JON_GUI_DATA_ACCUMULATOR_STATE_EMPTY"
            }
            Self::JonGuiDataAccumulatorState1 => "JON_GUI_DATA_ACCUMULATOR_STATE_1",
            Self::JonGuiDataAccumulatorState2 => "JON_GUI_DATA_ACCUMULATOR_STATE_2",
            Self::JonGuiDataAccumulatorState3 => "JON_GUI_DATA_ACCUMULATOR_STATE_3",
            Self::JonGuiDataAccumulatorState4 => "JON_GUI_DATA_ACCUMULATOR_STATE_4",
            Self::JonGuiDataAccumulatorState5 => "JON_GUI_DATA_ACCUMULATOR_STATE_5",
            Self::JonGuiDataAccumulatorState6 => "JON_GUI_DATA_ACCUMULATOR_STATE_6",
            Self::JonGuiDataAccumulatorStateFull => "JON_GUI_DATA_ACCUMULATOR_STATE_FULL",
            Self::JonGuiDataAccumulatorStateCharging => {
                "JON_GUI_DATA_ACCUMULATOR_STATE_CHARGING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_ACCUMULATOR_STATE_UNSPECIFIED" => {
                Some(Self::JonGuiDataAccumulatorStateUnspecified)
            }
            "JON_GUI_DATA_ACCUMULATOR_STATE_UNKNOWN" => {
                Some(Self::JonGuiDataAccumulatorStateUnknown)
            }
            "JON_GUI_DATA_ACCUMULATOR_STATE_EMPTY" => {
                Some(Self::JonGuiDataAccumulatorStateEmpty)
            }
            "JON_GUI_DATA_ACCUMULATOR_STATE_1" => Some(Self::JonGuiDataAccumulatorState1),
            "JON_GUI_DATA_ACCUMULATOR_STATE_2" => Some(Self::JonGuiDataAccumulatorState2),
            "JON_GUI_DATA_ACCUMULATOR_STATE_3" => Some(Self::JonGuiDataAccumulatorState3),
            "JON_GUI_DATA_ACCUMULATOR_STATE_4" => Some(Self::JonGuiDataAccumulatorState4),
            "JON_GUI_DATA_ACCUMULATOR_STATE_5" => Some(Self::JonGuiDataAccumulatorState5),
            "JON_GUI_DATA_ACCUMULATOR_STATE_6" => Some(Self::JonGuiDataAccumulatorState6),
            "JON_GUI_DATA_ACCUMULATOR_STATE_FULL" => {
                Some(Self::JonGuiDataAccumulatorStateFull)
            }
            "JON_GUI_DATA_ACCUMULATOR_STATE_CHARGING" => {
                Some(Self::JonGuiDataAccumulatorStateCharging)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataTimeFormats {
    JonGuiDataTimeFormatUnspecified = 0,
    JonGuiDataTimeFormatHMS = 1,
    JonGuiDataTimeFormatYMDHMS = 2,
}
impl JonGuiDataTimeFormats {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataTimeFormatUnspecified => {
                "JON_GUI_DATA_TIME_FORMAT_UNSPECIFIED"
            }
            Self::JonGuiDataTimeFormatHMS => "JON_GUI_DATA_TIME_FORMAT_H_M_S",
            Self::JonGuiDataTimeFormatYMDHMS => "JON_GUI_DATA_TIME_FORMAT_Y_m_D_H_M_S",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_TIME_FORMAT_UNSPECIFIED" => {
                Some(Self::JonGuiDataTimeFormatUnspecified)
            }
            "JON_GUI_DATA_TIME_FORMAT_H_M_S" => Some(Self::JonGuiDataTimeFormatHMS),
            "JON_GUI_DATA_TIME_FORMAT_Y_m_D_H_M_S" => {
                Some(Self::JonGuiDataTimeFormatYMDHMS)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataRotaryDirection {
    Unspecified = 0,
    Clockwise = 1,
    CounterClockwise = 2,
}
impl JonGuiDataRotaryDirection {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_ROTARY_DIRECTION_UNSPECIFIED",
            Self::Clockwise => "JON_GUI_DATA_ROTARY_DIRECTION_CLOCKWISE",
            Self::CounterClockwise => "JON_GUI_DATA_ROTARY_DIRECTION_COUNTER_CLOCKWISE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_ROTARY_DIRECTION_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_ROTARY_DIRECTION_CLOCKWISE" => Some(Self::Clockwise),
            "JON_GUI_DATA_ROTARY_DIRECTION_COUNTER_CLOCKWISE" => {
                Some(Self::CounterClockwise)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataLrfScanModes {
    JonGuiDataLrfScanModeUnspecified = 0,
    JonGuiDataLrfScanMode1HzContinuous = 1,
    JonGuiDataLrfScanMode4HzContinuous = 2,
    JonGuiDataLrfScanMode10HzContinuous = 3,
    JonGuiDataLrfScanMode20HzContinuous = 4,
    JonGuiDataLrfScanMode100HzContinuous = 5,
    JonGuiDataLrfScanMode200HzContinuous = 6,
}
impl JonGuiDataLrfScanModes {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataLrfScanModeUnspecified => {
                "JON_GUI_DATA_LRF_SCAN_MODE_UNSPECIFIED"
            }
            Self::JonGuiDataLrfScanMode1HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_1_HZ_CONTINUOUS"
            }
            Self::JonGuiDataLrfScanMode4HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_4_HZ_CONTINUOUS"
            }
            Self::JonGuiDataLrfScanMode10HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_10_HZ_CONTINUOUS"
            }
            Self::JonGuiDataLrfScanMode20HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_20_HZ_CONTINUOUS"
            }
            Self::JonGuiDataLrfScanMode100HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_100_HZ_CONTINUOUS"
            }
            Self::JonGuiDataLrfScanMode200HzContinuous => {
                "JON_GUI_DATA_LRF_SCAN_MODE_200_HZ_CONTINUOUS"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_LRF_SCAN_MODE_UNSPECIFIED" => {
                Some(Self::JonGuiDataLrfScanModeUnspecified)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_1_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode1HzContinuous)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_4_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode4HzContinuous)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_10_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode10HzContinuous)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_20_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode20HzContinuous)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_100_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode100HzContinuous)
            }
            "JON_GUI_DATA_LRF_SCAN_MODE_200_HZ_CONTINUOUS" => {
                Some(Self::JonGuiDataLrfScanMode200HzContinuous)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDatatLrfLaserPointerModes {
    JonGuiDataLrfLaserPointerModeUnspecified = 0,
    JonGuiDataLrfLaserPointerModeOff = 1,
    JonGuiDataLrfLaserPointerModeOn1 = 2,
    JonGuiDataLrfLaserPointerModeOn2 = 3,
}
impl JonGuiDatatLrfLaserPointerModes {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataLrfLaserPointerModeUnspecified => {
                "JON_GUI_DATA_LRF_LASER_POINTER_MODE_UNSPECIFIED"
            }
            Self::JonGuiDataLrfLaserPointerModeOff => {
                "JON_GUI_DATA_LRF_LASER_POINTER_MODE_OFF"
            }
            Self::JonGuiDataLrfLaserPointerModeOn1 => {
                "JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_1"
            }
            Self::JonGuiDataLrfLaserPointerModeOn2 => {
                "JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_2"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_LRF_LASER_POINTER_MODE_UNSPECIFIED" => {
                Some(Self::JonGuiDataLrfLaserPointerModeUnspecified)
            }
            "JON_GUI_DATA_LRF_LASER_POINTER_MODE_OFF" => {
                Some(Self::JonGuiDataLrfLaserPointerModeOff)
            }
            "JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_1" => {
                Some(Self::JonGuiDataLrfLaserPointerModeOn1)
            }
            "JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_2" => {
                Some(Self::JonGuiDataLrfLaserPointerModeOn2)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataCompassCalibrateStatus {
    Unspecified = 0,
    NotCalibrating = 1,
    CalibratingShort = 2,
    CalibratingLong = 3,
    Finished = 4,
    Error = 5,
}
impl JonGuiDataCompassCalibrateStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_UNSPECIFIED",
            Self::NotCalibrating => {
                "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_NOT_CALIBRATING"
            }
            Self::CalibratingShort => {
                "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_SHORT"
            }
            Self::CalibratingLong => {
                "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_LONG"
            }
            Self::Finished => "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_FINISHED",
            Self::Error => "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_UNSPECIFIED" => {
                Some(Self::Unspecified)
            }
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_NOT_CALIBRATING" => {
                Some(Self::NotCalibrating)
            }
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_SHORT" => {
                Some(Self::CalibratingShort)
            }
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_LONG" => {
                Some(Self::CalibratingLong)
            }
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_FINISHED" => Some(Self::Finished),
            "JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataRotaryMode {
    Unspecified = 0,
    Initialization = 1,
    Speed = 2,
    Position = 3,
    Stabilization = 4,
    Targeting = 5,
    VideoTracker = 6,
}
impl JonGuiDataRotaryMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_ROTARY_MODE_UNSPECIFIED",
            Self::Initialization => "JON_GUI_DATA_ROTARY_MODE_INITIALIZATION",
            Self::Speed => "JON_GUI_DATA_ROTARY_MODE_SPEED",
            Self::Position => "JON_GUI_DATA_ROTARY_MODE_POSITION",
            Self::Stabilization => "JON_GUI_DATA_ROTARY_MODE_STABILIZATION",
            Self::Targeting => "JON_GUI_DATA_ROTARY_MODE_TARGETING",
            Self::VideoTracker => "JON_GUI_DATA_ROTARY_MODE_VIDEO_TRACKER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_ROTARY_MODE_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_ROTARY_MODE_INITIALIZATION" => Some(Self::Initialization),
            "JON_GUI_DATA_ROTARY_MODE_SPEED" => Some(Self::Speed),
            "JON_GUI_DATA_ROTARY_MODE_POSITION" => Some(Self::Position),
            "JON_GUI_DATA_ROTARY_MODE_STABILIZATION" => Some(Self::Stabilization),
            "JON_GUI_DATA_ROTARY_MODE_TARGETING" => Some(Self::Targeting),
            "JON_GUI_DATA_ROTARY_MODE_VIDEO_TRACKER" => Some(Self::VideoTracker),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataVideoChannel {
    Unspecified = 0,
    Heat = 1,
    Day = 2,
}
impl JonGuiDataVideoChannel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_VIDEO_CHANNEL_UNSPECIFIED",
            Self::Heat => "JON_GUI_DATA_VIDEO_CHANNEL_HEAT",
            Self::Day => "JON_GUI_DATA_VIDEO_CHANNEL_DAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_VIDEO_CHANNEL_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_VIDEO_CHANNEL_HEAT" => Some(Self::Heat),
            "JON_GUI_DATA_VIDEO_CHANNEL_DAY" => Some(Self::Day),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataRecOsdScreen {
    Unspecified = 0,
    Main = 1,
    LrfMeasure = 2,
    LrfResult = 3,
    LrfResultSimplified = 4,
}
impl JonGuiDataRecOsdScreen {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_REC_OSD_SCREEN_UNSPECIFIED",
            Self::Main => "JON_GUI_DATA_REC_OSD_SCREEN_MAIN",
            Self::LrfMeasure => "JON_GUI_DATA_REC_OSD_SCREEN_LRF_MEASURE",
            Self::LrfResult => "JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT",
            Self::LrfResultSimplified => {
                "JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT_SIMPLIFIED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_REC_OSD_SCREEN_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_REC_OSD_SCREEN_MAIN" => Some(Self::Main),
            "JON_GUI_DATA_REC_OSD_SCREEN_LRF_MEASURE" => Some(Self::LrfMeasure),
            "JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT" => Some(Self::LrfResult),
            "JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT_SIMPLIFIED" => {
                Some(Self::LrfResultSimplified)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataFxModeDay {
    Default = 0,
    A = 1,
    B = 2,
    C = 3,
    D = 4,
    E = 5,
    F = 6,
}
impl JonGuiDataFxModeDay {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "JON_GUI_DATA_FX_MODE_DAY_DEFAULT",
            Self::A => "JON_GUI_DATA_FX_MODE_DAY_A",
            Self::B => "JON_GUI_DATA_FX_MODE_DAY_B",
            Self::C => "JON_GUI_DATA_FX_MODE_DAY_C",
            Self::D => "JON_GUI_DATA_FX_MODE_DAY_D",
            Self::E => "JON_GUI_DATA_FX_MODE_DAY_E",
            Self::F => "JON_GUI_DATA_FX_MODE_DAY_F",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_FX_MODE_DAY_DEFAULT" => Some(Self::Default),
            "JON_GUI_DATA_FX_MODE_DAY_A" => Some(Self::A),
            "JON_GUI_DATA_FX_MODE_DAY_B" => Some(Self::B),
            "JON_GUI_DATA_FX_MODE_DAY_C" => Some(Self::C),
            "JON_GUI_DATA_FX_MODE_DAY_D" => Some(Self::D),
            "JON_GUI_DATA_FX_MODE_DAY_E" => Some(Self::E),
            "JON_GUI_DATA_FX_MODE_DAY_F" => Some(Self::F),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataFxModeHeat {
    Default = 0,
    A = 1,
    B = 2,
    C = 3,
    D = 4,
    E = 5,
    F = 6,
}
impl JonGuiDataFxModeHeat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "JON_GUI_DATA_FX_MODE_HEAT_DEFAULT",
            Self::A => "JON_GUI_DATA_FX_MODE_HEAT_A",
            Self::B => "JON_GUI_DATA_FX_MODE_HEAT_B",
            Self::C => "JON_GUI_DATA_FX_MODE_HEAT_C",
            Self::D => "JON_GUI_DATA_FX_MODE_HEAT_D",
            Self::E => "JON_GUI_DATA_FX_MODE_HEAT_E",
            Self::F => "JON_GUI_DATA_FX_MODE_HEAT_F",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_FX_MODE_HEAT_DEFAULT" => Some(Self::Default),
            "JON_GUI_DATA_FX_MODE_HEAT_A" => Some(Self::A),
            "JON_GUI_DATA_FX_MODE_HEAT_B" => Some(Self::B),
            "JON_GUI_DATA_FX_MODE_HEAT_C" => Some(Self::C),
            "JON_GUI_DATA_FX_MODE_HEAT_D" => Some(Self::D),
            "JON_GUI_DATA_FX_MODE_HEAT_E" => Some(Self::E),
            "JON_GUI_DATA_FX_MODE_HEAT_F" => Some(Self::F),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataSystemLocalizations {
    JonGuiDataSystemLocalizationUnspecified = 0,
    JonGuiDataSystemLocalizationEn = 1,
    JonGuiDataSystemLocalizationUa = 2,
    JonGuiDataSystemLocalizationAr = 3,
    JonGuiDataSystemLocalizationCs = 4,
}
impl JonGuiDataSystemLocalizations {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::JonGuiDataSystemLocalizationUnspecified => {
                "JON_GUI_DATA_SYSTEM_LOCALIZATION_UNSPECIFIED"
            }
            Self::JonGuiDataSystemLocalizationEn => "JON_GUI_DATA_SYSTEM_LOCALIZATION_EN",
            Self::JonGuiDataSystemLocalizationUa => "JON_GUI_DATA_SYSTEM_LOCALIZATION_UA",
            Self::JonGuiDataSystemLocalizationAr => "JON_GUI_DATA_SYSTEM_LOCALIZATION_AR",
            Self::JonGuiDataSystemLocalizationCs => "JON_GUI_DATA_SYSTEM_LOCALIZATION_CS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_SYSTEM_LOCALIZATION_UNSPECIFIED" => {
                Some(Self::JonGuiDataSystemLocalizationUnspecified)
            }
            "JON_GUI_DATA_SYSTEM_LOCALIZATION_EN" => {
                Some(Self::JonGuiDataSystemLocalizationEn)
            }
            "JON_GUI_DATA_SYSTEM_LOCALIZATION_UA" => {
                Some(Self::JonGuiDataSystemLocalizationUa)
            }
            "JON_GUI_DATA_SYSTEM_LOCALIZATION_AR" => {
                Some(Self::JonGuiDataSystemLocalizationAr)
            }
            "JON_GUI_DATA_SYSTEM_LOCALIZATION_CS" => {
                Some(Self::JonGuiDataSystemLocalizationCs)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JonGuiDataClientType {
    Unspecified = 0,
    InternalCv = 1,
    LocalNetwork = 2,
    CertificateProtected = 3,
    Lira = 4,
}
impl JonGuiDataClientType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "JON_GUI_DATA_CLIENT_TYPE_UNSPECIFIED",
            Self::InternalCv => "JON_GUI_DATA_CLIENT_TYPE_INTERNAL_CV",
            Self::LocalNetwork => "JON_GUI_DATA_CLIENT_TYPE_LOCAL_NETWORK",
            Self::CertificateProtected => {
                "JON_GUI_DATA_CLIENT_TYPE_CERTIFICATE_PROTECTED"
            }
            Self::Lira => "JON_GUI_DATA_CLIENT_TYPE_LIRA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JON_GUI_DATA_CLIENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "JON_GUI_DATA_CLIENT_TYPE_INTERNAL_CV" => Some(Self::InternalCv),
            "JON_GUI_DATA_CLIENT_TYPE_LOCAL_NETWORK" => Some(Self::LocalNetwork),
            "JON_GUI_DATA_CLIENT_TYPE_CERTIFICATE_PROTECTED" => {
                Some(Self::CertificateProtected)
            }
            "JON_GUI_DATA_CLIENT_TYPE_LIRA" => Some(Self::Lira),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataCameraHeat {
    #[prost(double, tag = "1")]
    pub zoom_pos: f64,
    #[prost(enumeration = "JonGuiDataVideoChannelHeatAgcModes", tag = "2")]
    pub agc_mode: i32,
    #[prost(enumeration = "JonGuiDataVideoChannelHeatFilters", tag = "3")]
    pub filter: i32,
    #[prost(bool, tag = "4")]
    pub auto_focus: bool,
    #[prost(int32, tag = "5")]
    pub zoom_table_pos: i32,
    #[prost(int32, tag = "6")]
    pub zoom_table_pos_max: i32,
    #[prost(int32, tag = "7")]
    pub dde_level: i32,
    #[prost(bool, tag = "8")]
    pub dde_enabled: bool,
    #[prost(enumeration = "JonGuiDataFxModeHeat", tag = "9")]
    pub fx_mode: i32,
    #[prost(double, tag = "10")]
    pub digital_zoom_level: f64,
    #[prost(double, tag = "11")]
    pub clahe_level: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataTime {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(int64, tag = "2")]
    pub manual_timestamp: i64,
    #[prost(int32, tag = "3")]
    pub zone_id: i32,
    #[prost(bool, tag = "4")]
    pub use_manual_time: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataSystem {
    #[prost(double, tag = "1")]
    pub cpu_temperature: f64,
    #[prost(double, tag = "2")]
    pub gpu_temperature: f64,
    #[prost(double, tag = "3")]
    pub gpu_load: f64,
    #[prost(double, tag = "4")]
    pub cpu_load: f64,
    #[prost(double, tag = "5")]
    pub power_consumption: f64,
    #[prost(enumeration = "JonGuiDataSystemLocalizations", tag = "6")]
    pub loc: i32,
    #[prost(int32, tag = "7")]
    pub cur_video_rec_dir_year: i32,
    #[prost(int32, tag = "8")]
    pub cur_video_rec_dir_month: i32,
    #[prost(int32, tag = "9")]
    pub cur_video_rec_dir_day: i32,
    #[prost(int32, tag = "10")]
    pub cur_video_rec_dir_hour: i32,
    #[prost(int32, tag = "11")]
    pub cur_video_rec_dir_minute: i32,
    #[prost(int32, tag = "12")]
    pub cur_video_rec_dir_second: i32,
    #[prost(bool, tag = "13")]
    pub rec_enabled: bool,
    #[prost(bool, tag = "14")]
    pub important_rec_enabled: bool,
    #[prost(bool, tag = "15")]
    pub low_disk_space: bool,
    #[prost(bool, tag = "16")]
    pub no_disk_space: bool,
    #[prost(int32, tag = "17")]
    pub disk_space: i32,
    #[prost(bool, tag = "18")]
    pub tracking: bool,
    #[prost(bool, tag = "19")]
    pub vampire_mode: bool,
    #[prost(bool, tag = "20")]
    pub stabilization_mode: bool,
    #[prost(bool, tag = "21")]
    pub geodesic_mode: bool,
    #[prost(bool, tag = "22")]
    pub cv_dumping: bool,
    #[prost(bool, tag = "23")]
    pub recognition_mode: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataLrf {
    #[prost(bool, tag = "1")]
    pub is_scanning: bool,
    #[prost(bool, tag = "2")]
    pub is_measuring: bool,
    #[prost(int32, tag = "3")]
    pub measure_id: i32,
    #[prost(message, optional, tag = "4")]
    pub target: ::core::option::Option<JonGuiDataTarget>,
    #[prost(enumeration = "JonGuiDatatLrfLaserPointerModes", tag = "5")]
    pub pointer_mode: i32,
    #[prost(bool, tag = "6")]
    pub fog_mode_enabled: bool,
    #[prost(bool, tag = "7")]
    pub is_refining: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataTarget {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(double, tag = "2")]
    pub target_longitude: f64,
    #[prost(double, tag = "3")]
    pub target_latitude: f64,
    #[prost(double, tag = "4")]
    pub target_altitude: f64,
    #[prost(double, tag = "5")]
    pub observer_longitude: f64,
    #[prost(double, tag = "6")]
    pub observer_latitude: f64,
    #[prost(double, tag = "7")]
    pub observer_altitude: f64,
    #[prost(double, tag = "8")]
    pub observer_azimuth: f64,
    #[prost(double, tag = "9")]
    pub observer_elevation: f64,
    #[prost(double, tag = "10")]
    pub observer_bank: f64,
    #[prost(double, tag = "11")]
    pub distance_2d: f64,
    #[prost(double, tag = "12")]
    pub distance_3b: f64,
    #[prost(enumeration = "JonGuiDataGpsFixType", tag = "13")]
    pub observer_fix_type: i32,
    #[prost(int32, tag = "14")]
    pub session_id: i32,
    #[prost(int32, tag = "15")]
    pub target_id: i32,
    #[prost(message, optional, tag = "16")]
    pub target_color: ::core::option::Option<RgbColor>,
    #[prost(uint32, tag = "17")]
    pub r#type: u32,
    /// UUID as four fixed32 values (128 bits total)
    #[prost(int32, tag = "18")]
    pub uuid_part1: i32,
    #[prost(int32, tag = "19")]
    pub uuid_part2: i32,
    #[prost(int32, tag = "20")]
    pub uuid_part3: i32,
    #[prost(int32, tag = "21")]
    pub uuid_part4: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RgbColor {
    #[prost(uint32, tag = "1")]
    pub red: u32,
    #[prost(uint32, tag = "2")]
    pub green: u32,
    #[prost(uint32, tag = "3")]
    pub blue: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataGps {
    #[prost(double, tag = "1")]
    pub longitude: f64,
    #[prost(double, tag = "2")]
    pub latitude: f64,
    #[prost(double, tag = "3")]
    pub altitude: f64,
    #[prost(double, tag = "4")]
    pub manual_longitude: f64,
    #[prost(double, tag = "5")]
    pub manual_latitude: f64,
    #[prost(double, tag = "6")]
    pub manual_altitude: f64,
    #[prost(enumeration = "JonGuiDataGpsFixType", tag = "7")]
    pub fix_type: i32,
    #[prost(bool, tag = "8")]
    pub use_manual: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataCompass {
    #[prost(double, tag = "1")]
    pub azimuth: f64,
    #[prost(double, tag = "2")]
    pub elevation: f64,
    #[prost(double, tag = "3")]
    pub bank: f64,
    #[prost(double, tag = "4")]
    pub offset_azimuth: f64,
    #[prost(double, tag = "5")]
    pub offset_elevation: f64,
    #[prost(double, tag = "6")]
    pub magnetic_declination: f64,
    #[prost(bool, tag = "7")]
    pub calibrating: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataCompassCalibration {
    #[prost(uint32, tag = "1")]
    pub stage: u32,
    #[prost(uint32, tag = "2")]
    pub final_stage: u32,
    #[prost(double, tag = "3")]
    pub target_azimuth: f64,
    #[prost(double, tag = "4")]
    pub target_elevation: f64,
    #[prost(double, tag = "5")]
    pub target_bank: f64,
    #[prost(enumeration = "JonGuiDataCompassCalibrateStatus", tag = "6")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataRotary {
    #[prost(double, tag = "1")]
    pub azimuth: f64,
    #[prost(double, tag = "2")]
    pub azimuth_speed: f64,
    #[prost(double, tag = "3")]
    pub elevation: f64,
    #[prost(double, tag = "4")]
    pub elevation_speed: f64,
    #[prost(double, tag = "5")]
    pub platform_azimuth: f64,
    #[prost(double, tag = "6")]
    pub platform_elevation: f64,
    #[prost(double, tag = "7")]
    pub platform_bank: f64,
    #[prost(bool, tag = "8")]
    pub is_moving: bool,
    #[prost(enumeration = "JonGuiDataRotaryMode", tag = "9")]
    pub mode: i32,
    #[prost(bool, tag = "10")]
    pub is_scanning: bool,
    #[prost(bool, tag = "11")]
    pub is_scanning_paused: bool,
    #[prost(bool, tag = "12")]
    pub use_rotary_as_compass: bool,
    #[prost(int32, tag = "13")]
    pub scan_target: i32,
    #[prost(int32, tag = "14")]
    pub scan_target_max: i32,
    #[prost(double, tag = "15")]
    pub sun_azimuth: f64,
    #[prost(double, tag = "16")]
    pub sun_elevation: f64,
    #[prost(message, optional, tag = "17")]
    pub current_scan_node: ::core::option::Option<ScanNode>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanNode {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(int32, tag = "2")]
    pub day_zoom_table_value: i32,
    #[prost(int32, tag = "3")]
    pub heat_zoom_table_value: i32,
    #[prost(double, tag = "4")]
    pub azimuth: f64,
    #[prost(double, tag = "5")]
    pub elevation: f64,
    #[prost(double, tag = "6")]
    pub linger: f64,
    #[prost(double, tag = "7")]
    pub speed: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataCameraDay {
    #[prost(double, tag = "1")]
    pub focus_pos: f64,
    #[prost(double, tag = "2")]
    pub zoom_pos: f64,
    #[prost(double, tag = "3")]
    pub iris_pos: f64,
    #[prost(bool, tag = "4")]
    pub infrared_filter: bool,
    #[prost(int32, tag = "5")]
    pub zoom_table_pos: i32,
    #[prost(int32, tag = "6")]
    pub zoom_table_pos_max: i32,
    #[prost(enumeration = "JonGuiDataFxModeDay", tag = "7")]
    pub fx_mode: i32,
    #[prost(bool, tag = "8")]
    pub auto_focus: bool,
    #[prost(bool, tag = "9")]
    pub auto_iris: bool,
    #[prost(double, tag = "10")]
    pub digital_zoom_level: f64,
    #[prost(double, tag = "11")]
    pub clahe_level: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataRecOsd {
    #[prost(enumeration = "JonGuiDataRecOsdScreen", tag = "1")]
    pub screen: i32,
    #[prost(bool, tag = "2")]
    pub heat_osd_enabled: bool,
    #[prost(bool, tag = "3")]
    pub day_osd_enabled: bool,
    #[prost(int32, tag = "4")]
    pub heat_crosshair_offset_horizontal: i32,
    #[prost(int32, tag = "5")]
    pub heat_crosshair_offset_vertical: i32,
    #[prost(int32, tag = "6")]
    pub day_crosshair_offset_horizontal: i32,
    #[prost(int32, tag = "7")]
    pub day_crosshair_offset_vertical: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataDayCamGlassHeater {
    #[prost(double, tag = "1")]
    pub temperature: f64,
    #[prost(bool, tag = "2")]
    pub status: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiDataActualSpaceTime {
    #[prost(double, tag = "1")]
    pub azimuth: f64,
    #[prost(double, tag = "2")]
    pub elevation: f64,
    #[prost(double, tag = "3")]
    pub bank: f64,
    #[prost(double, tag = "4")]
    pub latitude: f64,
    #[prost(double, tag = "5")]
    pub longitude: f64,
    #[prost(double, tag = "6")]
    pub altitude: f64,
    #[prost(int64, tag = "7")]
    pub timestamp: i64,
}
/// Root message
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JonGuiState {
    #[prost(uint32, tag = "1")]
    pub protocol_version: u32,
    #[prost(message, optional, tag = "2")]
    pub system: ::core::option::Option<JonGuiDataSystem>,
    #[prost(message, optional, tag = "3")]
    pub meteo_internal: ::core::option::Option<JonGuiDataMeteo>,
    #[prost(message, optional, tag = "4")]
    pub lrf: ::core::option::Option<JonGuiDataLrf>,
    #[prost(message, optional, tag = "5")]
    pub time: ::core::option::Option<JonGuiDataTime>,
    #[prost(message, optional, tag = "6")]
    pub gps: ::core::option::Option<JonGuiDataGps>,
    #[prost(message, optional, tag = "7")]
    pub compass: ::core::option::Option<JonGuiDataCompass>,
    #[prost(message, optional, tag = "8")]
    pub rotary: ::core::option::Option<JonGuiDataRotary>,
    #[prost(message, optional, tag = "9")]
    pub camera_day: ::core::option::Option<JonGuiDataCameraDay>,
    #[prost(message, optional, tag = "10")]
    pub camera_heat: ::core::option::Option<JonGuiDataCameraHeat>,
    #[prost(message, optional, tag = "11")]
    pub compass_calibration: ::core::option::Option<JonGuiDataCompassCalibration>,
    #[prost(message, optional, tag = "12")]
    pub rec_osd: ::core::option::Option<JonGuiDataRecOsd>,
    #[prost(message, optional, tag = "13")]
    pub day_cam_glass_heater: ::core::option::Option<JonGuiDataDayCamGlassHeater>,
    #[prost(message, optional, tag = "14")]
    pub actual_space_time: ::core::option::Option<JonGuiDataActualSpaceTime>,
}
