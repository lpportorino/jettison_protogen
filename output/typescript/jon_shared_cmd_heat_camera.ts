// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.2
// source: jon_shared_cmd_heat_camera.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import {
  JonGuiDataFxModeHeat,
  jonGuiDataFxModeHeatFromJSON,
  jonGuiDataFxModeHeatToJSON,
  JonGuiDataVideoChannelHeatAGCModes,
  jonGuiDataVideoChannelHeatAGCModesFromJSON,
  jonGuiDataVideoChannelHeatAGCModesToJSON,
  JonGuiDataVideoChannelHeatFilters,
  jonGuiDataVideoChannelHeatFiltersFromJSON,
  jonGuiDataVideoChannelHeatFiltersToJSON,
} from "./jon_shared_data_types";

export interface Root {
  zoom?: Zoom | undefined;
  setAgc?: SetAGC | undefined;
  setFilter?: SetFilters | undefined;
  start?: Start | undefined;
  stop?: Stop | undefined;
  photo?: Photo | undefined;
  zoomIn?: ZoomIn | undefined;
  zoomOut?: ZoomOut | undefined;
  zoomStop?: ZoomStop | undefined;
  focusIn?: FocusIn | undefined;
  focusOut?: FocusOut | undefined;
  focusStop?: FocusStop | undefined;
  calibrate?: Calibrate | undefined;
  setDdeLevel?: SetDDELevel | undefined;
  enableDde?: EnableDDE | undefined;
  disableDde?: DisableDDE | undefined;
  setAutoFocus?: SetAutoFocus | undefined;
  focusStepPlus?: FocusStepPlus | undefined;
  focusStepMinus?: FocusStepMinus | undefined;
  setFxMode?: SetFxMode | undefined;
  nextFxMode?: NextFxMode | undefined;
  prevFxMode?: PrevFxMode | undefined;
  getMeteo?: GetMeteo | undefined;
  shiftDde?: ShiftDDE | undefined;
  refreshFxMode?: RefreshFxMode | undefined;
  resetZoom?: ResetZoom | undefined;
  saveToTable?: SaveToTable | undefined;
  setCalibMode?: SetCalibMode | undefined;
  setDigitalZoomLevel?: SetDigitalZoomLevel | undefined;
  setClaheLevel?: SetClaheLevel | undefined;
  shiftClaheLevel?: ShiftClaheLevel | undefined;
  focusRoi?: FocusROI | undefined;
  trackRoi?: TrackROI | undefined;
  zoomRoi?: ZoomROI | undefined;
}

export interface SetFxMode {
  mode: JonGuiDataFxModeHeat;
}

export interface SetClaheLevel {
  value: number;
}

export interface ShiftClaheLevel {
  value: number;
}

export interface NextFxMode {
}

export interface PrevFxMode {
}

export interface RefreshFxMode {
}

export interface EnableDDE {
}

export interface DisableDDE {
}

export interface SetValue {
  value: number;
}

export interface SetDDELevel {
  value: number;
}

export interface SetDigitalZoomLevel {
  value: number;
}

export interface ShiftDDE {
  value: number;
}

export interface ZoomIn {
}

export interface ZoomOut {
}

export interface ZoomStop {
}

export interface FocusIn {
}

export interface FocusOut {
}

export interface FocusStop {
}

export interface FocusStepPlus {
}

export interface FocusStepMinus {
}

export interface Calibrate {
}

export interface Zoom {
  setZoomTableValue?: SetZoomTableValue | undefined;
  nextZoomTablePos?: NextZoomTablePos | undefined;
  prevZoomTablePos?: PrevZoomTablePos | undefined;
}

export interface NextZoomTablePos {
}

export interface PrevZoomTablePos {
}

export interface SetCalibMode {
}

export interface SetZoomTableValue {
  value: number;
}

export interface SetAGC {
  value: JonGuiDataVideoChannelHeatAGCModes;
}

export interface SetFilters {
  value: JonGuiDataVideoChannelHeatFilters;
}

export interface Start {
}

export interface Stop {
}

export interface Halt {
}

export interface Photo {
}

export interface GetMeteo {
}

export interface SetAutoFocus {
  value: boolean;
}

export interface ResetZoom {
}

export interface SaveToTable {
}

export interface FocusROI {
  x: number;
  y: number;
}

export interface TrackROI {
  x1: number;
  y1: number;
  x2: number;
  y2: number;
}

export interface ZoomROI {
  x1: number;
  y1: number;
  x2: number;
  y2: number;
}

function createBaseRoot(): Root {
  return {
    zoom: undefined,
    setAgc: undefined,
    setFilter: undefined,
    start: undefined,
    stop: undefined,
    photo: undefined,
    zoomIn: undefined,
    zoomOut: undefined,
    zoomStop: undefined,
    focusIn: undefined,
    focusOut: undefined,
    focusStop: undefined,
    calibrate: undefined,
    setDdeLevel: undefined,
    enableDde: undefined,
    disableDde: undefined,
    setAutoFocus: undefined,
    focusStepPlus: undefined,
    focusStepMinus: undefined,
    setFxMode: undefined,
    nextFxMode: undefined,
    prevFxMode: undefined,
    getMeteo: undefined,
    shiftDde: undefined,
    refreshFxMode: undefined,
    resetZoom: undefined,
    saveToTable: undefined,
    setCalibMode: undefined,
    setDigitalZoomLevel: undefined,
    setClaheLevel: undefined,
    shiftClaheLevel: undefined,
    focusRoi: undefined,
    trackRoi: undefined,
    zoomRoi: undefined,
  };
}

export const Root: MessageFns<Root> = {
  encode(message: Root, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.zoom !== undefined) {
      Zoom.encode(message.zoom, writer.uint32(10).fork()).join();
    }
    if (message.setAgc !== undefined) {
      SetAGC.encode(message.setAgc, writer.uint32(18).fork()).join();
    }
    if (message.setFilter !== undefined) {
      SetFilters.encode(message.setFilter, writer.uint32(26).fork()).join();
    }
    if (message.start !== undefined) {
      Start.encode(message.start, writer.uint32(34).fork()).join();
    }
    if (message.stop !== undefined) {
      Stop.encode(message.stop, writer.uint32(42).fork()).join();
    }
    if (message.photo !== undefined) {
      Photo.encode(message.photo, writer.uint32(50).fork()).join();
    }
    if (message.zoomIn !== undefined) {
      ZoomIn.encode(message.zoomIn, writer.uint32(82).fork()).join();
    }
    if (message.zoomOut !== undefined) {
      ZoomOut.encode(message.zoomOut, writer.uint32(90).fork()).join();
    }
    if (message.zoomStop !== undefined) {
      ZoomStop.encode(message.zoomStop, writer.uint32(98).fork()).join();
    }
    if (message.focusIn !== undefined) {
      FocusIn.encode(message.focusIn, writer.uint32(106).fork()).join();
    }
    if (message.focusOut !== undefined) {
      FocusOut.encode(message.focusOut, writer.uint32(114).fork()).join();
    }
    if (message.focusStop !== undefined) {
      FocusStop.encode(message.focusStop, writer.uint32(122).fork()).join();
    }
    if (message.calibrate !== undefined) {
      Calibrate.encode(message.calibrate, writer.uint32(130).fork()).join();
    }
    if (message.setDdeLevel !== undefined) {
      SetDDELevel.encode(message.setDdeLevel, writer.uint32(138).fork()).join();
    }
    if (message.enableDde !== undefined) {
      EnableDDE.encode(message.enableDde, writer.uint32(146).fork()).join();
    }
    if (message.disableDde !== undefined) {
      DisableDDE.encode(message.disableDde, writer.uint32(154).fork()).join();
    }
    if (message.setAutoFocus !== undefined) {
      SetAutoFocus.encode(message.setAutoFocus, writer.uint32(162).fork()).join();
    }
    if (message.focusStepPlus !== undefined) {
      FocusStepPlus.encode(message.focusStepPlus, writer.uint32(170).fork()).join();
    }
    if (message.focusStepMinus !== undefined) {
      FocusStepMinus.encode(message.focusStepMinus, writer.uint32(178).fork()).join();
    }
    if (message.setFxMode !== undefined) {
      SetFxMode.encode(message.setFxMode, writer.uint32(186).fork()).join();
    }
    if (message.nextFxMode !== undefined) {
      NextFxMode.encode(message.nextFxMode, writer.uint32(194).fork()).join();
    }
    if (message.prevFxMode !== undefined) {
      PrevFxMode.encode(message.prevFxMode, writer.uint32(202).fork()).join();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(210).fork()).join();
    }
    if (message.shiftDde !== undefined) {
      ShiftDDE.encode(message.shiftDde, writer.uint32(218).fork()).join();
    }
    if (message.refreshFxMode !== undefined) {
      RefreshFxMode.encode(message.refreshFxMode, writer.uint32(226).fork()).join();
    }
    if (message.resetZoom !== undefined) {
      ResetZoom.encode(message.resetZoom, writer.uint32(234).fork()).join();
    }
    if (message.saveToTable !== undefined) {
      SaveToTable.encode(message.saveToTable, writer.uint32(242).fork()).join();
    }
    if (message.setCalibMode !== undefined) {
      SetCalibMode.encode(message.setCalibMode, writer.uint32(250).fork()).join();
    }
    if (message.setDigitalZoomLevel !== undefined) {
      SetDigitalZoomLevel.encode(message.setDigitalZoomLevel, writer.uint32(258).fork()).join();
    }
    if (message.setClaheLevel !== undefined) {
      SetClaheLevel.encode(message.setClaheLevel, writer.uint32(266).fork()).join();
    }
    if (message.shiftClaheLevel !== undefined) {
      ShiftClaheLevel.encode(message.shiftClaheLevel, writer.uint32(274).fork()).join();
    }
    if (message.focusRoi !== undefined) {
      FocusROI.encode(message.focusRoi, writer.uint32(282).fork()).join();
    }
    if (message.trackRoi !== undefined) {
      TrackROI.encode(message.trackRoi, writer.uint32(290).fork()).join();
    }
    if (message.zoomRoi !== undefined) {
      ZoomROI.encode(message.zoomRoi, writer.uint32(298).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Root {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.zoom = Zoom.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.setAgc = SetAGC.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.setFilter = SetFilters.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.start = Start.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stop = Stop.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.photo = Photo.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.zoomIn = ZoomIn.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.zoomOut = ZoomOut.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.zoomStop = ZoomStop.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.focusIn = FocusIn.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.focusOut = FocusOut.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.focusStop = FocusStop.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.calibrate = Calibrate.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.setDdeLevel = SetDDELevel.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.enableDde = EnableDDE.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.disableDde = DisableDDE.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.setAutoFocus = SetAutoFocus.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.focusStepPlus = FocusStepPlus.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.focusStepMinus = FocusStepMinus.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.setFxMode = SetFxMode.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.nextFxMode = NextFxMode.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.prevFxMode = PrevFxMode.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.shiftDde = ShiftDDE.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.refreshFxMode = RefreshFxMode.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.resetZoom = ResetZoom.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.saveToTable = SaveToTable.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.setCalibMode = SetCalibMode.decode(reader, reader.uint32());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.setDigitalZoomLevel = SetDigitalZoomLevel.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.setClaheLevel = SetClaheLevel.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.shiftClaheLevel = ShiftClaheLevel.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.focusRoi = FocusROI.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.trackRoi = TrackROI.decode(reader, reader.uint32());
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.zoomRoi = ZoomROI.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      zoom: isSet(object.zoom) ? Zoom.fromJSON(object.zoom) : undefined,
      setAgc: isSet(object.setAgc) ? SetAGC.fromJSON(object.setAgc) : undefined,
      setFilter: isSet(object.setFilter) ? SetFilters.fromJSON(object.setFilter) : undefined,
      start: isSet(object.start) ? Start.fromJSON(object.start) : undefined,
      stop: isSet(object.stop) ? Stop.fromJSON(object.stop) : undefined,
      photo: isSet(object.photo) ? Photo.fromJSON(object.photo) : undefined,
      zoomIn: isSet(object.zoomIn) ? ZoomIn.fromJSON(object.zoomIn) : undefined,
      zoomOut: isSet(object.zoomOut) ? ZoomOut.fromJSON(object.zoomOut) : undefined,
      zoomStop: isSet(object.zoomStop) ? ZoomStop.fromJSON(object.zoomStop) : undefined,
      focusIn: isSet(object.focusIn) ? FocusIn.fromJSON(object.focusIn) : undefined,
      focusOut: isSet(object.focusOut) ? FocusOut.fromJSON(object.focusOut) : undefined,
      focusStop: isSet(object.focusStop) ? FocusStop.fromJSON(object.focusStop) : undefined,
      calibrate: isSet(object.calibrate) ? Calibrate.fromJSON(object.calibrate) : undefined,
      setDdeLevel: isSet(object.setDdeLevel) ? SetDDELevel.fromJSON(object.setDdeLevel) : undefined,
      enableDde: isSet(object.enableDde) ? EnableDDE.fromJSON(object.enableDde) : undefined,
      disableDde: isSet(object.disableDde) ? DisableDDE.fromJSON(object.disableDde) : undefined,
      setAutoFocus: isSet(object.setAutoFocus) ? SetAutoFocus.fromJSON(object.setAutoFocus) : undefined,
      focusStepPlus: isSet(object.focusStepPlus) ? FocusStepPlus.fromJSON(object.focusStepPlus) : undefined,
      focusStepMinus: isSet(object.focusStepMinus) ? FocusStepMinus.fromJSON(object.focusStepMinus) : undefined,
      setFxMode: isSet(object.setFxMode) ? SetFxMode.fromJSON(object.setFxMode) : undefined,
      nextFxMode: isSet(object.nextFxMode) ? NextFxMode.fromJSON(object.nextFxMode) : undefined,
      prevFxMode: isSet(object.prevFxMode) ? PrevFxMode.fromJSON(object.prevFxMode) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
      shiftDde: isSet(object.shiftDde) ? ShiftDDE.fromJSON(object.shiftDde) : undefined,
      refreshFxMode: isSet(object.refreshFxMode) ? RefreshFxMode.fromJSON(object.refreshFxMode) : undefined,
      resetZoom: isSet(object.resetZoom) ? ResetZoom.fromJSON(object.resetZoom) : undefined,
      saveToTable: isSet(object.saveToTable) ? SaveToTable.fromJSON(object.saveToTable) : undefined,
      setCalibMode: isSet(object.setCalibMode) ? SetCalibMode.fromJSON(object.setCalibMode) : undefined,
      setDigitalZoomLevel: isSet(object.setDigitalZoomLevel)
        ? SetDigitalZoomLevel.fromJSON(object.setDigitalZoomLevel)
        : undefined,
      setClaheLevel: isSet(object.setClaheLevel) ? SetClaheLevel.fromJSON(object.setClaheLevel) : undefined,
      shiftClaheLevel: isSet(object.shiftClaheLevel) ? ShiftClaheLevel.fromJSON(object.shiftClaheLevel) : undefined,
      focusRoi: isSet(object.focusRoi) ? FocusROI.fromJSON(object.focusRoi) : undefined,
      trackRoi: isSet(object.trackRoi) ? TrackROI.fromJSON(object.trackRoi) : undefined,
      zoomRoi: isSet(object.zoomRoi) ? ZoomROI.fromJSON(object.zoomRoi) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.zoom !== undefined) {
      obj.zoom = Zoom.toJSON(message.zoom);
    }
    if (message.setAgc !== undefined) {
      obj.setAgc = SetAGC.toJSON(message.setAgc);
    }
    if (message.setFilter !== undefined) {
      obj.setFilter = SetFilters.toJSON(message.setFilter);
    }
    if (message.start !== undefined) {
      obj.start = Start.toJSON(message.start);
    }
    if (message.stop !== undefined) {
      obj.stop = Stop.toJSON(message.stop);
    }
    if (message.photo !== undefined) {
      obj.photo = Photo.toJSON(message.photo);
    }
    if (message.zoomIn !== undefined) {
      obj.zoomIn = ZoomIn.toJSON(message.zoomIn);
    }
    if (message.zoomOut !== undefined) {
      obj.zoomOut = ZoomOut.toJSON(message.zoomOut);
    }
    if (message.zoomStop !== undefined) {
      obj.zoomStop = ZoomStop.toJSON(message.zoomStop);
    }
    if (message.focusIn !== undefined) {
      obj.focusIn = FocusIn.toJSON(message.focusIn);
    }
    if (message.focusOut !== undefined) {
      obj.focusOut = FocusOut.toJSON(message.focusOut);
    }
    if (message.focusStop !== undefined) {
      obj.focusStop = FocusStop.toJSON(message.focusStop);
    }
    if (message.calibrate !== undefined) {
      obj.calibrate = Calibrate.toJSON(message.calibrate);
    }
    if (message.setDdeLevel !== undefined) {
      obj.setDdeLevel = SetDDELevel.toJSON(message.setDdeLevel);
    }
    if (message.enableDde !== undefined) {
      obj.enableDde = EnableDDE.toJSON(message.enableDde);
    }
    if (message.disableDde !== undefined) {
      obj.disableDde = DisableDDE.toJSON(message.disableDde);
    }
    if (message.setAutoFocus !== undefined) {
      obj.setAutoFocus = SetAutoFocus.toJSON(message.setAutoFocus);
    }
    if (message.focusStepPlus !== undefined) {
      obj.focusStepPlus = FocusStepPlus.toJSON(message.focusStepPlus);
    }
    if (message.focusStepMinus !== undefined) {
      obj.focusStepMinus = FocusStepMinus.toJSON(message.focusStepMinus);
    }
    if (message.setFxMode !== undefined) {
      obj.setFxMode = SetFxMode.toJSON(message.setFxMode);
    }
    if (message.nextFxMode !== undefined) {
      obj.nextFxMode = NextFxMode.toJSON(message.nextFxMode);
    }
    if (message.prevFxMode !== undefined) {
      obj.prevFxMode = PrevFxMode.toJSON(message.prevFxMode);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    if (message.shiftDde !== undefined) {
      obj.shiftDde = ShiftDDE.toJSON(message.shiftDde);
    }
    if (message.refreshFxMode !== undefined) {
      obj.refreshFxMode = RefreshFxMode.toJSON(message.refreshFxMode);
    }
    if (message.resetZoom !== undefined) {
      obj.resetZoom = ResetZoom.toJSON(message.resetZoom);
    }
    if (message.saveToTable !== undefined) {
      obj.saveToTable = SaveToTable.toJSON(message.saveToTable);
    }
    if (message.setCalibMode !== undefined) {
      obj.setCalibMode = SetCalibMode.toJSON(message.setCalibMode);
    }
    if (message.setDigitalZoomLevel !== undefined) {
      obj.setDigitalZoomLevel = SetDigitalZoomLevel.toJSON(message.setDigitalZoomLevel);
    }
    if (message.setClaheLevel !== undefined) {
      obj.setClaheLevel = SetClaheLevel.toJSON(message.setClaheLevel);
    }
    if (message.shiftClaheLevel !== undefined) {
      obj.shiftClaheLevel = ShiftClaheLevel.toJSON(message.shiftClaheLevel);
    }
    if (message.focusRoi !== undefined) {
      obj.focusRoi = FocusROI.toJSON(message.focusRoi);
    }
    if (message.trackRoi !== undefined) {
      obj.trackRoi = TrackROI.toJSON(message.trackRoi);
    }
    if (message.zoomRoi !== undefined) {
      obj.zoomRoi = ZoomROI.toJSON(message.zoomRoi);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.zoom = (object.zoom !== undefined && object.zoom !== null) ? Zoom.fromPartial(object.zoom) : undefined;
    message.setAgc = (object.setAgc !== undefined && object.setAgc !== null)
      ? SetAGC.fromPartial(object.setAgc)
      : undefined;
    message.setFilter = (object.setFilter !== undefined && object.setFilter !== null)
      ? SetFilters.fromPartial(object.setFilter)
      : undefined;
    message.start = (object.start !== undefined && object.start !== null) ? Start.fromPartial(object.start) : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null) ? Stop.fromPartial(object.stop) : undefined;
    message.photo = (object.photo !== undefined && object.photo !== null) ? Photo.fromPartial(object.photo) : undefined;
    message.zoomIn = (object.zoomIn !== undefined && object.zoomIn !== null)
      ? ZoomIn.fromPartial(object.zoomIn)
      : undefined;
    message.zoomOut = (object.zoomOut !== undefined && object.zoomOut !== null)
      ? ZoomOut.fromPartial(object.zoomOut)
      : undefined;
    message.zoomStop = (object.zoomStop !== undefined && object.zoomStop !== null)
      ? ZoomStop.fromPartial(object.zoomStop)
      : undefined;
    message.focusIn = (object.focusIn !== undefined && object.focusIn !== null)
      ? FocusIn.fromPartial(object.focusIn)
      : undefined;
    message.focusOut = (object.focusOut !== undefined && object.focusOut !== null)
      ? FocusOut.fromPartial(object.focusOut)
      : undefined;
    message.focusStop = (object.focusStop !== undefined && object.focusStop !== null)
      ? FocusStop.fromPartial(object.focusStop)
      : undefined;
    message.calibrate = (object.calibrate !== undefined && object.calibrate !== null)
      ? Calibrate.fromPartial(object.calibrate)
      : undefined;
    message.setDdeLevel = (object.setDdeLevel !== undefined && object.setDdeLevel !== null)
      ? SetDDELevel.fromPartial(object.setDdeLevel)
      : undefined;
    message.enableDde = (object.enableDde !== undefined && object.enableDde !== null)
      ? EnableDDE.fromPartial(object.enableDde)
      : undefined;
    message.disableDde = (object.disableDde !== undefined && object.disableDde !== null)
      ? DisableDDE.fromPartial(object.disableDde)
      : undefined;
    message.setAutoFocus = (object.setAutoFocus !== undefined && object.setAutoFocus !== null)
      ? SetAutoFocus.fromPartial(object.setAutoFocus)
      : undefined;
    message.focusStepPlus = (object.focusStepPlus !== undefined && object.focusStepPlus !== null)
      ? FocusStepPlus.fromPartial(object.focusStepPlus)
      : undefined;
    message.focusStepMinus = (object.focusStepMinus !== undefined && object.focusStepMinus !== null)
      ? FocusStepMinus.fromPartial(object.focusStepMinus)
      : undefined;
    message.setFxMode = (object.setFxMode !== undefined && object.setFxMode !== null)
      ? SetFxMode.fromPartial(object.setFxMode)
      : undefined;
    message.nextFxMode = (object.nextFxMode !== undefined && object.nextFxMode !== null)
      ? NextFxMode.fromPartial(object.nextFxMode)
      : undefined;
    message.prevFxMode = (object.prevFxMode !== undefined && object.prevFxMode !== null)
      ? PrevFxMode.fromPartial(object.prevFxMode)
      : undefined;
    message.getMeteo = (object.getMeteo !== undefined && object.getMeteo !== null)
      ? GetMeteo.fromPartial(object.getMeteo)
      : undefined;
    message.shiftDde = (object.shiftDde !== undefined && object.shiftDde !== null)
      ? ShiftDDE.fromPartial(object.shiftDde)
      : undefined;
    message.refreshFxMode = (object.refreshFxMode !== undefined && object.refreshFxMode !== null)
      ? RefreshFxMode.fromPartial(object.refreshFxMode)
      : undefined;
    message.resetZoom = (object.resetZoom !== undefined && object.resetZoom !== null)
      ? ResetZoom.fromPartial(object.resetZoom)
      : undefined;
    message.saveToTable = (object.saveToTable !== undefined && object.saveToTable !== null)
      ? SaveToTable.fromPartial(object.saveToTable)
      : undefined;
    message.setCalibMode = (object.setCalibMode !== undefined && object.setCalibMode !== null)
      ? SetCalibMode.fromPartial(object.setCalibMode)
      : undefined;
    message.setDigitalZoomLevel = (object.setDigitalZoomLevel !== undefined && object.setDigitalZoomLevel !== null)
      ? SetDigitalZoomLevel.fromPartial(object.setDigitalZoomLevel)
      : undefined;
    message.setClaheLevel = (object.setClaheLevel !== undefined && object.setClaheLevel !== null)
      ? SetClaheLevel.fromPartial(object.setClaheLevel)
      : undefined;
    message.shiftClaheLevel = (object.shiftClaheLevel !== undefined && object.shiftClaheLevel !== null)
      ? ShiftClaheLevel.fromPartial(object.shiftClaheLevel)
      : undefined;
    message.focusRoi = (object.focusRoi !== undefined && object.focusRoi !== null)
      ? FocusROI.fromPartial(object.focusRoi)
      : undefined;
    message.trackRoi = (object.trackRoi !== undefined && object.trackRoi !== null)
      ? TrackROI.fromPartial(object.trackRoi)
      : undefined;
    message.zoomRoi = (object.zoomRoi !== undefined && object.zoomRoi !== null)
      ? ZoomROI.fromPartial(object.zoomRoi)
      : undefined;
    return message;
  },
};

function createBaseSetFxMode(): SetFxMode {
  return { mode: 0 };
}

export const SetFxMode: MessageFns<SetFxMode> = {
  encode(message: SetFxMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetFxMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFxMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFxMode {
    return { mode: isSet(object.mode) ? jonGuiDataFxModeHeatFromJSON(object.mode) : 0 };
  },

  toJSON(message: SetFxMode): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = jonGuiDataFxModeHeatToJSON(message.mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetFxMode>, I>>(base?: I): SetFxMode {
    return SetFxMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetFxMode>, I>>(object: I): SetFxMode {
    const message = createBaseSetFxMode();
    message.mode = object.mode ?? 0;
    return message;
  },
};

function createBaseSetClaheLevel(): SetClaheLevel {
  return { value: 0 };
}

export const SetClaheLevel: MessageFns<SetClaheLevel> = {
  encode(message: SetClaheLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetClaheLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetClaheLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetClaheLevel {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetClaheLevel): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetClaheLevel>, I>>(base?: I): SetClaheLevel {
    return SetClaheLevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetClaheLevel>, I>>(object: I): SetClaheLevel {
    const message = createBaseSetClaheLevel();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseShiftClaheLevel(): ShiftClaheLevel {
  return { value: 0 };
}

export const ShiftClaheLevel: MessageFns<ShiftClaheLevel> = {
  encode(message: ShiftClaheLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShiftClaheLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShiftClaheLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShiftClaheLevel {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: ShiftClaheLevel): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShiftClaheLevel>, I>>(base?: I): ShiftClaheLevel {
    return ShiftClaheLevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShiftClaheLevel>, I>>(object: I): ShiftClaheLevel {
    const message = createBaseShiftClaheLevel();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseNextFxMode(): NextFxMode {
  return {};
}

export const NextFxMode: MessageFns<NextFxMode> = {
  encode(_: NextFxMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextFxMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextFxMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NextFxMode {
    return {};
  },

  toJSON(_: NextFxMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NextFxMode>, I>>(base?: I): NextFxMode {
    return NextFxMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextFxMode>, I>>(_: I): NextFxMode {
    const message = createBaseNextFxMode();
    return message;
  },
};

function createBasePrevFxMode(): PrevFxMode {
  return {};
}

export const PrevFxMode: MessageFns<PrevFxMode> = {
  encode(_: PrevFxMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrevFxMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrevFxMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrevFxMode {
    return {};
  },

  toJSON(_: PrevFxMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrevFxMode>, I>>(base?: I): PrevFxMode {
    return PrevFxMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrevFxMode>, I>>(_: I): PrevFxMode {
    const message = createBasePrevFxMode();
    return message;
  },
};

function createBaseRefreshFxMode(): RefreshFxMode {
  return {};
}

export const RefreshFxMode: MessageFns<RefreshFxMode> = {
  encode(_: RefreshFxMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshFxMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshFxMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RefreshFxMode {
    return {};
  },

  toJSON(_: RefreshFxMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshFxMode>, I>>(base?: I): RefreshFxMode {
    return RefreshFxMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshFxMode>, I>>(_: I): RefreshFxMode {
    const message = createBaseRefreshFxMode();
    return message;
  },
};

function createBaseEnableDDE(): EnableDDE {
  return {};
}

export const EnableDDE: MessageFns<EnableDDE> = {
  encode(_: EnableDDE, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableDDE {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableDDE();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableDDE {
    return {};
  },

  toJSON(_: EnableDDE): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableDDE>, I>>(base?: I): EnableDDE {
    return EnableDDE.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableDDE>, I>>(_: I): EnableDDE {
    const message = createBaseEnableDDE();
    return message;
  },
};

function createBaseDisableDDE(): DisableDDE {
  return {};
}

export const DisableDDE: MessageFns<DisableDDE> = {
  encode(_: DisableDDE, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableDDE {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableDDE();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableDDE {
    return {};
  },

  toJSON(_: DisableDDE): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableDDE>, I>>(base?: I): DisableDDE {
    return DisableDDE.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableDDE>, I>>(_: I): DisableDDE {
    const message = createBaseDisableDDE();
    return message;
  },
};

function createBaseSetValue(): SetValue {
  return { value: 0 };
}

export const SetValue: MessageFns<SetValue> = {
  encode(message: SetValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetValue>, I>>(base?: I): SetValue {
    return SetValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetValue>, I>>(object: I): SetValue {
    const message = createBaseSetValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetDDELevel(): SetDDELevel {
  return { value: 0 };
}

export const SetDDELevel: MessageFns<SetDDELevel> = {
  encode(message: SetDDELevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDDELevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDDELevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDDELevel {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetDDELevel): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDDELevel>, I>>(base?: I): SetDDELevel {
    return SetDDELevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDDELevel>, I>>(object: I): SetDDELevel {
    const message = createBaseSetDDELevel();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetDigitalZoomLevel(): SetDigitalZoomLevel {
  return { value: 0 };
}

export const SetDigitalZoomLevel: MessageFns<SetDigitalZoomLevel> = {
  encode(message: SetDigitalZoomLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetDigitalZoomLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDigitalZoomLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDigitalZoomLevel {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetDigitalZoomLevel): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDigitalZoomLevel>, I>>(base?: I): SetDigitalZoomLevel {
    return SetDigitalZoomLevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDigitalZoomLevel>, I>>(object: I): SetDigitalZoomLevel {
    const message = createBaseSetDigitalZoomLevel();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseShiftDDE(): ShiftDDE {
  return { value: 0 };
}

export const ShiftDDE: MessageFns<ShiftDDE> = {
  encode(message: ShiftDDE, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShiftDDE {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShiftDDE();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShiftDDE {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: ShiftDDE): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShiftDDE>, I>>(base?: I): ShiftDDE {
    return ShiftDDE.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShiftDDE>, I>>(object: I): ShiftDDE {
    const message = createBaseShiftDDE();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseZoomIn(): ZoomIn {
  return {};
}

export const ZoomIn: MessageFns<ZoomIn> = {
  encode(_: ZoomIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoomIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomIn {
    return {};
  },

  toJSON(_: ZoomIn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomIn>, I>>(base?: I): ZoomIn {
    return ZoomIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomIn>, I>>(_: I): ZoomIn {
    const message = createBaseZoomIn();
    return message;
  },
};

function createBaseZoomOut(): ZoomOut {
  return {};
}

export const ZoomOut: MessageFns<ZoomOut> = {
  encode(_: ZoomOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoomOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomOut {
    return {};
  },

  toJSON(_: ZoomOut): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomOut>, I>>(base?: I): ZoomOut {
    return ZoomOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomOut>, I>>(_: I): ZoomOut {
    const message = createBaseZoomOut();
    return message;
  },
};

function createBaseZoomStop(): ZoomStop {
  return {};
}

export const ZoomStop: MessageFns<ZoomStop> = {
  encode(_: ZoomStop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoomStop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomStop {
    return {};
  },

  toJSON(_: ZoomStop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomStop>, I>>(base?: I): ZoomStop {
    return ZoomStop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomStop>, I>>(_: I): ZoomStop {
    const message = createBaseZoomStop();
    return message;
  },
};

function createBaseFocusIn(): FocusIn {
  return {};
}

export const FocusIn: MessageFns<FocusIn> = {
  encode(_: FocusIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusIn {
    return {};
  },

  toJSON(_: FocusIn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusIn>, I>>(base?: I): FocusIn {
    return FocusIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusIn>, I>>(_: I): FocusIn {
    const message = createBaseFocusIn();
    return message;
  },
};

function createBaseFocusOut(): FocusOut {
  return {};
}

export const FocusOut: MessageFns<FocusOut> = {
  encode(_: FocusOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusOut {
    return {};
  },

  toJSON(_: FocusOut): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusOut>, I>>(base?: I): FocusOut {
    return FocusOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusOut>, I>>(_: I): FocusOut {
    const message = createBaseFocusOut();
    return message;
  },
};

function createBaseFocusStop(): FocusStop {
  return {};
}

export const FocusStop: MessageFns<FocusStop> = {
  encode(_: FocusStop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusStop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusStop {
    return {};
  },

  toJSON(_: FocusStop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusStop>, I>>(base?: I): FocusStop {
    return FocusStop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusStop>, I>>(_: I): FocusStop {
    const message = createBaseFocusStop();
    return message;
  },
};

function createBaseFocusStepPlus(): FocusStepPlus {
  return {};
}

export const FocusStepPlus: MessageFns<FocusStepPlus> = {
  encode(_: FocusStepPlus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusStepPlus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusStepPlus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusStepPlus {
    return {};
  },

  toJSON(_: FocusStepPlus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusStepPlus>, I>>(base?: I): FocusStepPlus {
    return FocusStepPlus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusStepPlus>, I>>(_: I): FocusStepPlus {
    const message = createBaseFocusStepPlus();
    return message;
  },
};

function createBaseFocusStepMinus(): FocusStepMinus {
  return {};
}

export const FocusStepMinus: MessageFns<FocusStepMinus> = {
  encode(_: FocusStepMinus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusStepMinus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusStepMinus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusStepMinus {
    return {};
  },

  toJSON(_: FocusStepMinus): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusStepMinus>, I>>(base?: I): FocusStepMinus {
    return FocusStepMinus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusStepMinus>, I>>(_: I): FocusStepMinus {
    const message = createBaseFocusStepMinus();
    return message;
  },
};

function createBaseCalibrate(): Calibrate {
  return {};
}

export const Calibrate: MessageFns<Calibrate> = {
  encode(_: Calibrate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Calibrate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Calibrate {
    return {};
  },

  toJSON(_: Calibrate): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Calibrate>, I>>(base?: I): Calibrate {
    return Calibrate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Calibrate>, I>>(_: I): Calibrate {
    const message = createBaseCalibrate();
    return message;
  },
};

function createBaseZoom(): Zoom {
  return { setZoomTableValue: undefined, nextZoomTablePos: undefined, prevZoomTablePos: undefined };
}

export const Zoom: MessageFns<Zoom> = {
  encode(message: Zoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setZoomTableValue !== undefined) {
      SetZoomTableValue.encode(message.setZoomTableValue, writer.uint32(10).fork()).join();
    }
    if (message.nextZoomTablePos !== undefined) {
      NextZoomTablePos.encode(message.nextZoomTablePos, writer.uint32(18).fork()).join();
    }
    if (message.prevZoomTablePos !== undefined) {
      PrevZoomTablePos.encode(message.prevZoomTablePos, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Zoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.setZoomTableValue = SetZoomTableValue.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextZoomTablePos = NextZoomTablePos.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.prevZoomTablePos = PrevZoomTablePos.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Zoom {
    return {
      setZoomTableValue: isSet(object.setZoomTableValue)
        ? SetZoomTableValue.fromJSON(object.setZoomTableValue)
        : undefined,
      nextZoomTablePos: isSet(object.nextZoomTablePos) ? NextZoomTablePos.fromJSON(object.nextZoomTablePos) : undefined,
      prevZoomTablePos: isSet(object.prevZoomTablePos) ? PrevZoomTablePos.fromJSON(object.prevZoomTablePos) : undefined,
    };
  },

  toJSON(message: Zoom): unknown {
    const obj: any = {};
    if (message.setZoomTableValue !== undefined) {
      obj.setZoomTableValue = SetZoomTableValue.toJSON(message.setZoomTableValue);
    }
    if (message.nextZoomTablePos !== undefined) {
      obj.nextZoomTablePos = NextZoomTablePos.toJSON(message.nextZoomTablePos);
    }
    if (message.prevZoomTablePos !== undefined) {
      obj.prevZoomTablePos = PrevZoomTablePos.toJSON(message.prevZoomTablePos);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Zoom>, I>>(base?: I): Zoom {
    return Zoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Zoom>, I>>(object: I): Zoom {
    const message = createBaseZoom();
    message.setZoomTableValue = (object.setZoomTableValue !== undefined && object.setZoomTableValue !== null)
      ? SetZoomTableValue.fromPartial(object.setZoomTableValue)
      : undefined;
    message.nextZoomTablePos = (object.nextZoomTablePos !== undefined && object.nextZoomTablePos !== null)
      ? NextZoomTablePos.fromPartial(object.nextZoomTablePos)
      : undefined;
    message.prevZoomTablePos = (object.prevZoomTablePos !== undefined && object.prevZoomTablePos !== null)
      ? PrevZoomTablePos.fromPartial(object.prevZoomTablePos)
      : undefined;
    return message;
  },
};

function createBaseNextZoomTablePos(): NextZoomTablePos {
  return {};
}

export const NextZoomTablePos: MessageFns<NextZoomTablePos> = {
  encode(_: NextZoomTablePos, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextZoomTablePos {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NextZoomTablePos {
    return {};
  },

  toJSON(_: NextZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(base?: I): NextZoomTablePos {
    return NextZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(_: I): NextZoomTablePos {
    const message = createBaseNextZoomTablePos();
    return message;
  },
};

function createBasePrevZoomTablePos(): PrevZoomTablePos {
  return {};
}

export const PrevZoomTablePos: MessageFns<PrevZoomTablePos> = {
  encode(_: PrevZoomTablePos, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrevZoomTablePos {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrevZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrevZoomTablePos {
    return {};
  },

  toJSON(_: PrevZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(base?: I): PrevZoomTablePos {
    return PrevZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(_: I): PrevZoomTablePos {
    const message = createBasePrevZoomTablePos();
    return message;
  },
};

function createBaseSetCalibMode(): SetCalibMode {
  return {};
}

export const SetCalibMode: MessageFns<SetCalibMode> = {
  encode(_: SetCalibMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetCalibMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCalibMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetCalibMode {
    return {};
  },

  toJSON(_: SetCalibMode): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCalibMode>, I>>(base?: I): SetCalibMode {
    return SetCalibMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCalibMode>, I>>(_: I): SetCalibMode {
    const message = createBaseSetCalibMode();
    return message;
  },
};

function createBaseSetZoomTableValue(): SetZoomTableValue {
  return { value: 0 };
}

export const SetZoomTableValue: MessageFns<SetZoomTableValue> = {
  encode(message: SetZoomTableValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetZoomTableValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetZoomTableValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetZoomTableValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetZoomTableValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(base?: I): SetZoomTableValue {
    return SetZoomTableValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(object: I): SetZoomTableValue {
    const message = createBaseSetZoomTableValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetAGC(): SetAGC {
  return { value: 0 };
}

export const SetAGC: MessageFns<SetAGC> = {
  encode(message: SetAGC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAGC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAGC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAGC {
    return { value: isSet(object.value) ? jonGuiDataVideoChannelHeatAGCModesFromJSON(object.value) : 0 };
  },

  toJSON(message: SetAGC): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataVideoChannelHeatAGCModesToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAGC>, I>>(base?: I): SetAGC {
    return SetAGC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAGC>, I>>(object: I): SetAGC {
    const message = createBaseSetAGC();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetFilters(): SetFilters {
  return { value: 0 };
}

export const SetFilters: MessageFns<SetFilters> = {
  encode(message: SetFilters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetFilters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFilters {
    return { value: isSet(object.value) ? jonGuiDataVideoChannelHeatFiltersFromJSON(object.value) : 0 };
  },

  toJSON(message: SetFilters): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataVideoChannelHeatFiltersToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetFilters>, I>>(base?: I): SetFilters {
    return SetFilters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetFilters>, I>>(object: I): SetFilters {
    const message = createBaseSetFilters();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseStart(): Start {
  return {};
}

export const Start: MessageFns<Start> = {
  encode(_: Start, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Start {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Start {
    return {};
  },

  toJSON(_: Start): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(_: I): Start {
    const message = createBaseStart();
    return message;
  },
};

function createBaseStop(): Stop {
  return {};
}

export const Stop: MessageFns<Stop> = {
  encode(_: Stop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Stop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Stop {
    return {};
  },

  toJSON(_: Stop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(_: I): Stop {
    const message = createBaseStop();
    return message;
  },
};

function createBaseHalt(): Halt {
  return {};
}

export const Halt: MessageFns<Halt> = {
  encode(_: Halt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Halt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHalt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Halt {
    return {};
  },

  toJSON(_: Halt): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Halt>, I>>(base?: I): Halt {
    return Halt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Halt>, I>>(_: I): Halt {
    const message = createBaseHalt();
    return message;
  },
};

function createBasePhoto(): Photo {
  return {};
}

export const Photo: MessageFns<Photo> = {
  encode(_: Photo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Photo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhoto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Photo {
    return {};
  },

  toJSON(_: Photo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Photo>, I>>(base?: I): Photo {
    return Photo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Photo>, I>>(_: I): Photo {
    const message = createBasePhoto();
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo: MessageFns<GetMeteo> = {
  encode(_: GetMeteo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

function createBaseSetAutoFocus(): SetAutoFocus {
  return { value: false };
}

export const SetAutoFocus: MessageFns<SetAutoFocus> = {
  encode(message: SetAutoFocus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetAutoFocus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutoFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAutoFocus {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetAutoFocus): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAutoFocus>, I>>(base?: I): SetAutoFocus {
    return SetAutoFocus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAutoFocus>, I>>(object: I): SetAutoFocus {
    const message = createBaseSetAutoFocus();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseResetZoom(): ResetZoom {
  return {};
}

export const ResetZoom: MessageFns<ResetZoom> = {
  encode(_: ResetZoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetZoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetZoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResetZoom {
    return {};
  },

  toJSON(_: ResetZoom): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetZoom>, I>>(base?: I): ResetZoom {
    return ResetZoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetZoom>, I>>(_: I): ResetZoom {
    const message = createBaseResetZoom();
    return message;
  },
};

function createBaseSaveToTable(): SaveToTable {
  return {};
}

export const SaveToTable: MessageFns<SaveToTable> = {
  encode(_: SaveToTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveToTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveToTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SaveToTable {
    return {};
  },

  toJSON(_: SaveToTable): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveToTable>, I>>(base?: I): SaveToTable {
    return SaveToTable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveToTable>, I>>(_: I): SaveToTable {
    const message = createBaseSaveToTable();
    return message;
  },
};

function createBaseFocusROI(): FocusROI {
  return { x: 0, y: 0 };
}

export const FocusROI: MessageFns<FocusROI> = {
  encode(message: FocusROI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusROI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusROI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FocusROI {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: FocusROI): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusROI>, I>>(base?: I): FocusROI {
    return FocusROI.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusROI>, I>>(object: I): FocusROI {
    const message = createBaseFocusROI();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseTrackROI(): TrackROI {
  return { x1: 0, y1: 0, x2: 0, y2: 0 };
}

export const TrackROI: MessageFns<TrackROI> = {
  encode(message: TrackROI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x1 !== 0) {
      writer.uint32(9).double(message.x1);
    }
    if (message.y1 !== 0) {
      writer.uint32(17).double(message.y1);
    }
    if (message.x2 !== 0) {
      writer.uint32(25).double(message.x2);
    }
    if (message.y2 !== 0) {
      writer.uint32(33).double(message.y2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackROI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackROI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.x1 = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.y1 = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.x2 = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.y2 = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackROI {
    return {
      x1: isSet(object.x1) ? globalThis.Number(object.x1) : 0,
      y1: isSet(object.y1) ? globalThis.Number(object.y1) : 0,
      x2: isSet(object.x2) ? globalThis.Number(object.x2) : 0,
      y2: isSet(object.y2) ? globalThis.Number(object.y2) : 0,
    };
  },

  toJSON(message: TrackROI): unknown {
    const obj: any = {};
    if (message.x1 !== 0) {
      obj.x1 = message.x1;
    }
    if (message.y1 !== 0) {
      obj.y1 = message.y1;
    }
    if (message.x2 !== 0) {
      obj.x2 = message.x2;
    }
    if (message.y2 !== 0) {
      obj.y2 = message.y2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackROI>, I>>(base?: I): TrackROI {
    return TrackROI.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackROI>, I>>(object: I): TrackROI {
    const message = createBaseTrackROI();
    message.x1 = object.x1 ?? 0;
    message.y1 = object.y1 ?? 0;
    message.x2 = object.x2 ?? 0;
    message.y2 = object.y2 ?? 0;
    return message;
  },
};

function createBaseZoomROI(): ZoomROI {
  return { x1: 0, y1: 0, x2: 0, y2: 0 };
}

export const ZoomROI: MessageFns<ZoomROI> = {
  encode(message: ZoomROI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x1 !== 0) {
      writer.uint32(9).double(message.x1);
    }
    if (message.y1 !== 0) {
      writer.uint32(17).double(message.y1);
    }
    if (message.x2 !== 0) {
      writer.uint32(25).double(message.x2);
    }
    if (message.y2 !== 0) {
      writer.uint32(33).double(message.y2);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZoomROI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomROI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.x1 = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.y1 = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.x2 = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.y2 = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZoomROI {
    return {
      x1: isSet(object.x1) ? globalThis.Number(object.x1) : 0,
      y1: isSet(object.y1) ? globalThis.Number(object.y1) : 0,
      x2: isSet(object.x2) ? globalThis.Number(object.x2) : 0,
      y2: isSet(object.y2) ? globalThis.Number(object.y2) : 0,
    };
  },

  toJSON(message: ZoomROI): unknown {
    const obj: any = {};
    if (message.x1 !== 0) {
      obj.x1 = message.x1;
    }
    if (message.y1 !== 0) {
      obj.y1 = message.y1;
    }
    if (message.x2 !== 0) {
      obj.x2 = message.x2;
    }
    if (message.y2 !== 0) {
      obj.y2 = message.y2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomROI>, I>>(base?: I): ZoomROI {
    return ZoomROI.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomROI>, I>>(object: I): ZoomROI {
    const message = createBaseZoomROI();
    message.x1 = object.x1 ?? 0;
    message.y1 = object.y1 ?? 0;
    message.x2 = object.x2 ?? 0;
    message.y2 = object.y2 ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
