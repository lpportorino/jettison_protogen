FROM ubuntu:24.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PROTOC_VERSION=29.2
ENV GO_VERSION=1.23.4
ENV RUST_VERSION=1.83.0

# Install base dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    git \
    wget \
    unzip \
    python3 \
    python3-pip \
    python3-venv \
    openjdk-17-jdk \
    maven \
    nodejs \
    npm \
    gawk \
    && rm -rf /var/lib/apt/lists/*

# Detect architecture and install Protocol Buffers compiler
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then \
        PROTOC_ARCH="aarch_64"; \
    else \
        PROTOC_ARCH="x86_64"; \
    fi && \
    wget -q https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-${PROTOC_ARCH}.zip \
    && unzip protoc-${PROTOC_VERSION}-linux-${PROTOC_ARCH}.zip -d /usr/local \
    && rm protoc-${PROTOC_VERSION}-linux-${PROTOC_ARCH}.zip

# Install Go for the correct architecture
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then \
        GO_ARCH="arm64"; \
    else \
        GO_ARCH="amd64"; \
    fi && \
    wget -q https://go.dev/dl/go${GO_VERSION}.linux-${GO_ARCH}.tar.gz \
    && tar -C /usr/local -xzf go${GO_VERSION}.linux-${GO_ARCH}.tar.gz \
    && rm go${GO_VERSION}.linux-${GO_ARCH}.tar.gz
ENV PATH=/usr/local/go/bin:$PATH
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:$PATH

# Install Rust system-wide in /opt/rust for all users
ENV RUSTUP_HOME=/opt/rust
ENV CARGO_HOME=/opt/rust
RUN curl -s --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION} --profile minimal --no-modify-path
ENV PATH=/opt/rust/bin:$PATH
# Make rust directory accessible to all users
RUN chmod -R a+rx /opt/rust

# Install Python protobuf dependencies
RUN pip3 install --break-system-packages \
    protobuf \
    grpcio-tools \
    mypy-protobuf

# Install TypeScript/Node dependencies globally
RUN npm install -g \
    ts-proto \
    @bufbuild/protoc-gen-es \
    @bufbuild/protoc-gen-connect-es

# Install Go protobuf plugins
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest \
    && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Clone protovalidate for validate.proto definitions
RUN git clone https://github.com/bufbuild/protovalidate.git /opt/protovalidate

# Install buf CLI
RUN curl -sSL "https://github.com/bufbuild/buf/releases/latest/download/buf-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/buf && \
    chmod +x /usr/local/bin/buf

# Create buf configuration for Java generation with protovalidate
RUN mkdir -p /workspace/buf-config && \
    echo 'version: v2' > /workspace/buf-config/buf.gen.yaml && \
    echo 'plugins:' >> /workspace/buf-config/buf.gen.yaml && \
    echo '  - protoc_builtin: java' >> /workspace/buf-config/buf.gen.yaml && \
    echo '    out: /workspace/output' >> /workspace/buf-config/buf.gen.yaml

# Create a script to add validate import to proto files
RUN echo '#!/bin/bash\n\
file="$1"\n\
if ! grep -q "import.*validate.proto" "$file"; then\n\
  sed -i "/^syntax.*=.*proto3/a\\\nimport \"buf/validate/validate.proto\";" "$file"\n\
fi' > /usr/local/bin/add-validate-import.sh && chmod +x /usr/local/bin/add-validate-import.sh

# Clone and build nanopb for C generation
RUN git clone https://github.com/nanopb/nanopb.git /opt/nanopb \
    && cd /opt/nanopb \
    && git checkout 0.4.9 \
    && cmake . \
    && make
ENV PATH=$PATH:/opt/nanopb/generator

# Create workspace directory
WORKDIR /workspace

# Create a simple test to verify all tools are installed
RUN protoc --version \
    && go version \
    && cargo --version \
    && python3 --version \
    && node --version \
    && java --version \
    && protoc-gen-nanopb --version || echo "nanopb version check" \
    && which protoc-gen-go

ENTRYPOINT ["/bin/bash"]