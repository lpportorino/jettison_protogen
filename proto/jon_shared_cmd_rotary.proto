syntax = "proto3";

option go_package = "git-codecommit.eu-central-1.amazonaws.com/v1/repos/jettison/jonp/cmd/rotary";

package cmd.RotaryPlatform;

import "jon_shared_data_types.proto";

message Root {
  oneof cmd {
    option (buf.validate.oneof).required = true;
    Start start = 1;
    Stop stop = 2;
    Axis axis = 3;
    SetPlatformAzimuth set_platform_azimuth = 4;
    SetPlatformElevation set_platform_elevation = 5;
    SetPlatformBank set_platform_bank = 6;
    Halt halt = 7;
    setUseRotaryAsCompass set_use_rotary_as_compass = 8;
    RotateToGPS rotate_to_gps = 9;
    SetOriginGPS set_origin_gps = 10;
    SetMode set_mode = 11;
    RotateToNDC rotate_to_ndc = 12;
    ScanStart scan_start = 13;
    ScanStop scan_stop = 14;
    ScanPause scan_pause = 15;
    ScanUnpause scan_unpause = 16;
    GetMeteo get_meteo = 17;
    ScanPrev scan_prev = 18;
    ScanNext scan_next = 19;
    ScanRefreshNodeList scan_refresh_node_list = 20;
    ScanSelectNode scan_select_node = 21;
    ScanDeleteNode scan_delete_node = 22;
    ScanUpdateNode scan_update_node = 23;
    ScanAddNode scan_add_node = 24;
    HaltWithNDC halt_with_ndc = 25;
  }
}

message Axis {
  Azimuth azimuth = 1;
  Elevation elevation = 2;
}

message SetMode {
  ser.JonGuiDataRotaryMode mode = 1 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message SetAzimuthValue {
  double value = 1 [(buf.validate.field).double = {
    gte: 0.0,
    lt: 360.0
  }];
  ser.JonGuiDataRotaryDirection direction = 2 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateAzimuthTo {
  double target_value = 1 [(buf.validate.field).double = {
    gte: 0.0,
    lt: 360.0
  }];
  double speed = 2 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
  ser.JonGuiDataRotaryDirection direction = 3 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateAzimuth {
  double speed = 1 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
  ser.JonGuiDataRotaryDirection direction = 2 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateElevation {
  double speed = 1 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
  ser.JonGuiDataRotaryDirection direction = 2 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message SetElevationValue {
  double value = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
}

message RotateElevationTo {
  double target_value = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
  double speed = 2 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
}

message RotateElevationRelative {
  double value = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
  double speed = 2 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
  ser.JonGuiDataRotaryDirection direction = 3 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateElevationRelativeSet {
  double value = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
  ser.JonGuiDataRotaryDirection direction = 2 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateAzimuthRelative {
  double value = 1 [(buf.validate.field).double = {
    gte: -180.0,
    lt: 180.0
  }];
  double speed = 2 [(buf.validate.field).double = {
    gte: 0.0,
    lte: 1.0
  }];
  ser.JonGuiDataRotaryDirection direction = 3 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message RotateAzimuthRelativeSet {
  double value = 1 [(buf.validate.field).double = {
    gte: -180.0,
    lt: 180.0
  }];
  ser.JonGuiDataRotaryDirection direction = 2 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
}

message SetPlatformAzimuth {
  double value = 1 [(buf.validate.field).double = {
    gt: -360.0,
    lt: 360.0
  }];
}

message SetPlatformElevation {
  double value = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
}

message SetPlatformBank {
  double value = 1 [(buf.validate.field).double = {
    gte: -180.0,
    lt: 180.0
  }];
}

message GetMeteo {}

message Azimuth {
  oneof cmd {
    option (buf.validate.oneof).required = true;
    SetAzimuthValue set_value = 1;
    RotateAzimuthTo rotate_to = 2;
    RotateAzimuth rotate = 3;
    RotateAzimuthRelative relative = 4;
    RotateAzimuthRelativeSet relative_set = 5;
    HaltAzimuth halt = 6;
  }
}

message Start {}
message Stop {}
message Halt {}
message ScanStart {}
message ScanStop {}
message ScanPause {}
message ScanUnpause {}
message HaltAzimuth {}
message HaltElevation {}
message ScanPrev {}
message ScanNext {}
message ScanRefreshNodeList {}

message ScanSelectNode {
  int32 index = 1 [(buf.validate.field).int32 = {
    gte: 0
  }];
}

message ScanDeleteNode {
  int32 index = 1 [(buf.validate.field).int32 = {
    gte: 0
  }];
}

message ScanUpdateNode {
  int32 index = 1 [(buf.validate.field).int32 = {
    gte: 0
  }];
  int32 DayZoomTableValue = 2 [(buf.validate.field).int32 = {
    gte: 0
  }];
  int32 HeatZoomTableValue = 3 [(buf.validate.field).int32 = {
    gte: 0
  }];
  double azimuth = 4 [(buf.validate.field).double = {
    gte: 0,
    lt: 360
  }];
  double elevation = 5 [(buf.validate.field).double = {
    gte: -90,
    lte: 90
  }];
  double linger = 6 [(buf.validate.field).double = {
    gte: 0
  }];
  double speed = 7 [(buf.validate.field).double = {
    gt: 0.0,
    lte: 1.0
  }];
}

message ScanAddNode {
  int32 index = 1 [(buf.validate.field).int32 = {
    gte: 0
  }];
  int32 DayZoomTableValue = 2 [(buf.validate.field).int32 = {
    gte: 0
  }];
  int32 HeatZoomTableValue = 3 [(buf.validate.field).int32 = {
    gte: 0
  }];
  double azimuth = 4 [(buf.validate.field).double = {
    gte: 0,
    lt: 360
  }];
  double elevation = 5 [(buf.validate.field).double = {
    gte: -90,
    lte: 90
  }];
  double linger = 6 [(buf.validate.field).double = {
    gte: 0
  }];
  double speed = 7 [(buf.validate.field).double = {
    gt: 0.0,
    lte: 1.0
  }];
}

message Elevation {
  oneof cmd {
    option (buf.validate.oneof).required = true;
    SetElevationValue set_value = 1;
    RotateElevationTo rotate_to = 2;
    RotateElevation rotate = 3;
    RotateElevationRelative relative = 4;
    RotateElevationRelativeSet relative_set = 5;
    HaltElevation halt = 6;
  }
}

message setUseRotaryAsCompass {
  bool flag = 1;
}

message RotateToGPS {
  double latitude = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
  double longitude = 2 [(buf.validate.field).double = {
    gte: -180.0,
    lt: 180.0
  }];
  double altitude = 3 [(buf.validate.field).double = {
    gte: -430.0,  // Dead Sea shore (lowest point on Earth's surface)
    lte: 100000.0  // K치rm치n line (edge of space/atmosphere boundary)
  }];
}

message SetOriginGPS {
  double latitude = 1 [(buf.validate.field).double = {
    gte: -90.0,
    lte: 90.0
  }];
  double longitude = 2 [(buf.validate.field).double = {
    gte: -180.0,
    lt: 180.0
  }];
  double altitude = 3 [(buf.validate.field).double = {
    gte: -430.0,  // Dead Sea shore (lowest point on Earth's surface)
    lte: 100000.0  // K치rm치n line (edge of space/atmosphere boundary)
  }];
}

message RotateToNDC {
  ser.JonGuiDataVideoChannel channel = 1 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
  double x = 2 [(buf.validate.field).double = {
    gte: -1.0,
    lte: 1.0
  }];
  double y = 3 [(buf.validate.field).double = {
    gte: -1.0,
    lte: 1.0
  }];
  uint64 frame_time = 4;  // Video frame timestamp
  uint64 state_time = 5;  // System monotonic time from state when user performed action
}

message HaltWithNDC {
  ser.JonGuiDataVideoChannel channel = 1 [(buf.validate.field).enum = {
    defined_only: true,
    not_in: [0]
  }];
  double x = 2 [(buf.validate.field).double = {
    gte: -1.0,
    lte: 1.0
  }];
  double y = 3 [(buf.validate.field).double = {
    gte: -1.0,
    lte: 1.0
  }];
  uint64 frame_time = 4;  // Video frame timestamp at gesture end
  uint64 state_time = 5;  // System monotonic time from state when gesture ended
}
